{"ast":null,"code":"import { OperationType } from '../types';\nexport function getAnswerServiceInstance(session, query, operation, thoughtSpotHost) {\n  let variable;\n  const fetchQuery = async variables => {\n    try {\n      const response = await fetch(`${thoughtSpotHost}/prism/?op=${operation}`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'x-requested-by': 'ThoughtSpot',\n          accept: '*/*',\n          'accept-language': 'en-us'\n        },\n        body: JSON.stringify({\n          operationName: operation,\n          query,\n          variables\n        }),\n        credentials: 'include'\n      });\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      return error;\n    }\n  };\n  const fetchData = (offset, batchSize) => {\n    if (operation === OperationType.GetChartWithData) {\n      variable = {\n        batchSize,\n        offset: offset * batchSize\n      };\n    } else {\n      variable = {\n        dataPaginationParams: {\n          isClientPaginated: true,\n          offset: offset * batchSize,\n          size: batchSize\n        }\n      };\n    }\n    return fetchQuery({\n      session,\n      ...variable\n    });\n  };\n  return {\n    fetchData\n  };\n}","map":{"version":3,"mappings":"AAAA,SAA2BA,aAAa,QAAQ,UAAU;AAE1D,OAAM,SAAUC,wBAAwB,CACpCC,OAAyB,EACzBC,KAAa,EACbC,SAAiB,EACjBC,eAAuB;EAEvB,IAAIC,QAAa;EAEjB,MAAMC,UAAU,GAAG,MAAOC,SAAc,IAAI;IACxC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAGL,eAAe,cAAcD,SAAS,EAAE,EAC3C;QACIO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,gCAAgC;UAChD,gBAAgB,EAAE,aAAa;UAC/BC,MAAM,EAAE,KAAK;UACb,iBAAiB,EAAE;SACtB;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,aAAa,EAAEb,SAAS;UACxBD,KAAK;UACLK;SACH,CAAC;QACFU,WAAW,EAAE;OAChB,CACJ;MACD,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MACpC,OAAOD,MAAM,CAACE,IAAI;KACrB,CAAC,OAAOC,KAAK,EAAE;MACZ,OAAOA,KAAK;;EAEpB,CAAC;EAED,MAAMC,SAAS,GAAG,CAACC,MAAc,EAAEC,SAAiB,KAAI;IACpD,IAAIrB,SAAS,KAAKJ,aAAa,CAAC0B,gBAAgB,EAAE;MAC9CpB,QAAQ,GAAG;QAAEmB,SAAS;QAAED,MAAM,EAAEA,MAAM,GAAGC;MAAS,CAAE;KACvD,MAAM;MACHnB,QAAQ,GAAG;QACPqB,oBAAoB,EAAE;UAClBC,iBAAiB,EAAE,IAAI;UACvBJ,MAAM,EAAEA,MAAM,GAAGC,SAAS;UAC1BI,IAAI,EAAEJ;;OAEb;;IAEL,OAAOlB,UAAU,CAAC;MACdL,OAAO;MACP,GAAGI;KACN,CAAC;EACN,CAAC;EAED,OAAO;IACHiB;GACH;AACL","names":["OperationType","getAnswerServiceInstance","session","query","operation","thoughtSpotHost","variable","fetchQuery","variables","response","fetch","method","headers","accept","body","JSON","stringify","operationName","credentials","result","json","data","error","fetchData","offset","batchSize","GetChartWithData","dataPaginationParams","isClientPaginated","size"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\answerService.ts"],"sourcesContent":["import { SessionInterface, OperationType } from '../types';\n\nexport function getAnswerServiceInstance(\n    session: SessionInterface,\n    query: string,\n    operation: string,\n    thoughtSpotHost: string,\n): any {\n    let variable: any;\n\n    const fetchQuery = async (variables: any) => {\n        try {\n            const response = await fetch(\n                `${thoughtSpotHost}/prism/?op=${operation}`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json;charset=UTF-8',\n                        'x-requested-by': 'ThoughtSpot',\n                        accept: '*/*',\n                        'accept-language': 'en-us',\n                    },\n                    body: JSON.stringify({\n                        operationName: operation,\n                        query,\n                        variables,\n                    }),\n                    credentials: 'include',\n                },\n            );\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            return error;\n        }\n    };\n\n    const fetchData = (offset: number, batchSize: number) => {\n        if (operation === OperationType.GetChartWithData) {\n            variable = { batchSize, offset: offset * batchSize };\n        } else {\n            variable = {\n                dataPaginationParams: {\n                    isClientPaginated: true,\n                    offset: offset * batchSize,\n                    size: batchSize,\n                },\n            };\n        }\n        return fetchQuery({\n            session,\n            ...variable,\n        });\n    };\n\n    return {\n        fetchData,\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}