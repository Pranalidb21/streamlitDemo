{"ast":null,"code":"import { Param } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { TsEmbed } from './ts-embed';\n/**\n * Embed ThoughtSpot search bar\n *\n * @Category Search Embed\n * @version: SDK: 1.17.0 | ThoughtSpot 8.10.0.cl, 9.0.1-sw\n */\nexport class SearchBarEmbed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot search to be\n   * loaded in the iframe\n   * @param dataSources A list of data source GUIDs\n   */\n  getIFrameSrc(dataSources) {\n    var _a;\n    const {\n      searchOptions\n    } = this.viewConfig;\n    const path = 'search-bar-embed';\n    const queryParams = this.getBaseQueryParams();\n    queryParams[Param.HideActions] = [...((_a = queryParams[Param.HideActions]) !== null && _a !== void 0 ? _a : [])];\n    if (dataSources && dataSources.length) {\n      queryParams[Param.DataSources] = JSON.stringify(dataSources);\n    }\n    if (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchTokenString) {\n      queryParams[Param.searchTokenString] = encodeURIComponent(searchOptions.searchTokenString);\n      if (searchOptions.executeSearch) {\n        queryParams[Param.executeSearch] = true;\n      }\n    }\n    queryParams[Param.UseLastSelectedDataSource] = false;\n    queryParams[Param.searchEmbed] = true;\n    let query = '';\n    const queryParamsString = getQueryParamString(queryParams, true);\n    if (queryParamsString) {\n      query = `?${queryParamsString}`;\n    }\n    const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n    return `${this.getEmbedBasePath(query)}/${path}${tsPostHashParams}`;\n  }\n  /**\n   * Render the embedded ThoughtSpot search\n   */\n  render() {\n    super.render();\n    const {\n      dataSources\n    } = this.viewConfig;\n    const src = this.getIFrameSrc(dataSources);\n    this.renderIFrame(src, this.viewConfig.frameParams);\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAsBA,KAAK,QAA4B,UAAU;AACjE,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,OAAO,QAAQ,YAAY;AAkBpC;;;;;;AAMA,OAAM,MAAOC,cAAe,SAAQD,OAAO;EAMvCE,YAAYC,WAAmB,EAAEC,UAA+B;IAC5D,KAAK,CAACD,WAAW,CAAC;IAClB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAChC;EAEA;;;;;EAKQC,YAAY,CAACC,WAAsB;;IACvC,MAAM;MAAEC;IAAa,CAAE,GAAG,IAAI,CAACH,UAAU;IACzC,MAAMI,IAAI,GAAG,kBAAkB;IAC/B,MAAMC,WAAW,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAE7CD,WAAW,CAACX,KAAK,CAACa,WAAW,CAAC,GAAG,CAC7B,IAAI,iBAAW,CAACb,KAAK,CAACa,WAAW,CAAC,mCAAI,EAAE,CAAC,CAC5C;IAED,IAAIL,WAAW,IAAIA,WAAW,CAACM,MAAM,EAAE;MACnCH,WAAW,CAACX,KAAK,CAACe,WAAW,CAAC,GAAGC,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC;;IAEhE,IAAIC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,iBAAiB,EAAE;MAClCP,WAAW,CAACX,KAAK,CAACkB,iBAAiB,CAAC,GAAGC,kBAAkB,CACrDV,aAAa,CAACS,iBAAiB,CAClC;MAED,IAAIT,aAAa,CAACW,aAAa,EAAE;QAC7BT,WAAW,CAACX,KAAK,CAACoB,aAAa,CAAC,GAAG,IAAI;;;IAI/CT,WAAW,CAACX,KAAK,CAACqB,yBAAyB,CAAC,GAAG,KAAK;IACpDV,WAAW,CAACX,KAAK,CAACsB,WAAW,CAAC,GAAG,IAAI;IACrC,IAAIC,KAAK,GAAG,EAAE;IACd,MAAMC,iBAAiB,GAAGvB,mBAAmB,CAACU,WAAW,EAAE,IAAI,CAAC;IAChE,IAAIa,iBAAiB,EAAE;MACnBD,KAAK,GAAG,IAAIC,iBAAiB,EAAE;;IAEnC,MAAMC,gBAAgB,GAAG,IAAI,CAACC,2BAA2B,EAAE;IAE3D,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACJ,KAAK,CAAC,IAAIb,IAAI,GAAGe,gBAAgB,EAAE;EACvE;EAEA;;;EAGOG,MAAM;IACT,KAAK,CAACA,MAAM,EAAE;IACd,MAAM;MAAEpB;IAAW,CAAE,GAAG,IAAI,CAACF,UAAU;IAEvC,MAAMuB,GAAG,GAAG,IAAI,CAACtB,YAAY,CAACC,WAAW,CAAC;IAC1C,IAAI,CAACsB,YAAY,CAACD,GAAG,EAAE,IAAI,CAACvB,UAAU,CAACyB,WAAW,CAAC;IACnD,OAAO,IAAI;EACf","names":["Param","getQueryParamString","TsEmbed","SearchBarEmbed","constructor","domSelector","viewConfig","getIFrameSrc","dataSources","searchOptions","path","queryParams","getBaseQueryParams","HideActions","length","DataSources","JSON","stringify","searchTokenString","encodeURIComponent","executeSearch","UseLastSelectedDataSource","searchEmbed","query","queryParamsString","tsPostHashParams","getThoughtSpotPostUrlParams","getEmbedBasePath","render","src","renderIFrame","frameParams"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\search-bar.tsx"],"sourcesContent":["import { DOMSelector, Param, Action, ViewConfig } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { SearchOptions } from './search';\n\nexport interface SearchBarViewConfig extends ViewConfig {\n    /**\n     * If set to true, hides the data sources panel.\n     */\n    hideDataSources?: boolean;\n    /**\n     * The array of data source GUIDs to set on load.\n     */\n    dataSources?: string[];\n    /**\n     * Configuration for search options\n     */\n    searchOptions?: SearchOptions;\n}\n\n/**\n * Embed ThoughtSpot search bar\n *\n * @Category Search Embed\n * @version: SDK: 1.17.0 | ThoughtSpot 8.10.0.cl, 9.0.1-sw\n */\nexport class SearchBarEmbed extends TsEmbed {\n    /**\n     * The view configuration for the embedded ThoughtSpot search bar.\n     */\n    protected viewConfig: SearchBarViewConfig;\n\n    constructor(domSelector: string, viewConfig: SearchBarViewConfig) {\n        super(domSelector);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param dataSources A list of data source GUIDs\n     */\n    private getIFrameSrc(dataSources?: string[]) {\n        const { searchOptions } = this.viewConfig;\n        const path = 'search-bar-embed';\n        const queryParams = this.getBaseQueryParams();\n\n        queryParams[Param.HideActions] = [\n            ...(queryParams[Param.HideActions] ?? []),\n        ];\n\n        if (dataSources && dataSources.length) {\n            queryParams[Param.DataSources] = JSON.stringify(dataSources);\n        }\n        if (searchOptions?.searchTokenString) {\n            queryParams[Param.searchTokenString] = encodeURIComponent(\n                searchOptions.searchTokenString,\n            );\n\n            if (searchOptions.executeSearch) {\n                queryParams[Param.executeSearch] = true;\n            }\n        }\n\n        queryParams[Param.UseLastSelectedDataSource] = false;\n        queryParams[Param.searchEmbed] = true;\n        let query = '';\n        const queryParamsString = getQueryParamString(queryParams, true);\n        if (queryParamsString) {\n            query = `?${queryParamsString}`;\n        }\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n\n        return `${this.getEmbedBasePath(query)}/${path}${tsPostHashParams}`;\n    }\n\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n    public render(): SearchBarEmbed {\n        super.render();\n        const { dataSources } = this.viewConfig;\n\n        const src = this.getIFrameSrc(dataSources);\n        this.renderIFrame(src, this.viewConfig.frameParams);\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}