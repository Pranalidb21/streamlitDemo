{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { TsEmbed } from './ts-embed';\n/**\n * Embed ThoughtSpot search bar\n *\n * @Category Search Embed\n * @version: SDK: 1.17.0 | ThoughtSpot 8.10.0.cl, 9.0.1-sw\n */\nexport var SearchBarEmbed = /*#__PURE__*/function (_TsEmbed) {\n  _inherits(SearchBarEmbed, _TsEmbed);\n  var _super = _createSuper(SearchBarEmbed);\n  function SearchBarEmbed(domSelector, viewConfig) {\n    var _this;\n    _classCallCheck(this, SearchBarEmbed);\n    _this = _super.call(this, domSelector);\n    _this.viewConfig = viewConfig;\n    return _this;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot search to be\n   * loaded in the iframe\n   * @param dataSources A list of data source GUIDs\n   */\n  _createClass(SearchBarEmbed, [{\n    key: \"getIFrameSrc\",\n    value: function getIFrameSrc(dataSources) {\n      var _a;\n      var searchOptions = this.viewConfig.searchOptions;\n      var path = 'search-bar-embed';\n      var queryParams = this.getBaseQueryParams();\n      queryParams[Param.HideActions] = _toConsumableArray((_a = queryParams[Param.HideActions]) !== null && _a !== void 0 ? _a : []);\n      if (dataSources && dataSources.length) {\n        queryParams[Param.DataSources] = JSON.stringify(dataSources);\n      }\n      if (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchTokenString) {\n        queryParams[Param.searchTokenString] = encodeURIComponent(searchOptions.searchTokenString);\n        if (searchOptions.executeSearch) {\n          queryParams[Param.executeSearch] = true;\n        }\n      }\n      queryParams[Param.UseLastSelectedDataSource] = false;\n      queryParams[Param.searchEmbed] = true;\n      var query = '';\n      var queryParamsString = getQueryParamString(queryParams, true);\n      if (queryParamsString) {\n        query = \"?\".concat(queryParamsString);\n      }\n      var tsPostHashParams = this.getThoughtSpotPostUrlParams();\n      return \"\".concat(this.getEmbedBasePath(query), \"/\").concat(path).concat(tsPostHashParams);\n    }\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(SearchBarEmbed.prototype), \"render\", this).call(this);\n      var dataSources = this.viewConfig.dataSources;\n      var src = this.getIFrameSrc(dataSources);\n      this.renderIFrame(src, this.viewConfig.frameParams);\n      return this;\n    }\n  }]);\n  return SearchBarEmbed;\n}(TsEmbed);","map":{"version":3,"mappings":";;;;;;;AAAA,SAAsBA,KAAK,QAA4B,UAAU;AACjE,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,OAAO,QAAQ,YAAY;AAkBpC;;;;;;AAMA,WAAaC,cAAe;EAAA;EAAA;EAMxB,wBAAYC,WAAmB,EAAEC,UAA+B;IAAA;IAAA;IAC5D,0BAAMD,WAAW;IACjB,MAAKC,UAAU,GAAGA,UAAU;IAAC;EACjC;EAEA;;;;;EAAA;IAAA;IAAA,OAKQ,sBAAaC,WAAsB;;MACvC,IAAQC,aAAa,GAAK,IAAI,CAACF,UAAU,CAAjCE,aAAa;MACrB,IAAMC,IAAI,GAAG,kBAAkB;MAC/B,IAAMC,WAAW,GAAG,IAAI,CAACC,kBAAkB,EAAE;MAE7CD,WAAW,CAACT,KAAK,CAACW,WAAW,CAAC,sBACtB,iBAAW,CAACX,KAAK,CAACW,WAAW,CAAC,mCAAI,EAAE,CAC3C;MAED,IAAIL,WAAW,IAAIA,WAAW,CAACM,MAAM,EAAE;QACnCH,WAAW,CAACT,KAAK,CAACa,WAAW,CAAC,GAAGC,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC;;MAEhE,IAAIC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,iBAAiB,EAAE;QAClCP,WAAW,CAACT,KAAK,CAACgB,iBAAiB,CAAC,GAAGC,kBAAkB,CACrDV,aAAa,CAACS,iBAAiB,CAClC;QAED,IAAIT,aAAa,CAACW,aAAa,EAAE;UAC7BT,WAAW,CAACT,KAAK,CAACkB,aAAa,CAAC,GAAG,IAAI;;;MAI/CT,WAAW,CAACT,KAAK,CAACmB,yBAAyB,CAAC,GAAG,KAAK;MACpDV,WAAW,CAACT,KAAK,CAACoB,WAAW,CAAC,GAAG,IAAI;MACrC,IAAIC,KAAK,GAAG,EAAE;MACd,IAAMC,iBAAiB,GAAGrB,mBAAmB,CAACQ,WAAW,EAAE,IAAI,CAAC;MAChE,IAAIa,iBAAiB,EAAE;QACnBD,KAAK,cAAOC,iBAAiB,CAAE;;MAEnC,IAAMC,gBAAgB,GAAG,IAAI,CAACC,2BAA2B,EAAE;MAE3D,iBAAU,IAAI,CAACC,gBAAgB,CAACJ,KAAK,CAAC,cAAIb,IAAI,SAAGe,gBAAgB;IACrE;IAEA;;;EAAA;IAAA;IAAA,OAGO,kBAAM;MACT;MACA,IAAQjB,WAAW,GAAK,IAAI,CAACD,UAAU,CAA/BC,WAAW;MAEnB,IAAMoB,GAAG,GAAG,IAAI,CAACC,YAAY,CAACrB,WAAW,CAAC;MAC1C,IAAI,CAACsB,YAAY,CAACF,GAAG,EAAE,IAAI,CAACrB,UAAU,CAACwB,WAAW,CAAC;MACnD,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EA5D+B3B,OAAO","names":["Param","getQueryParamString","TsEmbed","SearchBarEmbed","domSelector","viewConfig","dataSources","searchOptions","path","queryParams","getBaseQueryParams","HideActions","length","DataSources","JSON","stringify","searchTokenString","encodeURIComponent","executeSearch","UseLastSelectedDataSource","searchEmbed","query","queryParamsString","tsPostHashParams","getThoughtSpotPostUrlParams","getEmbedBasePath","src","getIFrameSrc","renderIFrame","frameParams"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\search-bar.tsx"],"sourcesContent":["import { DOMSelector, Param, Action, ViewConfig } from '../types';\nimport { getQueryParamString } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { SearchOptions } from './search';\n\nexport interface SearchBarViewConfig extends ViewConfig {\n    /**\n     * If set to true, hides the data sources panel.\n     */\n    hideDataSources?: boolean;\n    /**\n     * The array of data source GUIDs to set on load.\n     */\n    dataSources?: string[];\n    /**\n     * Configuration for search options\n     */\n    searchOptions?: SearchOptions;\n}\n\n/**\n * Embed ThoughtSpot search bar\n *\n * @Category Search Embed\n * @version: SDK: 1.17.0 | ThoughtSpot 8.10.0.cl, 9.0.1-sw\n */\nexport class SearchBarEmbed extends TsEmbed {\n    /**\n     * The view configuration for the embedded ThoughtSpot search bar.\n     */\n    protected viewConfig: SearchBarViewConfig;\n\n    constructor(domSelector: string, viewConfig: SearchBarViewConfig) {\n        super(domSelector);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param dataSources A list of data source GUIDs\n     */\n    private getIFrameSrc(dataSources?: string[]) {\n        const { searchOptions } = this.viewConfig;\n        const path = 'search-bar-embed';\n        const queryParams = this.getBaseQueryParams();\n\n        queryParams[Param.HideActions] = [\n            ...(queryParams[Param.HideActions] ?? []),\n        ];\n\n        if (dataSources && dataSources.length) {\n            queryParams[Param.DataSources] = JSON.stringify(dataSources);\n        }\n        if (searchOptions?.searchTokenString) {\n            queryParams[Param.searchTokenString] = encodeURIComponent(\n                searchOptions.searchTokenString,\n            );\n\n            if (searchOptions.executeSearch) {\n                queryParams[Param.executeSearch] = true;\n            }\n        }\n\n        queryParams[Param.UseLastSelectedDataSource] = false;\n        queryParams[Param.searchEmbed] = true;\n        let query = '';\n        const queryParamsString = getQueryParamString(queryParams, true);\n        if (queryParamsString) {\n            query = `?${queryParamsString}`;\n        }\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n\n        return `${this.getEmbedBasePath(query)}/${path}${tsPostHashParams}`;\n    }\n\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n    public render(): SearchBarEmbed {\n        super.render();\n        const { dataSources } = this.viewConfig;\n\n        const src = this.getIFrameSrc(dataSources);\n        this.renderIFrame(src, this.viewConfig.frameParams);\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}