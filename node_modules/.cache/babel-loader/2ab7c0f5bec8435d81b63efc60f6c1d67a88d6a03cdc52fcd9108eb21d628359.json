{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as mixpanel from 'mixpanel-browser';\nexport var EndPoints = {\n  CONFIG: '/callosum/v1/system/config'\n};\nexport var MIXPANEL_EVENT = {\n  VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n  VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n  VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n  VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n  VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n  VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance'\n};\nvar isEventCollectorOn = false;\nvar eventCollectorQueue = [];\nfunction setEventCollectorOn() {\n  isEventCollectorOn = true;\n}\nfunction getEventCollectorOnValue() {\n  return isEventCollectorOn;\n}\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\nexport function uploadMixpanelEvent(_x) {\n  return _uploadMixpanelEvent.apply(this, arguments);\n}\nfunction _uploadMixpanelEvent() {\n  _uploadMixpanelEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(eventId) {\n    var eventProps,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          eventProps = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          if (getEventCollectorOnValue()) {\n            _context.next = 4;\n            break;\n          }\n          eventCollectorQueue.push({\n            eventId: eventId,\n            eventProps: eventProps\n          });\n          return _context.abrupt(\"return\", Promise.resolve());\n        case 4:\n          return _context.abrupt(\"return\", new Promise(function () {\n            return mixpanel.track(eventId, eventProps);\n          }));\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _uploadMixpanelEvent.apply(this, arguments);\n}\nfunction emptyQueue() {\n  eventCollectorQueue.forEach(function (event) {\n    uploadMixpanelEvent(event.eventId, event.eventProps);\n  });\n}\nexport function initMixpanel(sessionInfo) {\n  if (!sessionInfo || !sessionInfo.mixpanelToken) {\n    return;\n  }\n  // On a public cluster the user is anonymous, so don't set the identify to userGUID\n  var isPublicCluster = !!sessionInfo.isPublicUser;\n  var token = sessionInfo.mixpanelToken;\n  if (token) {\n    mixpanel.init(token);\n    if (!isPublicCluster) {\n      mixpanel.identify(sessionInfo.userGUID);\n    }\n    setEventCollectorOn();\n    emptyQueue();\n  }\n}","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,QAAQ,MAAM,kBAAkB;AAE5C,OAAO,IAAMC,SAAS,GAAG;EACrBC,MAAM,EAAE;CACX;AAED,OAAO,IAAMC,cAAc,GAAG;EAC1BC,uBAAuB,EAAE,yBAAyB;EAClDC,sBAAsB,EAAE,wBAAwB;EAChDC,0BAA0B,EAAE,4BAA4B;EACxDC,wBAAwB,EAAE,0BAA0B;EACpDC,kBAAkB,EAAE,oBAAoB;EACxCC,kCAAkC,EAAE;CACvC;AAED,IAAIC,kBAAkB,GAAG,KAAK;AAC9B,IAAMC,mBAAmB,GAA2C,EAAE;AAEtE,SAASC,mBAAmB;EACxBF,kBAAkB,GAAG,IAAI;AAC7B;AAEA,SAASG,wBAAwB;EAC7B,OAAOH,kBAAkB;AAC7B;AAEA;;;;;AAKA,gBAAsBI,mBAAmB;EAAA;AAAA;AASxC;EAAA,kFATM,iBACHC,OAAe;IAAA;MAAA;IAAA;MAAA;QAAA;UACfC,UAAU,2DAAG,EAAE;UAAA,IAEVH,wBAAwB,EAAE;YAAA;YAAA;UAAA;UAC3BF,mBAAmB,CAACM,IAAI,CAAC;YAAEF,OAAO,EAAPA,OAAO;YAAEC,UAAU,EAAVA;UAAU,CAAE,CAAC;UAAC,iCAC3CE,OAAO,CAACC,OAAO,EAAE;QAAA;UAAA,iCAErB,IAAID,OAAO,CAAC;YAAA,OAAMlB,QAAQ,CAACoB,KAAK,CAACL,OAAO,EAAEC,UAAU,CAAC;UAAA,EAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAChE;EAAA;AAAA;AAED,SAASK,UAAU;EACfV,mBAAmB,CAACW,OAAO,CAAC,UAACC,KAAK,EAAI;IAClCT,mBAAmB,CAACS,KAAK,CAACR,OAAO,EAAEQ,KAAK,CAACP,UAAU,CAAC;EACxD,CAAC,CAAC;AACN;AAEA,OAAM,SAAUQ,YAAY,CAACC,WAAgB;EACzC,IAAI,CAACA,WAAW,IAAI,CAACA,WAAW,CAACC,aAAa,EAAE;IAC5C;;EAEJ;EACA,IAAMC,eAAe,GAAG,CAAC,CAACF,WAAW,CAACG,YAAY;EAClD,IAAMC,KAAK,GAAGJ,WAAW,CAACC,aAAa;EACvC,IAAIG,KAAK,EAAE;IACP7B,QAAQ,CAAC8B,IAAI,CAACD,KAAK,CAAC;IACpB,IAAI,CAACF,eAAe,EAAE;MAClB3B,QAAQ,CAAC+B,QAAQ,CAACN,WAAW,CAACO,QAAQ,CAAC;;IAE3CpB,mBAAmB,EAAE;IACrBS,UAAU,EAAE;;AAEpB","names":["mixpanel","EndPoints","CONFIG","MIXPANEL_EVENT","VISUAL_SDK_RENDER_START","VISUAL_SDK_CALLED_INIT","VISUAL_SDK_RENDER_COMPLETE","VISUAL_SDK_RENDER_FAILED","VISUAL_SDK_TRIGGER","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","isEventCollectorOn","eventCollectorQueue","setEventCollectorOn","getEventCollectorOnValue","uploadMixpanelEvent","eventId","eventProps","push","Promise","resolve","track","emptyQueue","forEach","event","initMixpanel","sessionInfo","mixpanelToken","isPublicCluster","isPublicUser","token","init","identify","userGUID"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\mixpanel-service.ts"],"sourcesContent":["import * as mixpanel from 'mixpanel-browser';\n\nexport const EndPoints = {\n    CONFIG: '/callosum/v1/system/config',\n};\n\nexport const MIXPANEL_EVENT = {\n    VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n    VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n    VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n    VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n    VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n    VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance',\n};\n\nlet isEventCollectorOn = false;\nconst eventCollectorQueue: { eventId: string; eventProps: any }[] = [];\n\nfunction setEventCollectorOn() {\n    isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n    return isEventCollectorOn;\n}\n\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\nexport async function uploadMixpanelEvent(\n    eventId: string,\n    eventProps = {},\n): Promise<any> {\n    if (!getEventCollectorOnValue()) {\n        eventCollectorQueue.push({ eventId, eventProps });\n        return Promise.resolve();\n    }\n    return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n    eventCollectorQueue.forEach((event) => {\n        uploadMixpanelEvent(event.eventId, event.eventProps);\n    });\n}\n\nexport function initMixpanel(sessionInfo: any): void {\n    if (!sessionInfo || !sessionInfo.mixpanelToken) {\n        return;\n    }\n    // On a public cluster the user is anonymous, so don't set the identify to userGUID\n    const isPublicCluster = !!sessionInfo.isPublicUser;\n    const token = sessionInfo.mixpanelToken;\n    if (token) {\n        mixpanel.init(token);\n        if (!isPublicCluster) {\n            mixpanel.identify(sessionInfo.userGUID);\n        }\n        setEventCollectorOn();\n        emptyQueue();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}