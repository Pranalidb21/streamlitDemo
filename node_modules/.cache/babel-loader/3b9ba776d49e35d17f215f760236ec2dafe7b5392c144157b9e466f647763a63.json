{"ast":null,"code":"// eslint-disable-next-line import/no-cycle\nimport { EndPoints } from '../auth';\nfunction failureLoggedFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, options).then(async r => {\n    var _a;\n    if (!r.ok && r.type !== 'opaqueredirect' && r.type !== 'opaque') {\n      console.error('Failure', await ((_a = r.text) === null || _a === void 0 ? void 0 : _a.call(r)));\n    }\n    return r;\n  });\n}\nexport function fetchSessionInfoService(authVerificationUrl) {\n  return failureLoggedFetch(authVerificationUrl, {\n    credentials: 'include'\n  });\n}\nexport async function fetchAuthTokenService(authEndpoint) {\n  return fetch(authEndpoint);\n}\nexport async function fetchAuthService(thoughtSpotHost, username, authToken) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}?username=${username}&auth_token=${authToken}`, {\n    credentials: 'include',\n    // We do not want to follow the redirect, as it starts giving a CORS error\n    redirect: 'manual'\n  });\n}\nexport async function fetchAuthPostService(thoughtSpotHost, username, authToken) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded',\n      'x-requested-by': 'ThoughtSpot'\n    },\n    body: `username=${encodeURIComponent(username)}&auth_token=${encodeURIComponent(authToken)}`,\n    credentials: 'include',\n    // We do not want to follow the redirect, as it starts giving a CORS error\n    redirect: 'manual'\n  });\n}\nexport async function fetchBasicAuthService(thoughtSpotHost, username, password) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.BASIC_LOGIN}`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded',\n      'x-requested-by': 'ThoughtSpot'\n    },\n    body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`,\n    credentials: 'include'\n  });\n}\nexport async function fetchLogoutService(thoughtSpotHost) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.LOGOUT}`, {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'x-requested-by': 'ThoughtSpot'\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,SAAS;AAEnC,SAASC,kBAAkB,CACvBC,GAAW,EACc;EAAA,IAAzBC,8EAAuB,EAAE;EAEzB,OAAOC,KAAK,CAACF,GAAG,EAAEC,OAAO,CAAC,CAACE,IAAI,CAAC,MAAOC,CAAC,IAAI;;IACxC,IAAI,CAACA,CAAC,CAACC,EAAE,IAAID,CAAC,CAACE,IAAI,KAAK,gBAAgB,IAAIF,CAAC,CAACE,IAAI,KAAK,QAAQ,EAAE;MAC7DC,OAAO,CAACC,KAAK,CAAC,SAAS,EAAE,OAAM,OAAC,CAACC,IAAI,iDAAI,EAAC;;IAE9C,OAAOL,CAAC;EACZ,CAAC,CAAC;AACN;AAEA,OAAM,SAAUM,uBAAuB,CACnCC,mBAA2B;EAE3B,OAAOZ,kBAAkB,CAACY,mBAAmB,EAAE;IAC3CC,WAAW,EAAE;GAChB,CAAC;AACN;AAEA,OAAO,eAAeC,qBAAqB,CACvCC,YAAoB;EAEpB,OAAOZ,KAAK,CAACY,YAAY,CAAC;AAC9B;AAEA,OAAO,eAAeC,gBAAgB,CAClCC,eAAuB,EACvBC,QAAgB,EAChBC,SAAiB;EAEjB,OAAOnB,kBAAkB,CACrB,GAAGiB,eAAe,GAAGlB,SAAS,CAACqB,WAAW,aAAaF,QAAQ,eAAeC,SAAS,EAAE,EACzF;IACIN,WAAW,EAAE,SAAS;IACtB;IACAQ,QAAQ,EAAE;GACb,CACJ;AACL;AAEA,OAAO,eAAeC,oBAAoB,CACtCL,eAAuB,EACvBC,QAAgB,EAChBC,SAAiB;EAEjB,OAAOnB,kBAAkB,CAAC,GAAGiB,eAAe,GAAGlB,SAAS,CAACqB,WAAW,EAAE,EAAE;IACpEG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,mCAAmC;MACnD,gBAAgB,EAAE;KACrB;IACDC,IAAI,EAAE,YAAYC,kBAAkB,CAChCR,QAAQ,CACX,eAAeQ,kBAAkB,CAACP,SAAS,CAAC,EAAE;IAC/CN,WAAW,EAAE,SAAS;IACtB;IACAQ,QAAQ,EAAE;GACb,CAAC;AACN;AAEA,OAAO,eAAeM,qBAAqB,CACvCV,eAAuB,EACvBC,QAAgB,EAChBU,QAAgB;EAEhB,OAAO5B,kBAAkB,CAAC,GAAGiB,eAAe,GAAGlB,SAAS,CAAC8B,WAAW,EAAE,EAAE;IACpEN,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,mCAAmC;MACnD,gBAAgB,EAAE;KACrB;IACDC,IAAI,EAAE,YAAYC,kBAAkB,CAChCR,QAAQ,CACX,aAAaQ,kBAAkB,CAACE,QAAQ,CAAC,EAAE;IAC5Cf,WAAW,EAAE;GAChB,CAAC;AACN;AAEA,OAAO,eAAeiB,kBAAkB,CACpCb,eAAuB;EAEvB,OAAOjB,kBAAkB,CAAC,GAAGiB,eAAe,GAAGlB,SAAS,CAACgC,MAAM,EAAE,EAAE;IAC/DlB,WAAW,EAAE,SAAS;IACtBU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,gBAAgB,EAAE;;GAEzB,CAAC;AACN","names":["EndPoints","failureLoggedFetch","url","options","fetch","then","r","ok","type","console","error","text","fetchSessionInfoService","authVerificationUrl","credentials","fetchAuthTokenService","authEndpoint","fetchAuthService","thoughtSpotHost","username","authToken","TOKEN_LOGIN","redirect","fetchAuthPostService","method","headers","body","encodeURIComponent","fetchBasicAuthService","password","BASIC_LOGIN","fetchLogoutService","LOGOUT"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\authService.ts"],"sourcesContent":["// eslint-disable-next-line import/no-cycle\nimport { EndPoints } from '../auth';\n\nfunction failureLoggedFetch(\n    url: string,\n    options: RequestInit = {},\n): Promise<Response> {\n    return fetch(url, options).then(async (r) => {\n        if (!r.ok && r.type !== 'opaqueredirect' && r.type !== 'opaque') {\n            console.error('Failure', await r.text?.());\n        }\n        return r;\n    });\n}\n\nexport function fetchSessionInfoService(\n    authVerificationUrl: string,\n): Promise<any> {\n    return failureLoggedFetch(authVerificationUrl, {\n        credentials: 'include',\n    });\n}\n\nexport async function fetchAuthTokenService(\n    authEndpoint: string,\n): Promise<any> {\n    return fetch(authEndpoint);\n}\n\nexport async function fetchAuthService(\n    thoughtSpotHost: string,\n    username: string,\n    authToken: string,\n): Promise<any> {\n    return failureLoggedFetch(\n        `${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}?username=${username}&auth_token=${authToken}`,\n        {\n            credentials: 'include',\n            // We do not want to follow the redirect, as it starts giving a CORS error\n            redirect: 'manual',\n        },\n    );\n}\n\nexport async function fetchAuthPostService(\n    thoughtSpotHost: string,\n    username: string,\n    authToken: string,\n): Promise<any> {\n    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}`, {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'x-requested-by': 'ThoughtSpot',\n        },\n        body: `username=${encodeURIComponent(\n            username,\n        )}&auth_token=${encodeURIComponent(authToken)}`,\n        credentials: 'include',\n        // We do not want to follow the redirect, as it starts giving a CORS error\n        redirect: 'manual',\n    });\n}\n\nexport async function fetchBasicAuthService(\n    thoughtSpotHost: string,\n    username: string,\n    password: string,\n): Promise<any> {\n    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.BASIC_LOGIN}`, {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'x-requested-by': 'ThoughtSpot',\n        },\n        body: `username=${encodeURIComponent(\n            username,\n        )}&password=${encodeURIComponent(password)}`,\n        credentials: 'include',\n    });\n}\n\nexport async function fetchLogoutService(\n    thoughtSpotHost: string,\n): Promise<any> {\n    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.LOGOUT}`, {\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n            'x-requested-by': 'ThoughtSpot',\n        },\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}