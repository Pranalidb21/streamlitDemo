{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param, HostEvent } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport var Page;\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Liveboards listing page\n   */\n  Page[\"Liveboards\"] = \"liveboards\";\n  /**\n   * @hidden\n   */\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n  Page[\"Data\"] = \"data\";\n  /**\n   * SpotIQ listing page\n   */\n  Page[\"SpotIQ\"] = \"spotiq\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport class AppEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      tag,\n      hideObjects,\n      liveboardV2\n    } = this.viewConfig;\n    if (tag) {\n      params[Param.Tag] = tag;\n    }\n    if (hideObjects && hideObjects.length) {\n      params[Param.HideObjects] = JSON.stringify(hideObjects);\n    }\n    if (liveboardV2 !== undefined) {\n      params[Param.LiveboardV2Enabled] = liveboardV2;\n    }\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Constructs the URL of the ThoughtSpot app page to be rendered.\n   * @param pageId The ID of the page to be embedded.\n   */\n  getIFrameSrc(pageId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true, this.viewConfig.enableSearchAssist)}/${pageId}`;\n    const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n    url = `${url}${tsPostHashParams}`;\n    return url;\n  }\n  /**\n   * Gets the ThoughtSpot route of the page for a particular page ID.\n   * @param pageId The identifier for a page in the ThoughtSpot app.\n   */\n  getPageRoute(pageId) {\n    switch (pageId) {\n      case Page.Search:\n        return 'answer';\n      case Page.Answers:\n        return 'answers';\n      case Page.Liveboards:\n        return 'pinboards';\n      case Page.Pinboards:\n        return 'pinboards';\n      case Page.Data:\n        return 'data/tables';\n      case Page.SpotIQ:\n        return 'insights/results';\n      case Page.Home:\n      default:\n        return 'home';\n    }\n  }\n  /**\n   * Formats the path provided by the user.\n   * @param path The URL path.\n   * @returns The URL path that the embedded app understands.\n   */\n  formatPath(path) {\n    if (!path) {\n      return null;\n    }\n    // remove leading slash\n    if (path.indexOf('/') === 0) {\n      return path.substring(1);\n    }\n    return path;\n  }\n  /**\n   * Navigate to particular page for app embed. eg:answers/pinboards/home\n   * This is used for embedding answers, pinboards, visualizations and full application only.\n   * @param path string | number The string, set to iframe src and navigate to new page\n   * eg: appEmbed.navigateToPage('pinboards')\n   * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n   * @param noReload boolean Trigger the navigation without reloading the page\n   * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n   */\n  navigateToPage(path) {\n    let noReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!this.iFrame) {\n      console.log('Please call render before invoking this method');\n      return;\n    }\n    if (noReload) {\n      this.trigger(HostEvent.Navigate, path);\n    } else {\n      if (typeof path !== 'string') {\n        console.warn('Path can only by a string when triggered without noReload');\n        return;\n      }\n      const iframeSrc = this.iFrame.src;\n      const embedPath = '#/embed';\n      const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n      this.iFrame.src = `${iframeSrc.split(currentPath)[0]}${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n    }\n  }\n  /**\n   * Renders the embedded application pages in the ThoughtSpot app.\n   * @param renderOptions An object containing the page ID\n   * to be embedded.\n   */\n  render() {\n    super.render();\n    const {\n      pageId,\n      runtimeFilters,\n      path\n    } = this.viewConfig;\n    const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n    const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["getFilterQuery","getQueryParamString","Param","HostEvent","V1Embed","Page","AppEmbed","constructor","domSelector","viewConfig","getEmbedParams","params","getBaseQueryParams","tag","hideObjects","liveboardV2","Tag","length","HideObjects","JSON","stringify","undefined","LiveboardV2Enabled","queryParams","getIFrameSrc","pageId","runtimeFilters","filterQuery","queryString","filter","Boolean","join","url","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","enableSearchAssist","tsPostHashParams","getThoughtSpotPostUrlParams","getPageRoute","Search","Answers","Liveboards","Pinboards","Data","SpotIQ","Home","formatPath","path","indexOf","substring","navigateToPage","noReload","iFrame","console","log","trigger","Navigate","warn","iframeSrc","src","embedPath","currentPath","includes","split","replace","render","pageRoute","renderV1Embed"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\app.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport {\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n    ViewConfig,\n} from '../types';\nimport { V1Embed } from './ts-embed';\n\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport enum Page {\n    /**\n     * Home page\n     */\n    Home = 'home',\n    /**\n     * Search page\n     */\n    Search = 'search',\n    /**\n     * Saved answers listing page\n     */\n    Answers = 'answers',\n    /**\n     * Liveboards listing page\n     */\n    Liveboards = 'liveboards',\n    /**\n     * @hidden\n     */\n    Pinboards = 'pinboards',\n    /**\n     * Data management page\n     */\n    Data = 'data',\n    /**\n     * SpotIQ listing page\n     */\n    SpotIQ = 'spotiq',\n}\n\n/**\n * The view configuration for full app embedding.\n * @Category App Embed\n */\nexport interface AppViewConfig extends ViewConfig {\n    /**\n     * If true, the main navigation bar within the ThoughtSpot app\n     * is displayed. By default, the navigation bar is hidden.\n     */\n    showPrimaryNavbar?: boolean;\n    /**\n     * If true, help and profile buttons will hide on NavBar. By default,\n     * they are shown.\n     */\n    disableProfileAndHelp?: boolean;\n    /**\n     * A URL path within the app that is to be embedded.\n     * If both path and pageId attributes are defined, the path definition\n     * takes precedence.\n     */\n    path?: string;\n    /**\n     * The application page to set as the start page\n     * in the embedded view.\n     */\n    pageId?: Page;\n    /**\n     * This puts a filter tag on the application. All metadata lists in the application, such as\n     * Liveboards and answers, would be filtered by this tag.\n     */\n    tag?: string;\n    /**\n     * The array of GUIDs to be hidden\n     */\n    hideObjects?: string[];\n    /**\n     * Render liveboards using the new v2 rendering mode\n     * This is a transient flag which is primarily meant for internal use\n     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw\n     * @hidden\n     */\n    liveboardV2?: boolean;\n    /**\n     * If set to true, the Search Assist feature is enabled.\n     * @version SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw\n     */\n    enableSearchAssist?: boolean;\n}\n\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport class AppEmbed extends V1Embed {\n    protected viewConfig: AppViewConfig;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: AppViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Constructs a map of parameters to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const { tag, hideObjects, liveboardV2 } = this.viewConfig;\n\n        if (tag) {\n            params[Param.Tag] = tag;\n        }\n        if (hideObjects && hideObjects.length) {\n            params[Param.HideObjects] = JSON.stringify(hideObjects);\n        }\n        if (liveboardV2 !== undefined) {\n            params[Param.LiveboardV2Enabled] = liveboardV2;\n        }\n\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n    private getIFrameSrc(pageId: string, runtimeFilters: RuntimeFilter[]) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            this.viewConfig.showPrimaryNavbar,\n            this.viewConfig.disableProfileAndHelp,\n            true,\n            this.viewConfig.enableSearchAssist,\n        )}/${pageId}`;\n\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n        url = `${url}${tsPostHashParams}`;\n\n        return url;\n    }\n\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n    private getPageRoute(pageId: Page) {\n        switch (pageId) {\n            case Page.Search:\n                return 'answer';\n            case Page.Answers:\n                return 'answers';\n            case Page.Liveboards:\n                return 'pinboards';\n            case Page.Pinboards:\n                return 'pinboards';\n            case Page.Data:\n                return 'data/tables';\n            case Page.SpotIQ:\n                return 'insights/results';\n            case Page.Home:\n            default:\n                return 'home';\n        }\n    }\n\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n    private formatPath(path: string) {\n        if (!path) {\n            return null;\n        }\n\n        // remove leading slash\n        if (path.indexOf('/') === 0) {\n            return path.substring(1);\n        }\n\n        return path;\n    }\n\n    /**\n     * Navigate to particular page for app embed. eg:answers/pinboards/home\n     * This is used for embedding answers, pinboards, visualizations and full application only.\n     * @param path string | number The string, set to iframe src and navigate to new page\n     * eg: appEmbed.navigateToPage('pinboards')\n     * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n     * @param noReload boolean Trigger the navigation without reloading the page\n     * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n    public navigateToPage(path: string | number, noReload = false): void {\n        if (!this.iFrame) {\n            console.log('Please call render before invoking this method');\n            return;\n        }\n        if (noReload) {\n            this.trigger(HostEvent.Navigate, path);\n        } else {\n            if (typeof path !== 'string') {\n                console.warn(\n                    'Path can only by a string when triggered without noReload',\n                );\n                return;\n            }\n            const iframeSrc = this.iFrame.src;\n            const embedPath = '#/embed';\n            const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n            this.iFrame.src = `${\n                iframeSrc.split(currentPath)[0]\n            }${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n        }\n    }\n\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n    public render(): AppEmbed {\n        super.render();\n\n        const { pageId, runtimeFilters, path } = this.viewConfig;\n        const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n        const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}