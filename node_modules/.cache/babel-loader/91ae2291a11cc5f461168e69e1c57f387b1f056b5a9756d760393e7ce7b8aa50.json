{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { DataSourceVisualMode, Param, Action } from '../types';\nimport { getQueryParamString, checkReleaseVersionInBeta } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { ERROR_MESSAGE } from '../errors';\nimport { getAuthPromise, getEmbedConfig } from './base';\nimport { getReleaseVersion } from '../auth';\nexport var HiddenActionItemByDefaultForSearchEmbed = [Action.EditACopy, Action.SaveAsView, Action.UpdateTML, Action.EditTML, Action.AnswerDelete];\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\nexport var SearchEmbed = /*#__PURE__*/function (_TsEmbed) {\n  _inherits(SearchEmbed, _TsEmbed);\n  var _super = _createSuper(SearchEmbed);\n  function SearchEmbed(domSelector, viewConfig) {\n    var _this;\n    _classCallCheck(this, SearchEmbed);\n    _this = _super.call(this, domSelector);\n    _this.viewConfig = viewConfig;\n    return _this;\n  }\n  /**\n   * Get the state of the data sources panel that the embedded\n   * ThoughtSpot search will be initialized with.\n   */\n  _createClass(SearchEmbed, [{\n    key: \"getDataSourceMode\",\n    value: function getDataSourceMode() {\n      var dataSourceMode = DataSourceVisualMode.Expanded;\n      if (this.viewConfig.collapseDataSources === true) {\n        dataSourceMode = DataSourceVisualMode.Collapsed;\n      }\n      if (this.viewConfig.hideDataSources === true) {\n        dataSourceMode = DataSourceVisualMode.Hidden;\n      }\n      return dataSourceMode;\n    }\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param answerId The GUID of a saved answer\n     * @param dataSources A list of data source GUIDs\n     */\n  }, {\n    key: \"getIFrameSrc\",\n    value: function getIFrameSrc(answerId, dataSources) {\n      var _a;\n      var _this$viewConfig = this.viewConfig,\n        hideResults = _this$viewConfig.hideResults,\n        expandAllDataSource = _this$viewConfig.expandAllDataSource,\n        enableSearchAssist = _this$viewConfig.enableSearchAssist,\n        forceTable = _this$viewConfig.forceTable,\n        searchOptions = _this$viewConfig.searchOptions;\n      var answerPath = answerId ? \"saved-answer/\".concat(answerId) : 'answer';\n      var queryParams = this.getBaseQueryParams();\n      queryParams[Param.HideActions] = [].concat(_toConsumableArray((_a = queryParams[Param.HideActions]) !== null && _a !== void 0 ? _a : []), HiddenActionItemByDefaultForSearchEmbed);\n      if (dataSources && dataSources.length) {\n        queryParams[Param.DataSources] = JSON.stringify(dataSources);\n      }\n      if (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchTokenString) {\n        queryParams[Param.searchTokenString] = encodeURIComponent(searchOptions.searchTokenString);\n        if (searchOptions.executeSearch) {\n          queryParams[Param.executeSearch] = true;\n        }\n      }\n      if (enableSearchAssist) {\n        queryParams[Param.EnableSearchAssist] = true;\n      }\n      if (hideResults) {\n        queryParams[Param.HideResult] = true;\n      }\n      if (forceTable) {\n        queryParams[Param.ForceTable] = true;\n      }\n      queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n      queryParams[Param.UseLastSelectedDataSource] = false;\n      queryParams[Param.searchEmbed] = true;\n      var query = '';\n      var queryParamsString = getQueryParamString(queryParams, true);\n      if (queryParamsString) {\n        query = \"?\".concat(queryParamsString);\n      }\n      var tsPostHashParams = this.getThoughtSpotPostUrlParams();\n      return \"\".concat(this.getEmbedBasePath(query), \"/\").concat(answerPath).concat(tsPostHashParams);\n    }\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(SearchEmbed.prototype), \"render\", this).call(this);\n      var _this$viewConfig2 = this.viewConfig,\n        answerId = _this$viewConfig2.answerId,\n        dataSources = _this$viewConfig2.dataSources;\n      var src = this.getIFrameSrc(answerId, dataSources);\n      this.renderIFrame(src, this.viewConfig.frameParams);\n      getAuthPromise().then(function () {\n        if (checkReleaseVersionInBeta(getReleaseVersion(), getEmbedConfig().suppressSearchEmbedBetaWarning)) {\n          alert(ERROR_MESSAGE.SEARCHEMBED_BETA_WRANING_MESSAGE);\n        }\n      });\n      return this;\n    }\n  }]);\n  return SearchEmbed;\n}(TsEmbed);","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;AASA,SACIA,oBAAoB,EAEpBC,KAAK,EACLC,MAAM,QAEH,UAAU;AACjB,SAASC,mBAAmB,EAAEC,yBAAyB,QAAQ,UAAU;AACzE,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,aAAa,QAAQ,WAAW;AACzC,SAASC,cAAc,EAAEC,cAAc,QAAQ,QAAQ;AACvD,SAASC,iBAAiB,QAAQ,SAAS;AAwE3C,OAAO,IAAMC,uCAAuC,GAAG,CACnDR,MAAM,CAACS,SAAS,EAChBT,MAAM,CAACU,UAAU,EACjBV,MAAM,CAACW,SAAS,EAChBX,MAAM,CAACY,OAAO,EACdZ,MAAM,CAACa,YAAY,CACtB;AAED;;;;;AAKA,WAAaC,WAAY;EAAA;EAAA;EAMrB,qBAAYC,WAAwB,EAAEC,UAA4B;IAAA;IAAA;IAC9D,0BAAMD,WAAW;IACjB,MAAKC,UAAU,GAAGA,UAAU;IAAC;EACjC;EAEA;;;;EAAA;IAAA;IAAA,OAIQ,6BAAiB;MACrB,IAAIC,cAAc,GAAGnB,oBAAoB,CAACoB,QAAQ;MAClD,IAAI,IAAI,CAACF,UAAU,CAACG,mBAAmB,KAAK,IAAI,EAAE;QAC9CF,cAAc,GAAGnB,oBAAoB,CAACsB,SAAS;;MAEnD,IAAI,IAAI,CAACJ,UAAU,CAACK,eAAe,KAAK,IAAI,EAAE;QAC1CJ,cAAc,GAAGnB,oBAAoB,CAACwB,MAAM;;MAGhD,OAAOL,cAAc;IACzB;IAEA;;;;;;EAAA;IAAA;IAAA,OAMQ,sBAAaM,QAAgB,EAAEC,WAAsB;;MACzD,uBAMI,IAAI,CAACR,UAAU;QALfS,WAAW,oBAAXA,WAAW;QACXC,mBAAmB,oBAAnBA,mBAAmB;QACnBC,kBAAkB,oBAAlBA,kBAAkB;QAClBC,UAAU,oBAAVA,UAAU;QACVC,aAAa,oBAAbA,aAAa;MAEjB,IAAMC,UAAU,GAAGP,QAAQ,0BAAmBA,QAAQ,IAAK,QAAQ;MACnE,IAAMQ,WAAW,GAAG,IAAI,CAACC,kBAAkB,EAAE;MAE7CD,WAAW,CAAChC,KAAK,CAACkC,WAAW,CAAC,gCACtB,iBAAW,CAAClC,KAAK,CAACkC,WAAW,CAAC,mCAAI,EAAE,GACrCzB,uCAAuC,CAC7C;MAED,IAAIgB,WAAW,IAAIA,WAAW,CAACU,MAAM,EAAE;QACnCH,WAAW,CAAChC,KAAK,CAACoC,WAAW,CAAC,GAAGC,IAAI,CAACC,SAAS,CAACb,WAAW,CAAC;;MAEhE,IAAIK,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,iBAAiB,EAAE;QAClCP,WAAW,CAAChC,KAAK,CAACuC,iBAAiB,CAAC,GAAGC,kBAAkB,CACrDV,aAAa,CAACS,iBAAiB,CAClC;QAED,IAAIT,aAAa,CAACW,aAAa,EAAE;UAC7BT,WAAW,CAAChC,KAAK,CAACyC,aAAa,CAAC,GAAG,IAAI;;;MAG/C,IAAIb,kBAAkB,EAAE;QACpBI,WAAW,CAAChC,KAAK,CAAC0C,kBAAkB,CAAC,GAAG,IAAI;;MAEhD,IAAIhB,WAAW,EAAE;QACbM,WAAW,CAAChC,KAAK,CAAC2C,UAAU,CAAC,GAAG,IAAI;;MAExC,IAAId,UAAU,EAAE;QACZG,WAAW,CAAChC,KAAK,CAAC4C,UAAU,CAAC,GAAG,IAAI;;MAGxCZ,WAAW,CAAChC,KAAK,CAAC6C,cAAc,CAAC,GAAG,IAAI,CAACC,iBAAiB,EAAE;MAC5Dd,WAAW,CAAChC,KAAK,CAAC+C,yBAAyB,CAAC,GAAG,KAAK;MACpDf,WAAW,CAAChC,KAAK,CAACgD,WAAW,CAAC,GAAG,IAAI;MACrC,IAAIC,KAAK,GAAG,EAAE;MACd,IAAMC,iBAAiB,GAAGhD,mBAAmB,CAAC8B,WAAW,EAAE,IAAI,CAAC;MAChE,IAAIkB,iBAAiB,EAAE;QACnBD,KAAK,cAAOC,iBAAiB,CAAE;;MAEnC,IAAMC,gBAAgB,GAAG,IAAI,CAACC,2BAA2B,EAAE;MAE3D,iBAAU,IAAI,CAACC,gBAAgB,CAC3BJ,KAAK,CACR,cAAIlB,UAAU,SAAGoB,gBAAgB;IACtC;IAEA;;;EAAA;IAAA;IAAA,OAGO,kBAAM;MACT;MACA,wBAAkC,IAAI,CAAClC,UAAU;QAAzCO,QAAQ,qBAARA,QAAQ;QAAEC,WAAW,qBAAXA,WAAW;MAE7B,IAAM6B,GAAG,GAAG,IAAI,CAACC,YAAY,CAAC/B,QAAQ,EAAEC,WAAW,CAAC;MACpD,IAAI,CAAC+B,YAAY,CAACF,GAAG,EAAE,IAAI,CAACrC,UAAU,CAACwC,WAAW,CAAC;MACnDnD,cAAc,EAAE,CAACoD,IAAI,CAAC,YAAK;QACvB,IACIvD,yBAAyB,CACrBK,iBAAiB,EAAE,EACnBD,cAAc,EAAE,CAACoD,8BAA8B,CAClD,EACH;UACEC,KAAK,CAACvD,aAAa,CAACwD,gCAAgC,CAAC;;MAE7D,CAAC,CAAC;MACF,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EA1G4BzD,OAAO","names":["DataSourceVisualMode","Param","Action","getQueryParamString","checkReleaseVersionInBeta","TsEmbed","ERROR_MESSAGE","getAuthPromise","getEmbedConfig","getReleaseVersion","HiddenActionItemByDefaultForSearchEmbed","EditACopy","SaveAsView","UpdateTML","EditTML","AnswerDelete","SearchEmbed","domSelector","viewConfig","dataSourceMode","Expanded","collapseDataSources","Collapsed","hideDataSources","Hidden","answerId","dataSources","hideResults","expandAllDataSource","enableSearchAssist","forceTable","searchOptions","answerPath","queryParams","getBaseQueryParams","HideActions","length","DataSources","JSON","stringify","searchTokenString","encodeURIComponent","executeSearch","EnableSearchAssist","HideResult","ForceTable","DataSourceMode","getDataSourceMode","UseLastSelectedDataSource","searchEmbed","query","queryParamsString","tsPostHashParams","getThoughtSpotPostUrlParams","getEmbedBasePath","src","getIFrameSrc","renderIFrame","frameParams","then","suppressSearchEmbedBetaWarning","alert","SEARCHEMBED_BETA_WRANING_MESSAGE"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\search.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport {\n    DataSourceVisualMode,\n    DOMSelector,\n    Param,\n    Action,\n    ViewConfig,\n} from '../types';\nimport { getQueryParamString, checkReleaseVersionInBeta } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { version } from '../../package.json';\nimport { ERROR_MESSAGE } from '../errors';\nimport { getAuthPromise, getEmbedConfig } from './base';\nimport { getReleaseVersion } from '../auth';\n\n/**\n * Configuration for search options\n */\nexport interface SearchOptions {\n    /**\n     * The tml string to load the answer\n     */\n    searchTokenString: string;\n    /**\n     * Boolean to determine if the search should be executed or not.\n     * if it is executed, put the focus on the results.\n     * if it’s not executed, put the focus in the search bar - at the end of the tokens\n     */\n    executeSearch?: boolean;\n}\n\n/**\n * The configuration attributes for the embedded search view.\n *\n * @Category Search Embed\n */\nexport interface SearchViewConfig extends ViewConfig {\n    /**\n     * If set to true, the data sources panel is collapsed on load,\n     * but can be expanded manually.\n     */\n    collapseDataSources?: boolean;\n    /**\n     * If set to true, hides the data sources panel.\n     */\n    hideDataSources?: boolean;\n    /**\n     * If set to true, hides the charts and tables in search answers.\n     * This attribute can be used to create a custom visualization\n     * using raw answer data.\n     */\n    hideResults?: boolean;\n    /**\n     * If set to true, expands all the data sources panel.\n     */\n    expandAllDataSource?: boolean;\n    /**\n     * If set to true, the Search Assist feature is enabled.\n     * @version SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw\n     */\n    enableSearchAssist?: boolean;\n    /**\n     * If set to true, the tabular view is set as the default\n     * format for presenting search data.\n     */\n    forceTable?: boolean;\n    /**\n     * The array of data source GUIDs to set on load.\n     */\n    dataSources?: string[];\n    /**\n     * The initial search query to load the answer with.\n     * @deprecated Use {@link searchOptions} instead\n     */\n    searchQuery?: string;\n    /**\n     * Configuration for search options\n     */\n    searchOptions?: SearchOptions;\n    /**\n     * The GUID of a saved answer to load initially.\n     */\n    answerId?: string;\n}\n\nexport const HiddenActionItemByDefaultForSearchEmbed = [\n    Action.EditACopy,\n    Action.SaveAsView,\n    Action.UpdateTML,\n    Action.EditTML,\n    Action.AnswerDelete,\n];\n\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\nexport class SearchEmbed extends TsEmbed {\n    /**\n     * The view configuration for the embedded ThoughtSpot search.\n     */\n    protected viewConfig: SearchViewConfig;\n\n    constructor(domSelector: DOMSelector, viewConfig: SearchViewConfig) {\n        super(domSelector);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Get the state of the data sources panel that the embedded\n     * ThoughtSpot search will be initialized with.\n     */\n    private getDataSourceMode() {\n        let dataSourceMode = DataSourceVisualMode.Expanded;\n        if (this.viewConfig.collapseDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Collapsed;\n        }\n        if (this.viewConfig.hideDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Hidden;\n        }\n\n        return dataSourceMode;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param answerId The GUID of a saved answer\n     * @param dataSources A list of data source GUIDs\n     */\n    private getIFrameSrc(answerId: string, dataSources?: string[]) {\n        const {\n            hideResults,\n            expandAllDataSource,\n            enableSearchAssist,\n            forceTable,\n            searchOptions,\n        } = this.viewConfig;\n        const answerPath = answerId ? `saved-answer/${answerId}` : 'answer';\n        const queryParams = this.getBaseQueryParams();\n\n        queryParams[Param.HideActions] = [\n            ...(queryParams[Param.HideActions] ?? []),\n            ...HiddenActionItemByDefaultForSearchEmbed,\n        ];\n\n        if (dataSources && dataSources.length) {\n            queryParams[Param.DataSources] = JSON.stringify(dataSources);\n        }\n        if (searchOptions?.searchTokenString) {\n            queryParams[Param.searchTokenString] = encodeURIComponent(\n                searchOptions.searchTokenString,\n            );\n\n            if (searchOptions.executeSearch) {\n                queryParams[Param.executeSearch] = true;\n            }\n        }\n        if (enableSearchAssist) {\n            queryParams[Param.EnableSearchAssist] = true;\n        }\n        if (hideResults) {\n            queryParams[Param.HideResult] = true;\n        }\n        if (forceTable) {\n            queryParams[Param.ForceTable] = true;\n        }\n\n        queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n        queryParams[Param.UseLastSelectedDataSource] = false;\n        queryParams[Param.searchEmbed] = true;\n        let query = '';\n        const queryParamsString = getQueryParamString(queryParams, true);\n        if (queryParamsString) {\n            query = `?${queryParamsString}`;\n        }\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n\n        return `${this.getEmbedBasePath(\n            query,\n        )}/${answerPath}${tsPostHashParams}`;\n    }\n\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n    public render(): SearchEmbed {\n        super.render();\n        const { answerId, dataSources } = this.viewConfig;\n\n        const src = this.getIFrameSrc(answerId, dataSources);\n        this.renderIFrame(src, this.viewConfig.frameParams);\n        getAuthPromise().then(() => {\n            if (\n                checkReleaseVersionInBeta(\n                    getReleaseVersion(),\n                    getEmbedConfig().suppressSearchEmbedBetaWarning,\n                )\n            ) {\n                alert(ERROR_MESSAGE.SEARCHEMBED_BETA_WRANING_MESSAGE);\n            }\n        });\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}