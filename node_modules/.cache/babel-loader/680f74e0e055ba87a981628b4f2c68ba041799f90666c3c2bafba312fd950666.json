{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport var LiveboardEmbed = /*#__PURE__*/function (_V1Embed) {\n  _inherits(LiveboardEmbed, _V1Embed);\n  var _super = _createSuper(LiveboardEmbed);\n  // eslint-disable-next-line no-useless-constructor\n  function LiveboardEmbed(domSelector, viewConfig) {\n    var _this;\n    _classCallCheck(this, LiveboardEmbed);\n    _this = _super.call(this, domSelector, viewConfig);\n    _this.defaultHeight = 500;\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    _this.updateIFrameHeight = function (data) {\n      _this.setIFrameHeight(Math.max(data.data, _this.defaultHeight));\n    };\n    _this.embedIframeCenter = function (data, responder) {\n      var obj = _this.getIframeCenter();\n      responder({\n        type: EmbedEvent.EmbedIframeCenter,\n        data: obj\n      });\n    };\n    _this.setIframeHeightForNonEmbedLiveboard = function (data) {\n      if (!data.data.currentPath.startsWith('/embed/viz/')) {\n        _this.setIFrameHeight(_this.defaultHeight);\n      }\n    };\n    return _this;\n  }\n  /**\n   * Construct a map of params to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n  _createClass(LiveboardEmbed, [{\n    key: \"getEmbedParams\",\n    value: function getEmbedParams() {\n      var params = this.getBaseQueryParams();\n      var _this$viewConfig = this.viewConfig,\n        enableVizTransformations = _this$viewConfig.enableVizTransformations,\n        fullHeight = _this$viewConfig.fullHeight,\n        defaultHeight = _this$viewConfig.defaultHeight,\n        visibleVizs = _this$viewConfig.visibleVizs,\n        liveboardV2 = _this$viewConfig.liveboardV2,\n        vizId = _this$viewConfig.vizId,\n        activeTabId = _this$viewConfig.activeTabId;\n      var preventLiveboardFilterRemoval = this.viewConfig.preventLiveboardFilterRemoval || this.viewConfig.preventPinboardFilterRemoval;\n      if (fullHeight === true) {\n        params[Param.fullHeight] = true;\n      }\n      if (defaultHeight) {\n        this.defaultHeight = defaultHeight;\n      }\n      if (enableVizTransformations !== undefined) {\n        params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n      }\n      if (preventLiveboardFilterRemoval) {\n        params[Param.preventLiveboardFilterRemoval] = true;\n      }\n      if (visibleVizs) {\n        params[Param.visibleVizs] = visibleVizs;\n      }\n      params[Param.livedBoardEmbed] = true;\n      if (vizId) {\n        params[Param.vizEmbed] = true;\n      }\n      if (liveboardV2 !== undefined) {\n        params[Param.LiveboardV2Enabled] = liveboardV2;\n      }\n      var queryParams = getQueryParamString(params, true);\n      return queryParams;\n    }\n    /**\n     * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n     * to be loaded within the iframe.\n     * @param liveboardId The GUID of the Liveboard.\n     * @param vizId The optional GUID of a visualization within the Liveboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the Liveboard or visualization on load.\n     */\n  }, {\n    key: \"getIFrameSrc\",\n    value: function getIFrameSrc(liveboardId, vizId, runtimeFilters, activeTabId) {\n      var filterQuery = getFilterQuery(runtimeFilters || []);\n      var queryParams = this.getEmbedParams();\n      var queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n      var url = \"\".concat(this.getV1EmbedBasePath(queryString, true, false, false), \"/viz/\").concat(liveboardId);\n      if (activeTabId) {\n        url = \"\".concat(url, \"/tab/\").concat(activeTabId);\n      }\n      if (vizId) {\n        url = \"\".concat(url, \"/\").concat(vizId);\n      }\n      var tsPostHashParams = this.getThoughtSpotPostUrlParams();\n      url = \"\".concat(url).concat(tsPostHashParams);\n      return url;\n    }\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n  }, {\n    key: \"trigger\",\n    value: function trigger(messageType) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dataWithVizId = data;\n      if (this.viewConfig.vizId) {\n        dataWithVizId.vizId = this.viewConfig.vizId;\n      }\n      return _get(_getPrototypeOf(LiveboardEmbed.prototype), \"trigger\", this).call(this, messageType, dataWithVizId);\n    }\n    /**\n     * Render an embedded ThoughtSpot Liveboard or visualization\n     * @param renderOptions An object specifying the Liveboard ID,\n     * visualization ID and the runtime filters.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a;\n      var _this$viewConfig2 = this.viewConfig,\n        vizId = _this$viewConfig2.vizId,\n        activeTabId = _this$viewConfig2.activeTabId,\n        runtimeFilters = _this$viewConfig2.runtimeFilters;\n      var liveboardId = (_a = this.viewConfig.liveboardId) !== null && _a !== void 0 ? _a : this.viewConfig.pinboardId;\n      if (!liveboardId) {\n        this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n      }\n      if (this.viewConfig.fullHeight === true) {\n        this.on(EmbedEvent.RouteChange, this.setIframeHeightForNonEmbedLiveboard);\n        this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n        this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n      }\n      _get(_getPrototypeOf(LiveboardEmbed.prototype), \"render\", this).call(this);\n      var src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters, activeTabId);\n      this.renderV1Embed(src);\n      return this;\n    }\n  }]);\n  return LiveboardEmbed;\n}(V1Embed);\n/**\n * @hidden\n */\nexport var PinboardEmbed = /*#__PURE__*/function (_LiveboardEmbed) {\n  _inherits(PinboardEmbed, _LiveboardEmbed);\n  var _super2 = _createSuper(PinboardEmbed);\n  function PinboardEmbed() {\n    _classCallCheck(this, PinboardEmbed);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(PinboardEmbed);\n}(LiveboardEmbed);","map":{"version":3,"mappings":"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","names":["ERROR_MESSAGE","EmbedEvent","Param","getFilterQuery","getQueryParamString","V1Embed","LiveboardEmbed","domSelector","viewConfig","data","setIFrameHeight","Math","max","defaultHeight","responder","obj","getIframeCenter","type","EmbedIframeCenter","currentPath","startsWith","params","getBaseQueryParams","enableVizTransformations","fullHeight","visibleVizs","liveboardV2","vizId","activeTabId","preventLiveboardFilterRemoval","preventPinboardFilterRemoval","undefined","EnableVizTransformations","toString","livedBoardEmbed","vizEmbed","LiveboardV2Enabled","queryParams","liveboardId","runtimeFilters","filterQuery","getEmbedParams","queryString","filter","Boolean","join","url","getV1EmbedBasePath","tsPostHashParams","getThoughtSpotPostUrlParams","messageType","dataWithVizId","pinboardId","handleError","LIVEBOARD_VIZ_ID_VALIDATION","on","RouteChange","setIframeHeightForNonEmbedLiveboard","EmbedHeight","updateIFrameHeight","embedIframeCenter","src","getIFrameSrc","renderV1Embed","PinboardEmbed"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\liveboard.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { ERROR_MESSAGE } from '../errors';\nimport {\n    EmbedEvent,\n    MessagePayload,\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n    ViewConfig,\n} from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n\n/**\n * The configuration for the embedded Liveboard or visualization page view.\n * @Category Liveboards and Charts\n */\nexport interface LiveboardViewConfig extends ViewConfig {\n    /**\n     * If set to true, the embedded object container dynamically resizes\n     * according to the height of the Liveboard.\n     * @version SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1\n     */\n    fullHeight?: boolean;\n    /**\n     * This is the minimum height(in pixels) for a full height Liveboard.\n     * Setting this height helps resolves issues with empty Liveboards and\n     * other screens navigable from a Liveboard.\n     * @version SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1\n     * @default 500\n     */\n    defaultHeight?: number;\n    /**\n     * @Deprecated If set to true, the context menu in visualizations will be enabled.\n     */\n    enableVizTransformations?: boolean;\n    /**\n     * The Liveboard to display in the embedded view.\n     * Use either of liveboardId or pinboardId to reference the Liveboard to embed.\n     * @version SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1\n     */\n    liveboardId?: string;\n    /**\n     * To support backward compatibility\n     * @hidden\n     */\n    pinboardId?: string;\n    /**\n     * The visualization within the Liveboard to display.\n     */\n    vizId?: string;\n    /**\n     * If set to true, all filter chips from a\n     * Liveboard page will be read-only (no X buttons)\n     * @version SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1\n     */\n    preventLiveboardFilterRemoval?: boolean;\n    /**\n     * Array of viz ids which should be visible when the liveboard\n     * first renders. This can be changed by triggering the \"SetVisibleVizs\"\n     * event.\n     * @version SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw\n     */\n    visibleVizs?: string[];\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    preventPinboardFilterRemoval?: boolean;\n    /**\n     * Render embedded Liveboards and visualizations in the new Liveboard experience mode\n     * @version SDK: 1.14.0 | ThoughtSpot: 8.6.0.cl, 8.8.1-sw\n     */\n    liveboardV2?: boolean;\n    /**\n     * Tab Id of the Liveboard that is supposed to be active\n     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw\n     */\n    activeTabId?: string;\n}\n\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport class LiveboardEmbed extends V1Embed {\n    protected viewConfig: LiveboardViewConfig;\n\n    private defaultHeight = 500;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: LiveboardViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Construct a map of params to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const {\n            enableVizTransformations,\n            fullHeight,\n            defaultHeight,\n            visibleVizs,\n            liveboardV2,\n            vizId,\n            activeTabId,\n        } = this.viewConfig;\n\n        const preventLiveboardFilterRemoval =\n            this.viewConfig.preventLiveboardFilterRemoval ||\n            this.viewConfig.preventPinboardFilterRemoval;\n\n        if (fullHeight === true) {\n            params[Param.fullHeight] = true;\n        }\n        if (defaultHeight) {\n            this.defaultHeight = defaultHeight;\n        }\n        if (enableVizTransformations !== undefined) {\n            params[\n                Param.EnableVizTransformations\n            ] = enableVizTransformations.toString();\n        }\n        if (preventLiveboardFilterRemoval) {\n            params[Param.preventLiveboardFilterRemoval] = true;\n        }\n        if (visibleVizs) {\n            params[Param.visibleVizs] = visibleVizs;\n        }\n        params[Param.livedBoardEmbed] = true;\n        if (vizId) {\n            params[Param.vizEmbed] = true;\n        }\n        if (liveboardV2 !== undefined) {\n            params[Param.LiveboardV2Enabled] = liveboardV2;\n        }\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n     * to be loaded within the iframe.\n     * @param liveboardId The GUID of the Liveboard.\n     * @param vizId The optional GUID of a visualization within the Liveboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the Liveboard or visualization on load.\n     */\n    private getIFrameSrc(\n        liveboardId: string,\n        vizId?: string,\n        runtimeFilters?: RuntimeFilter[],\n        activeTabId?: string,\n    ) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            true,\n            false,\n            false,\n        )}/viz/${liveboardId}`;\n        if (activeTabId) {\n            url = `${url}/tab/${activeTabId}`;\n        }\n        if (vizId) {\n            url = `${url}/${vizId}`;\n        }\n\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n        url = `${url}${tsPostHashParams}`;\n\n        return url;\n    }\n\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    private updateIFrameHeight = (data: MessagePayload) => {\n        this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    private embedIframeCenter = (data: MessagePayload, responder: any) => {\n        const obj = this.getIframeCenter();\n        responder({ type: EmbedEvent.EmbedIframeCenter, data: obj });\n    };\n\n    private setIframeHeightForNonEmbedLiveboard = (data: MessagePayload) => {\n        if (!data.data.currentPath.startsWith('/embed/viz/')) {\n            this.setIFrameHeight(this.defaultHeight);\n        }\n    };\n\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n    public trigger(messageType: HostEvent, data: any = {}): Promise<any> {\n        const dataWithVizId = data;\n        if (this.viewConfig.vizId) {\n            dataWithVizId.vizId = this.viewConfig.vizId;\n        }\n        return super.trigger(messageType, dataWithVizId);\n    }\n\n    /**\n     * Render an embedded ThoughtSpot Liveboard or visualization\n     * @param renderOptions An object specifying the Liveboard ID,\n     * visualization ID and the runtime filters.\n     */\n    public render(): LiveboardEmbed {\n        const { vizId, activeTabId, runtimeFilters } = this.viewConfig;\n        const liveboardId =\n            this.viewConfig.liveboardId ?? this.viewConfig.pinboardId;\n\n        if (!liveboardId) {\n            this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n        }\n\n        if (this.viewConfig.fullHeight === true) {\n            this.on(\n                EmbedEvent.RouteChange,\n                this.setIframeHeightForNonEmbedLiveboard,\n            );\n            this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n            this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n        }\n\n        super.render();\n\n        const src = this.getIFrameSrc(\n            liveboardId,\n            vizId,\n            runtimeFilters,\n            activeTabId,\n        );\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PinboardEmbed extends LiveboardEmbed {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}