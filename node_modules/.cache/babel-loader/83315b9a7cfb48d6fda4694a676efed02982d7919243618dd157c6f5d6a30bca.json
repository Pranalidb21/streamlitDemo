{"ast":null,"code":"import _objectSpread from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { OperationType } from '../types';\nexport function getAnswerServiceInstance(session, query, operation, thoughtSpotHost) {\n  var variable;\n  var fetchQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(variables) {\n      var response, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"\".concat(thoughtSpotHost, \"/prism/?op=\").concat(operation), {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json;charset=UTF-8',\n                'x-requested-by': 'ThoughtSpot',\n                accept: '*/*',\n                'accept-language': 'en-us'\n              },\n              body: JSON.stringify({\n                operationName: operation,\n                query: query,\n                variables: variables\n              }),\n              credentials: 'include'\n            });\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result.data);\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", _context.t0);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return function fetchQuery(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var fetchData = function fetchData(offset, batchSize) {\n    if (operation === OperationType.GetChartWithData) {\n      variable = {\n        batchSize: batchSize,\n        offset: offset * batchSize\n      };\n    } else {\n      variable = {\n        dataPaginationParams: {\n          isClientPaginated: true,\n          offset: offset * batchSize,\n          size: batchSize\n        }\n      };\n    }\n    return fetchQuery(_objectSpread({\n      session: session\n    }, variable));\n  };\n  return {\n    fetchData: fetchData\n  };\n}","map":{"version":3,"mappings":";;;AAAA,SAA2BA,aAAa,QAAQ,UAAU;AAE1D,OAAM,SAAUC,wBAAwB,CACpCC,OAAyB,EACzBC,KAAa,EACbC,SAAiB,EACjBC,eAAuB;EAEvB,IAAIC,QAAa;EAEjB,IAAMC,UAAU;IAAA,sEAAG,iBAAOC,SAAc;MAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,OAETC,KAAK,WACrBJ,eAAe,wBAAcD,SAAS,GACzC;cACIM,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE,gCAAgC;gBAChD,gBAAgB,EAAE,aAAa;gBAC/BC,MAAM,EAAE,KAAK;gBACb,iBAAiB,EAAE;eACtB;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBACjBC,aAAa,EAAEZ,SAAS;gBACxBD,KAAK,EAALA,KAAK;gBACLK,SAAS,EAATA;eACH,CAAC;cACFS,WAAW,EAAE;aAChB,CACJ;UAAA;YAjBKC,QAAQ;YAAA;YAAA,OAkBOA,QAAQ,CAACC,IAAI,EAAE;UAAA;YAA9BC,MAAM;YAAA,iCACLA,MAAM,CAACC,IAAI;UAAA;YAAA;YAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAIzB;IAAA,gBAzBKd,UAAU;MAAA;IAAA;EAAA,GAyBf;EAED,IAAMe,SAAS,GAAG,SAAZA,SAAS,CAAIC,MAAc,EAAEC,SAAiB,EAAI;IACpD,IAAIpB,SAAS,KAAKJ,aAAa,CAACyB,gBAAgB,EAAE;MAC9CnB,QAAQ,GAAG;QAAEkB,SAAS,EAATA,SAAS;QAAED,MAAM,EAAEA,MAAM,GAAGC;MAAS,CAAE;KACvD,MAAM;MACHlB,QAAQ,GAAG;QACPoB,oBAAoB,EAAE;UAClBC,iBAAiB,EAAE,IAAI;UACvBJ,MAAM,EAAEA,MAAM,GAAGC,SAAS;UAC1BI,IAAI,EAAEJ;;OAEb;;IAEL,OAAOjB,UAAU;MACbL,OAAO,EAAPA;IAAO,GACJI,QAAQ,EACb;EACN,CAAC;EAED,OAAO;IACHgB,SAAS,EAATA;GACH;AACL","names":["OperationType","getAnswerServiceInstance","session","query","operation","thoughtSpotHost","variable","fetchQuery","variables","fetch","method","headers","accept","body","JSON","stringify","operationName","credentials","response","json","result","data","fetchData","offset","batchSize","GetChartWithData","dataPaginationParams","isClientPaginated","size"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\answerService.ts"],"sourcesContent":["import { SessionInterface, OperationType } from '../types';\n\nexport function getAnswerServiceInstance(\n    session: SessionInterface,\n    query: string,\n    operation: string,\n    thoughtSpotHost: string,\n): any {\n    let variable: any;\n\n    const fetchQuery = async (variables: any) => {\n        try {\n            const response = await fetch(\n                `${thoughtSpotHost}/prism/?op=${operation}`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json;charset=UTF-8',\n                        'x-requested-by': 'ThoughtSpot',\n                        accept: '*/*',\n                        'accept-language': 'en-us',\n                    },\n                    body: JSON.stringify({\n                        operationName: operation,\n                        query,\n                        variables,\n                    }),\n                    credentials: 'include',\n                },\n            );\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            return error;\n        }\n    };\n\n    const fetchData = (offset: number, batchSize: number) => {\n        if (operation === OperationType.GetChartWithData) {\n            variable = { batchSize, offset: offset * batchSize };\n        } else {\n            variable = {\n                dataPaginationParams: {\n                    isClientPaginated: true,\n                    offset: offset * batchSize,\n                    size: batchSize,\n                },\n            };\n        }\n        return fetchQuery({\n            session,\n            ...variable,\n        });\n    };\n\n    return {\n        fetchData,\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}