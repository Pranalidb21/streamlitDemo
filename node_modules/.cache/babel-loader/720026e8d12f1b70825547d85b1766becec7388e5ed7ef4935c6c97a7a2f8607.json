{"ast":null,"code":"import { disableAutoLogin, getEmbedConfig, handleAuth, notifyAuthFailure, notifyAuthSuccess, notifyLogout } from '../embed/base';\nimport { AuthFailureType, initSession } from '../auth';\nimport { AuthType, EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\nexport function processCustomAction(e, thoughtSpotHost) {\n  var _a;\n  if ([OperationType.GetChartWithData, OperationType.GetTableWithHeadlineData].includes((_a = e.data) === null || _a === void 0 ? void 0 : _a.operation)) {\n    const {\n      session,\n      query,\n      operation\n    } = e.data;\n    const answerService = getAnswerServiceInstance(session, query, operation, thoughtSpotHost);\n    return {\n      ...e,\n      answerService\n    };\n  }\n  return e;\n}\nfunction processAuthInit(e) {\n  var _a, _b;\n  // Store user session details sent by app.\n  initSession(e.data);\n  notifyAuthSuccess();\n  // Expose only allowed details (eg: userGUID) back to SDK users.\n  return {\n    ...e,\n    data: {\n      userGUID: ((_a = e.data) === null || _a === void 0 ? void 0 : _a.userGUID) || ((_b = e.payload) === null || _b === void 0 ? void 0 : _b.userGUID)\n    }\n  };\n}\nfunction processAuthExpire(e) {\n  const {\n    autoLogin = false\n  } = getEmbedConfig(); // Set default to false\n  if (autoLogin) {\n    handleAuth();\n  }\n  notifyAuthFailure(AuthFailureType.EXPIRY);\n  return e;\n}\nfunction processNoCookieAccess(e, containerEl) {\n  const {\n    loginFailedMessage,\n    suppressNoCookieAccessAlert\n  } = getEmbedConfig();\n  if (!suppressNoCookieAccessAlert) {\n    // eslint-disable-next-line no-alert\n    alert('Third party cookie access is blocked on this browser, please allow third party cookies for this to work properly. \\nYou can use `suppressNoCookieAccessAlert` to suppress this message.');\n  }\n  // eslint-disable-next-line no-param-reassign\n  containerEl.innerHTML = loginFailedMessage;\n  notifyAuthFailure(AuthFailureType.NO_COOKIE_ACCESS);\n  return e;\n}\nfunction processAuthFailure(e, containerEl) {\n  const {\n    loginFailedMessage,\n    authType\n  } = getEmbedConfig();\n  if (authType !== AuthType.None) {\n    // eslint-disable-next-line no-param-reassign\n    containerEl.innerHTML = loginFailedMessage;\n    notifyAuthFailure(AuthFailureType.OTHER);\n  }\n  return e;\n}\nfunction processAuthLogout(e, containerEl) {\n  const {\n    loginFailedMessage\n  } = getEmbedConfig();\n  // eslint-disable-next-line no-param-reassign\n  containerEl.innerHTML = loginFailedMessage;\n  disableAutoLogin();\n  notifyLogout();\n  return e;\n}\nexport function processEventData(type, e, thoughtSpotHost, containerEl) {\n  switch (type) {\n    case EmbedEvent.CustomAction:\n      return processCustomAction(e, thoughtSpotHost);\n    case EmbedEvent.AuthInit:\n      return processAuthInit(e);\n    case EmbedEvent.AuthExpire:\n      return processAuthExpire(e);\n    case EmbedEvent.NoCookieAccess:\n      return processNoCookieAccess(e, containerEl);\n    case EmbedEvent.AuthFailure:\n      return processAuthFailure(e, containerEl);\n    case EmbedEvent.AuthLogout:\n      return processAuthLogout(e, containerEl);\n    default:\n  }\n  return e;\n}","map":{"version":3,"mappings":"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","names":["disableAutoLogin","getEmbedConfig","handleAuth","notifyAuthFailure","notifyAuthSuccess","notifyLogout","AuthFailureType","initSession","AuthType","EmbedEvent","OperationType","getAnswerServiceInstance","processCustomAction","e","thoughtSpotHost","GetChartWithData","GetTableWithHeadlineData","includes","data","operation","session","query","answerService","processAuthInit","userGUID","payload","processAuthExpire","autoLogin","EXPIRY","processNoCookieAccess","containerEl","loginFailedMessage","suppressNoCookieAccessAlert","alert","innerHTML","NO_COOKIE_ACCESS","processAuthFailure","authType","None","OTHER","processAuthLogout","processEventData","type","CustomAction","AuthInit","AuthExpire","NoCookieAccess","AuthFailure","AuthLogout"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\processData.ts"],"sourcesContent":["import {\n    disableAutoLogin,\n    getEmbedConfig,\n    handleAuth,\n    notifyAuthFailure,\n    notifyAuthSuccess,\n    notifyLogout,\n} from '../embed/base';\nimport { AuthFailureType, initSession } from '../auth';\nimport { AuthType, EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\n\nexport function processCustomAction(e: any, thoughtSpotHost: string) {\n    if (\n        [\n            OperationType.GetChartWithData,\n            OperationType.GetTableWithHeadlineData,\n        ].includes(e.data?.operation)\n    ) {\n        const { session, query, operation } = e.data;\n        const answerService = getAnswerServiceInstance(\n            session,\n            query,\n            operation,\n            thoughtSpotHost,\n        );\n        return {\n            ...e,\n            answerService,\n        };\n    }\n    return e;\n}\n\nfunction processAuthInit(e: any) {\n    // Store user session details sent by app.\n    initSession(e.data);\n    notifyAuthSuccess();\n\n    // Expose only allowed details (eg: userGUID) back to SDK users.\n    return {\n        ...e,\n        data: {\n            userGUID: e.data?.userGUID || e.payload?.userGUID,\n        },\n    };\n}\n\nfunction processAuthExpire(e: any) {\n    const { autoLogin = false } = getEmbedConfig(); // Set default to false\n    if (autoLogin) {\n        handleAuth();\n    }\n    notifyAuthFailure(AuthFailureType.EXPIRY);\n    return e;\n}\n\nfunction processNoCookieAccess(e: any, containerEl: Element) {\n    const {\n        loginFailedMessage,\n        suppressNoCookieAccessAlert,\n    } = getEmbedConfig();\n    if (!suppressNoCookieAccessAlert) {\n        // eslint-disable-next-line no-alert\n        alert(\n            'Third party cookie access is blocked on this browser, please allow third party cookies for this to work properly. \\nYou can use `suppressNoCookieAccessAlert` to suppress this message.',\n        );\n    }\n    // eslint-disable-next-line no-param-reassign\n    containerEl.innerHTML = loginFailedMessage;\n    notifyAuthFailure(AuthFailureType.NO_COOKIE_ACCESS);\n    return e;\n}\n\nfunction processAuthFailure(e: any, containerEl: Element) {\n    const { loginFailedMessage, authType } = getEmbedConfig();\n    if (authType !== AuthType.None) {\n        // eslint-disable-next-line no-param-reassign\n        containerEl.innerHTML = loginFailedMessage;\n        notifyAuthFailure(AuthFailureType.OTHER);\n    }\n    return e;\n}\n\nfunction processAuthLogout(e: any, containerEl: Element) {\n    const { loginFailedMessage } = getEmbedConfig();\n    // eslint-disable-next-line no-param-reassign\n    containerEl.innerHTML = loginFailedMessage;\n    disableAutoLogin();\n    notifyLogout();\n    return e;\n}\n\nexport function processEventData(\n    type: EmbedEvent,\n    e: any,\n    thoughtSpotHost: string,\n    containerEl: Element,\n): any {\n    switch (type) {\n        case EmbedEvent.CustomAction:\n            return processCustomAction(e, thoughtSpotHost);\n        case EmbedEvent.AuthInit:\n            return processAuthInit(e);\n        case EmbedEvent.AuthExpire:\n            return processAuthExpire(e);\n        case EmbedEvent.NoCookieAccess:\n            return processNoCookieAccess(e, containerEl);\n        case EmbedEvent.AuthFailure:\n            return processAuthFailure(e, containerEl);\n        case EmbedEvent.AuthLogout:\n            return processAuthLogout(e, containerEl);\n        default:\n    }\n    return e;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}