{"ast":null,"code":"import { ERROR_MESSAGE } from './errors';\n/**\n * Copyright (c) 2022\n *\n * Utilities related to reading configuration objects\n *\n * @summary Config-related utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nvar urlRegex = new RegExp(['(^(https?:)//)?', '(([^:/?#]*)(?::([0-9]+))?)', '(/{0,1}[^?#]*)', '(\\\\?[^#]*|)', '(#.*|)$' // hash\n].join(''));\n/**\n * Parse and construct the ThoughtSpot hostname or IP address\n * from the embed configuration object.\n * @param config\n */\nexport var getThoughtSpotHost = function getThoughtSpotHost(config) {\n  var urlParts = config.thoughtSpotHost.match(urlRegex);\n  if (!urlParts) {\n    throw new Error(ERROR_MESSAGE.INVALID_THOUGHTSPOT_HOST);\n  }\n  var protocol = urlParts[2] || window.location.protocol;\n  var host = urlParts[3];\n  var path = urlParts[6];\n  // Lose the trailing / if any\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1);\n  }\n  // const urlParams = urlParts[7];\n  // const hash = urlParts[8];\n  return \"\".concat(protocol, \"//\").concat(host).concat(path);\n};\nexport var getV2BasePath = function getV2BasePath(config) {\n  if (config.basepath) {\n    return config.basepath;\n  }\n  var tsHost = getThoughtSpotHost(config);\n  // This is to handle when e2e's. Search is run on pods for comp-blink-test-pipeline\n  // with baseUrl=https://localhost:8443.\n  // This is to handle when the developer is developing in their local environment.\n  if (tsHost.includes('://localhost') && !tsHost.includes(':8443')) {\n    return '';\n  }\n  return 'v2';\n};\n/**\n * It is a good idea to keep URLs under 2000 chars.\n * If this is ever breached, since we pass view configuration through\n * URL params, we would like to log a warning.\n * Reference: https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n */\nexport var URL_MAX_LENGTH = 2000;\n/**\n * The default CSS dimensions of the embedded app\n */\nexport var DEFAULT_EMBED_WIDTH = '100%';\nexport var DEFAULT_EMBED_HEIGHT = '100%';","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AAGxC;;;;;;;;AASA,IAAMC,QAAQ,GAAG,IAAIC,MAAM,CACvB,CACI,iBAAiB,EACjB,4BAA4B,EAC5B,gBAAgB,EAChB,aAAa,EACb,SAAS,CAAE;AAAA,CACd,CAACC,IAAI,CAAC,EAAE,CAAC,CACb;AAED;;;;;AAKA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,MAAmB,EAAY;EAC9D,IAAMC,QAAQ,GAAGD,MAAM,CAACE,eAAe,CAACC,KAAK,CAACP,QAAQ,CAAC;EACvD,IAAI,CAACK,QAAQ,EAAE;IACX,MAAM,IAAIG,KAAK,CAACT,aAAa,CAACU,wBAAwB,CAAC;;EAG3D,IAAMC,QAAQ,GAAGL,QAAQ,CAAC,CAAC,CAAC,IAAIM,MAAM,CAACC,QAAQ,CAACF,QAAQ;EACxD,IAAMG,IAAI,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACxB,IAAIS,IAAI,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACtB;EACA,IAAIS,IAAI,CAACC,MAAM,CAACD,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACtCF,IAAI,GAAGA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEH,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;;EAE7C;EACA;EAEA,iBAAUN,QAAQ,eAAKG,IAAI,SAAGC,IAAI;AACtC,CAAC;AAED,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAa,CAAId,MAAmB,EAAY;EACzD,IAAIA,MAAM,CAACe,QAAQ,EAAE;IACjB,OAAOf,MAAM,CAACe,QAAQ;;EAG1B,IAAMC,MAAM,GAAGjB,kBAAkB,CAACC,MAAM,CAAC;EAEzC;EACA;EACA;EACA,IAAIgB,MAAM,CAACC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAACD,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;IAC9D,OAAO,EAAE;;EAGb,OAAO,IAAI;AACf,CAAC;AAED;;;;;;AAMA,OAAO,IAAMC,cAAc,GAAG,IAAI;AAElC;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,MAAM;AACzC,OAAO,IAAMC,oBAAoB,GAAG,MAAM","names":["ERROR_MESSAGE","urlRegex","RegExp","join","getThoughtSpotHost","config","urlParts","thoughtSpotHost","match","Error","INVALID_THOUGHTSPOT_HOST","protocol","window","location","host","path","charAt","length","substring","getV2BasePath","basepath","tsHost","includes","URL_MAX_LENGTH","DEFAULT_EMBED_WIDTH","DEFAULT_EMBED_HEIGHT"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\config.ts"],"sourcesContent":["import { ERROR_MESSAGE } from './errors';\nimport { EmbedConfig } from './types';\n\n/**\n * Copyright (c) 2022\n *\n * Utilities related to reading configuration objects\n *\n * @summary Config-related utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nconst urlRegex = new RegExp(\n    [\n        '(^(https?:)//)?', // protocol\n        '(([^:/?#]*)(?::([0-9]+))?)', // host (hostname and port)\n        '(/{0,1}[^?#]*)', // pathname\n        '(\\\\?[^#]*|)', // search\n        '(#.*|)$', // hash\n    ].join(''),\n);\n\n/**\n * Parse and construct the ThoughtSpot hostname or IP address\n * from the embed configuration object.\n * @param config\n */\nexport const getThoughtSpotHost = (config: EmbedConfig): string => {\n    const urlParts = config.thoughtSpotHost.match(urlRegex);\n    if (!urlParts) {\n        throw new Error(ERROR_MESSAGE.INVALID_THOUGHTSPOT_HOST);\n    }\n\n    const protocol = urlParts[2] || window.location.protocol;\n    const host = urlParts[3];\n    let path = urlParts[6];\n    // Lose the trailing / if any\n    if (path.charAt(path.length - 1) === '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    // const urlParams = urlParts[7];\n    // const hash = urlParts[8];\n\n    return `${protocol}//${host}${path}`;\n};\n\nexport const getV2BasePath = (config: EmbedConfig): string => {\n    if (config.basepath) {\n        return config.basepath;\n    }\n\n    const tsHost = getThoughtSpotHost(config);\n\n    // This is to handle when e2e's. Search is run on pods for comp-blink-test-pipeline\n    // with baseUrl=https://localhost:8443.\n    // This is to handle when the developer is developing in their local environment.\n    if (tsHost.includes('://localhost') && !tsHost.includes(':8443')) {\n        return '';\n    }\n\n    return 'v2';\n};\n\n/**\n * It is a good idea to keep URLs under 2000 chars.\n * If this is ever breached, since we pass view configuration through\n * URL params, we would like to log a warning.\n * Reference: https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n */\nexport const URL_MAX_LENGTH = 2000;\n\n/**\n * The default CSS dimensions of the embedded app\n */\nexport const DEFAULT_EMBED_WIDTH = '100%';\nexport const DEFAULT_EMBED_HEIGHT = '100%';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}