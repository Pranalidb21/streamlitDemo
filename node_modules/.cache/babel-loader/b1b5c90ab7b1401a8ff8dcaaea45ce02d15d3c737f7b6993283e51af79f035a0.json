{"ast":null,"code":"import _get from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectWithoutProperties from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _excluded = [\"height\", \"width\"];\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getEncodedQueryParamsString, getCssDimension, getOffsetTop, embedEventStatus, setAttributes, getCustomisations, getDOMNode } from '../utils';\nimport { getThoughtSpotHost, URL_MAX_LENGTH, DEFAULT_EMBED_WIDTH, DEFAULT_EMBED_HEIGHT, getV2BasePath } from '../config';\nimport { AuthType, EmbedEvent, Action, Param } from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { processEventData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport pkgInfo from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\nvar version = pkgInfo.version;\n/**\n * Global prefix for all Thoughtspot postHash Params.\n */\nexport var THOUGHTSPOT_PARAM_PREFIX = 'ts-';\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\nvar V1EventMap = _defineProperty({}, EmbedEvent.Data, [EmbedEvent.V1Data]);\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\nexport var TsEmbed = /*#__PURE__*/function () {\n  function TsEmbed(domSelector, viewConfig) {\n    var _this = this;\n    _classCallCheck(this, TsEmbed);\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    this.shouldEncodeUrlQueryParams = false;\n    this.defaultHiddenActions = [Action.ReportError];\n    /**\n     * Send Custom style as part of payload of APP_INIT\n     */\n    this.appInitCb = function (_, responder) {\n      responder({\n        type: EmbedEvent.APP_INIT,\n        data: {\n          customisations: getCustomisations(_this.embedConfig, _this.viewConfig)\n        }\n      });\n    };\n    /**\n     * Register APP_INIT event and sendback init payload\n     */\n    this.registerAppInit = function () {\n      _this.on(EmbedEvent.APP_INIT, _this.appInitCb);\n    };\n    this.el = getDOMNode(domSelector);\n    // TODO: handle error\n    this.embedConfig = getEmbedConfig();\n    this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n    this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n    this.eventHandlerMap = new Map();\n    this.isError = false;\n    this.viewConfig = viewConfig;\n    this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n    this.registerAppInit();\n  }\n  /**\n   * Throws error encountered during initialization.\n   */\n  _createClass(TsEmbed, [{\n    key: \"throwInitError\",\n    value: function throwInitError() {\n      this.handleError('You need to init the ThoughtSpot SDK module first');\n    }\n    /**\n     * Handles errors within the SDK\n     * @param error The error message or object\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      this.isError = true;\n      this.executeCallbacks(EmbedEvent.Error, {\n        error: error\n      });\n      // Log error\n      console.error(error);\n    }\n    /**\n     * Extracts the type field from the event payload\n     * @param event The window message event\n     */\n  }, {\n    key: \"getEventType\",\n    value: function getEventType(event) {\n      var _a, _b;\n      // eslint-disable-next-line no-underscore-dangle\n      return ((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) || ((_b = event.data) === null || _b === void 0 ? void 0 : _b.__type);\n    }\n    /**\n     * Extracts the port field from the event payload\n     * @param event  The window message event\n     * @returns\n     */\n  }, {\n    key: \"getEventPort\",\n    value: function getEventPort(event) {\n      if (event.ports.length && event.ports[0]) {\n        return event.ports[0];\n      }\n      return null;\n    }\n    /**\n     * fix for ts7.sep.cl\n     * will be removed for ts7.oct.cl\n     * @hidden\n     */\n  }, {\n    key: \"formatEventData\",\n    value: function formatEventData(event, eventType) {\n      var eventData = _objectSpread(_objectSpread({}, event.data), {}, {\n        type: eventType\n      });\n      if (!eventData.data) {\n        eventData.data = event.data.payload;\n      }\n      return eventData;\n    }\n    /**\n     * Adds a global event listener to window for \"message\" events.\n     * ThoughtSpot detects if a particular event is targeted to this\n     * embed instance through an identifier contained in the payload,\n     * and executes the registered callbacks accordingly.\n     */\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents() {\n      var _this2 = this;\n      window.addEventListener('message', function (event) {\n        var eventType = _this2.getEventType(event);\n        var eventPort = _this2.getEventPort(event);\n        var eventData = _this2.formatEventData(event, eventType);\n        if (event.source === _this2.iFrame.contentWindow) {\n          _this2.executeCallbacks(eventType, processEventData(eventType, eventData, _this2.thoughtSpotHost, _this2.el), eventPort);\n        }\n      });\n    }\n    /**\n     * Constructs the base URL string to load the ThoughtSpot app.\n     */\n  }, {\n    key: \"getEmbedBasePath\",\n    value: function getEmbedBasePath(query) {\n      var queryString = query;\n      if (this.shouldEncodeUrlQueryParams) {\n        queryString = \"?base64UrlEncodedFlags=\".concat(getEncodedQueryParamsString(queryString.substr(1)));\n      }\n      var basePath = [this.thoughtSpotHost, this.thoughtSpotV2Base, queryString].filter(function (x) {\n        return x.length > 0;\n      }).join('/');\n      return \"\".concat(basePath, \"#/embed\");\n    }\n    /**\n     * Common query params set for all the embed modes.\n     * @returns queryParams\n     */\n  }, {\n    key: \"getBaseQueryParams\",\n    value: function getBaseQueryParams() {\n      var _a, _b;\n      var queryParams = {};\n      var hostAppUrl = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host) || '';\n      // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n      // in any url param.\n      if (hostAppUrl.includes('localhost') || hostAppUrl.includes('127.0.0.1')) {\n        hostAppUrl = 'local-host';\n      }\n      queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n      queryParams[Param.ViewPortHeight] = window.innerHeight;\n      queryParams[Param.ViewPortWidth] = window.innerWidth;\n      queryParams[Param.Version] = version;\n      queryParams[Param.AuthType] = this.embedConfig.authType;\n      if (this.embedConfig.disableLoginRedirect === true || this.embedConfig.autoLogin === true) {\n        queryParams[Param.DisableLoginRedirect] = true;\n      }\n      if (this.embedConfig.authType === AuthType.EmbeddedSSO) {\n        queryParams[Param.ForceSAMLAutoRedirect] = true;\n      }\n      var _this$viewConfig = this.viewConfig,\n        disabledActions = _this$viewConfig.disabledActions,\n        disabledActionReason = _this$viewConfig.disabledActionReason,\n        hiddenActions = _this$viewConfig.hiddenActions,\n        visibleActions = _this$viewConfig.visibleActions,\n        showAlerts = _this$viewConfig.showAlerts,\n        additionalFlags = _this$viewConfig.additionalFlags,\n        locale = _this$viewConfig.locale,\n        customizations = _this$viewConfig.customizations;\n      if (Array.isArray(visibleActions) && Array.isArray(hiddenActions)) {\n        this.handleError('You cannot have both hidden actions and visible actions');\n        return queryParams;\n      }\n      // TODO remove embedConfig.customCssUrl\n      var cssUrlParam = ((_b = customizations === null || customizations === void 0 ? void 0 : customizations.style) === null || _b === void 0 ? void 0 : _b.customCSSUrl) || this.embedConfig.customCssUrl;\n      if (cssUrlParam) {\n        queryParams[Param.CustomCSSUrl] = cssUrlParam;\n      }\n      if (disabledActions === null || disabledActions === void 0 ? void 0 : disabledActions.length) {\n        queryParams[Param.DisableActions] = disabledActions;\n      }\n      if (disabledActionReason) {\n        queryParams[Param.DisableActionReason] = disabledActionReason;\n      }\n      queryParams[Param.HideActions] = [].concat(_toConsumableArray(this.defaultHiddenActions), _toConsumableArray(hiddenActions !== null && hiddenActions !== void 0 ? hiddenActions : []));\n      if (Array.isArray(visibleActions)) {\n        queryParams[Param.VisibleActions] = visibleActions;\n      }\n      if (showAlerts !== undefined) {\n        queryParams[Param.ShowAlerts] = showAlerts;\n      }\n      if (locale !== undefined) {\n        queryParams[Param.Locale] = locale;\n      }\n      if (additionalFlags && additionalFlags.constructor.name === 'Object') {\n        Object.assign(queryParams, additionalFlags);\n      }\n      return queryParams;\n    }\n    /**\n     * Constructs the base URL string to load v1 of the ThoughtSpot app.\n     * This is used for embedding Liveboards, visualizations, and full application.\n     * @param queryString The query string to append to the URL.\n     * @param isAppEmbed A Boolean parameter to specify if you are embedding\n     * the full application.\n     */\n  }, {\n    key: \"getV1EmbedBasePath\",\n    value: function getV1EmbedBasePath(queryString) {\n      var showPrimaryNavbar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var disableProfileAndHelp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isAppEmbed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var enableSearchAssist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var queryStringFrag = queryString ? \"&\".concat(queryString) : '';\n      var primaryNavParam = \"&primaryNavHidden=\".concat(!showPrimaryNavbar);\n      var disableProfileAndHelpParam = \"&profileAndHelpInNavBarHidden=\".concat(disableProfileAndHelp);\n      var enableSearchAssistParam = \"&\".concat(Param.EnableSearchAssist, \"=\").concat(enableSearchAssist);\n      var queryParams = \"?embedApp=true\".concat(isAppEmbed ? primaryNavParam : '').concat(isAppEmbed ? disableProfileAndHelpParam : '').concat(enableSearchAssist ? enableSearchAssistParam : '').concat(queryStringFrag);\n      if (this.shouldEncodeUrlQueryParams) {\n        queryParams = \"?base64UrlEncodedFlags=\".concat(getEncodedQueryParamsString(queryParams.substr(1)));\n      }\n      var path = \"\".concat(this.thoughtSpotHost, \"/\").concat(queryParams, \"#\");\n      if (!isAppEmbed) {\n        path = \"\".concat(path, \"/embed\");\n      }\n      return path;\n    }\n    /**\n     * Renders the embedded ThoughtSpot app in an iframe and sets up\n     * event listeners.\n     * @param url\n     * @param frameOptions\n     */\n  }, {\n    key: \"renderIFrame\",\n    value: function () {\n      var _renderIFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n        var _this3 = this;\n        var frameOptions,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              frameOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              if (!this.isError) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 3:\n              if (!this.thoughtSpotHost) {\n                this.throwInitError();\n              }\n              if (url.length > URL_MAX_LENGTH) {\n                // warn: The URL is too long\n              }\n              return _context.abrupt(\"return\", renderInQueue(function (nextInQueue) {\n                var _a;\n                var initTimestamp = Date.now();\n                _this3.executeCallbacks(EmbedEvent.Init, {\n                  data: {\n                    timestamp: initTimestamp\n                  },\n                  type: EmbedEvent.Init\n                });\n                uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n                return (_a = getAuthPromise()) === null || _a === void 0 ? void 0 : _a.then(function (isLoggedIn) {\n                  if (!isLoggedIn) {\n                    _this3.el.innerHTML = _this3.embedConfig.loginFailedMessage;\n                    return;\n                  }\n                  uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE);\n                  _this3.iFrame = _this3.iFrame || document.createElement('iframe');\n                  _this3.iFrame.src = url;\n                  // according to screenfull.js documentation\n                  // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n                  _this3.iFrame.allowFullscreen = true;\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  _this3.iFrame.webkitallowfullscreen = true;\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  _this3.iFrame.mozallowfullscreen = true;\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  _this3.iFrame.allow = 'clipboard-read; clipboard-write';\n                  var frameHeight = frameOptions.height,\n                    frameWidth = frameOptions.width,\n                    restParams = _objectWithoutProperties(frameOptions, _excluded);\n                  var width = getCssDimension(frameWidth || DEFAULT_EMBED_WIDTH);\n                  var height = getCssDimension(frameHeight || DEFAULT_EMBED_HEIGHT);\n                  setAttributes(_this3.iFrame, restParams);\n                  _this3.iFrame.style.width = \"\".concat(width);\n                  _this3.iFrame.style.height = \"\".concat(height);\n                  _this3.iFrame.style.border = '0';\n                  _this3.iFrame.name = 'ThoughtSpot Embedded Analytics';\n                  _this3.iFrame.addEventListener('load', function () {\n                    nextInQueue();\n                    var loadTimestamp = Date.now();\n                    _this3.executeCallbacks(EmbedEvent.Load, {\n                      data: {\n                        timestamp: loadTimestamp\n                      },\n                      type: EmbedEvent.Load\n                    });\n                    uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE, {\n                      timeTookToLoad: loadTimestamp - initTimestamp\n                    });\n                  });\n                  _this3.iFrame.addEventListener('error', function () {\n                    nextInQueue();\n                  });\n                  _this3.el.innerHTML = '';\n                  _this3.el.appendChild(_this3.iFrame);\n                  var prefetchIframe = document.querySelectorAll('.prefetchIframe');\n                  if (prefetchIframe.length) {\n                    prefetchIframe.forEach(function (el) {\n                      el.remove();\n                    });\n                  }\n                  _this3.subscribeToEvents();\n                }).catch(function (error) {\n                  nextInQueue();\n                  uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED);\n                  _this3.el.innerHTML = _this3.embedConfig.loginFailedMessage;\n                  _this3.handleError(error);\n                });\n              }));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function renderIFrame(_x) {\n        return _renderIFrame.apply(this, arguments);\n      }\n      return renderIFrame;\n    }()\n    /**\n     * Sets the height of the iframe\n     * @param height The height in pixels\n     */\n  }, {\n    key: \"setIFrameHeight\",\n    value: function setIFrameHeight(height) {\n      this.iFrame.style.height = \"\".concat(height, \"px\");\n    }\n    /**\n     * Executes all registered event handlers for a particular event type\n     * @param eventType The event type\n     * @param data The payload invoked with the event handler\n     * @param eventPort The event Port for a specific MessageChannel\n     */\n  }, {\n    key: \"executeCallbacks\",\n    value: function executeCallbacks(eventType, data, eventPort) {\n      var _this4 = this;\n      var callbacks = this.eventHandlerMap.get(eventType) || [];\n      var allHandlers = this.eventHandlerMap.get(EmbedEvent.ALL) || [];\n      callbacks.push.apply(callbacks, _toConsumableArray(allHandlers));\n      var dataStatus = (data === null || data === void 0 ? void 0 : data.status) || embedEventStatus.END;\n      callbacks.forEach(function (callbackObj) {\n        if (callbackObj.options.start && dataStatus === embedEventStatus.START ||\n        // When start status is true it trigger only start releated payload\n        !callbackObj.options.start && dataStatus === embedEventStatus.END // When start status is false it trigger only end releated payload\n        ) {\n          callbackObj.callback(data, function (payload) {\n            _this4.triggerEventOnPort(eventPort, payload);\n          });\n        }\n      });\n    }\n    /**\n     * Returns the ThoughtSpot hostname or IP address.\n     */\n  }, {\n    key: \"getThoughtSpotHost\",\n    value: function getThoughtSpotHost() {\n      return this.thoughtSpotHost;\n    }\n    /**\n     * Gets the v1 event type (if applicable) for the EmbedEvent type\n     * @param eventType The v2 event type\n     * @returns The corresponding v1 event type if one exists\n     * or else the v2 event type itself\n     */\n  }, {\n    key: \"getCompatibleEventType\",\n    value: function getCompatibleEventType(eventType) {\n      return V1EventMap[eventType] || eventType;\n    }\n    /**\n     * Calculates the iframe center for the current visible viewPort\n     * of iframe using Scroll position of Host App, offsetTop for iframe\n     * in Host app. ViewPort height of the tab.\n     * @returns iframe Center in visible viewport,\n     *  Iframe height,\n     *  View port height.\n     */\n  }, {\n    key: \"getIframeCenter\",\n    value: function getIframeCenter() {\n      var offsetTopClient = getOffsetTop(this.iFrame);\n      var scrollTopClient = window.scrollY;\n      var viewPortHeight = window.innerHeight;\n      var iframeHeight = this.iFrame.offsetHeight;\n      var iframeScrolled = scrollTopClient - offsetTopClient;\n      var iframeVisibleViewPort;\n      var iframeOffset;\n      if (iframeScrolled < 0) {\n        iframeVisibleViewPort = viewPortHeight - (offsetTopClient - scrollTopClient);\n        iframeVisibleViewPort = Math.min(iframeHeight, iframeVisibleViewPort);\n        iframeOffset = 0;\n      } else {\n        iframeVisibleViewPort = Math.min(iframeHeight - iframeScrolled, viewPortHeight);\n        iframeOffset = iframeScrolled;\n      }\n      var iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n      return {\n        iframeCenter: iframeCenter,\n        iframeScrolled: iframeScrolled,\n        iframeHeight: iframeHeight,\n        viewPortHeight: viewPortHeight,\n        iframeVisibleViewPort: iframeVisibleViewPort\n      };\n    }\n    /**\n     * Registers an event listener to trigger an alert when the ThoughtSpot app\n     * sends an event of a particular message type to the host application.\n     *\n     * @param messageType The message type\n     * @param callback A callback as a function\n     * @param options The message options\n     */\n  }, {\n    key: \"on\",\n    value: function on(messageType, callback) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        start: false\n      };\n      if (this.isRendered) {\n        this.handleError('Please register event handlers before calling render');\n      }\n      var callbacks = this.eventHandlerMap.get(messageType) || [];\n      callbacks.push({\n        options: options,\n        callback: callback\n      });\n      this.eventHandlerMap.set(messageType, callbacks);\n      return this;\n    }\n    /**\n     * Triggers an event on specific Port registered against\n     * for the EmbedEvent\n     * @param eventType The message type\n     * @param data The payload to send\n     */\n  }, {\n    key: \"triggerEventOnPort\",\n    value: function triggerEventOnPort(eventPort, payload) {\n      if (eventPort) {\n        try {\n          eventPort.postMessage({\n            type: payload.type,\n            data: payload.data\n          });\n        } catch (e) {\n          eventPort.postMessage({\n            error: e\n          });\n          console.log(e);\n        }\n      } else {\n        console.log('Event Port is not defined');\n      }\n    }\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n  }, {\n    key: \"trigger\",\n    value: function trigger(messageType, data) {\n      uploadMixpanelEvent(\"\".concat(MIXPANEL_EVENT.VISUAL_SDK_TRIGGER, \"-\").concat(messageType));\n      return processTrigger(this.iFrame, messageType, this.thoughtSpotHost, data);\n    }\n    /**\n     * Marks the ThoughtSpot object to have been rendered\n     * Needs to be overridden by subclasses to do the actual\n     * rendering of the iframe.\n     * @param args\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.isRendered = true;\n      return this;\n    }\n    /**\n     * Get the Post Url Params for THOUGHTSPOT from the current\n     * host app URL.\n     * THOUGHTSPOT URL params starts with a prefix \"ts-\"\n     * @version SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n  }, {\n    key: \"getThoughtSpotPostUrlParams\",\n    value: function getThoughtSpotPostUrlParams() {\n      var urlHash = window.location.hash;\n      var queryParams = window.location.search;\n      var postHashParams = urlHash.split('?');\n      var postURLParams = postHashParams[postHashParams.length - 1];\n      var queryParamsObj = new URLSearchParams(queryParams);\n      var postURLParamsObj = new URLSearchParams(postURLParams);\n      var params = new URLSearchParams();\n      var addKeyValuePairCb = function addKeyValuePairCb(value, key) {\n        if (key.startsWith(THOUGHTSPOT_PARAM_PREFIX)) {\n          params.append(key, value);\n        }\n      };\n      queryParamsObj.forEach(addKeyValuePairCb);\n      postURLParamsObj.forEach(addKeyValuePairCb);\n      var tsParams = params.toString();\n      tsParams = tsParams ? \"?\".concat(tsParams) : '';\n      return tsParams;\n    }\n  }]);\n  return TsEmbed;\n}();\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\nexport var V1Embed = /*#__PURE__*/function (_TsEmbed) {\n  _inherits(V1Embed, _TsEmbed);\n  var _super = _createSuper(V1Embed);\n  function V1Embed(domSelector, viewConfig) {\n    var _this5;\n    _classCallCheck(this, V1Embed);\n    _this5 = _super.call(this, domSelector, viewConfig);\n    _this5.viewConfig = viewConfig;\n    return _this5;\n  }\n  /**\n   * Render the app in an iframe and set up event handlers\n   * @param iframeSrc\n   */\n  _createClass(V1Embed, [{\n    key: \"renderV1Embed\",\n    value: function renderV1Embed(iframeSrc) {\n      return this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n    }\n    // @override\n  }, {\n    key: \"on\",\n    value: function on(messageType, callback) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        start: false\n      };\n      var eventType = this.getCompatibleEventType(messageType);\n      return _get(_getPrototypeOf(V1Embed.prototype), \"on\", this).call(this, eventType, callback, options);\n    }\n  }]);\n  return V1Embed;\n}(TsEmbed);","map":{"version":3,"mappings":"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","names":["getEncodedQueryParamsString","getCssDimension","getOffsetTop","embedEventStatus","setAttributes","getCustomisations","getDOMNode","getThoughtSpotHost","URL_MAX_LENGTH","DEFAULT_EMBED_WIDTH","DEFAULT_EMBED_HEIGHT","getV2BasePath","AuthType","EmbedEvent","Action","Param","uploadMixpanelEvent","MIXPANEL_EVENT","processEventData","processTrigger","pkgInfo","getAuthPromise","getEmbedConfig","renderInQueue","version","THOUGHTSPOT_PARAM_PREFIX","V1EventMap","Data","V1Data","TsEmbed","domSelector","viewConfig","ReportError","_","responder","type","APP_INIT","data","customisations","embedConfig","on","appInitCb","el","thoughtSpotHost","thoughtSpotV2Base","eventHandlerMap","Map","isError","shouldEncodeUrlQueryParams","registerAppInit","handleError","error","executeCallbacks","Error","console","event","__type","ports","length","eventType","eventData","payload","window","addEventListener","getEventType","eventPort","getEventPort","formatEventData","source","iFrame","contentWindow","query","queryString","substr","basePath","filter","x","join","queryParams","hostAppUrl","location","host","includes","HostAppUrl","encodeURIComponent","ViewPortHeight","innerHeight","ViewPortWidth","innerWidth","Version","authType","disableLoginRedirect","autoLogin","DisableLoginRedirect","EmbeddedSSO","ForceSAMLAutoRedirect","disabledActions","disabledActionReason","hiddenActions","visibleActions","showAlerts","additionalFlags","locale","customizations","Array","isArray","cssUrlParam","style","customCSSUrl","customCssUrl","CustomCSSUrl","DisableActions","DisableActionReason","HideActions","defaultHiddenActions","VisibleActions","undefined","ShowAlerts","Locale","constructor","name","Object","assign","showPrimaryNavbar","disableProfileAndHelp","isAppEmbed","enableSearchAssist","queryStringFrag","primaryNavParam","disableProfileAndHelpParam","enableSearchAssistParam","EnableSearchAssist","path","url","frameOptions","throwInitError","nextInQueue","initTimestamp","Date","now","Init","timestamp","VISUAL_SDK_RENDER_START","then","isLoggedIn","innerHTML","loginFailedMessage","VISUAL_SDK_RENDER_COMPLETE","document","createElement","src","allowFullscreen","webkitallowfullscreen","mozallowfullscreen","allow","frameHeight","height","frameWidth","width","restParams","border","loadTimestamp","Load","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","timeTookToLoad","appendChild","prefetchIframe","querySelectorAll","forEach","remove","subscribeToEvents","catch","VISUAL_SDK_RENDER_FAILED","callbacks","get","allHandlers","ALL","push","dataStatus","status","END","callbackObj","options","start","START","callback","triggerEventOnPort","offsetTopClient","scrollTopClient","scrollY","viewPortHeight","iframeHeight","offsetHeight","iframeScrolled","iframeVisibleViewPort","iframeOffset","Math","min","iframeCenter","messageType","isRendered","set","postMessage","e","log","VISUAL_SDK_TRIGGER","urlHash","hash","search","postHashParams","split","postURLParams","queryParamsObj","URLSearchParams","postURLParamsObj","params","addKeyValuePairCb","value","key","startsWith","append","tsParams","toString","V1Embed","iframeSrc","renderIFrame","frameParams","getCompatibleEventType"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\ts-embed.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport {\n    getEncodedQueryParamsString,\n    getCssDimension,\n    getOffsetTop,\n    embedEventStatus,\n    setAttributes,\n    getCustomisations,\n    getDOMNode,\n} from '../utils';\nimport {\n    getThoughtSpotHost,\n    URL_MAX_LENGTH,\n    DEFAULT_EMBED_WIDTH,\n    DEFAULT_EMBED_HEIGHT,\n    getV2BasePath,\n} from '../config';\nimport {\n    AuthType,\n    DOMSelector,\n    HostEvent,\n    EmbedEvent,\n    MessageCallback,\n    Action,\n    Param,\n    EmbedConfig,\n    MessageOptions,\n    MessagePayload,\n    MessageCallbackObj,\n    ViewConfig,\n    FrameParams,\n} from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { processEventData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport pkgInfo from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\n\nconst { version } = pkgInfo;\n\n/**\n * Global prefix for all Thoughtspot postHash Params.\n */\nexport const THOUGHTSPOT_PARAM_PREFIX = 'ts-';\n\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\nconst V1EventMap = {\n    [EmbedEvent.Data]: [EmbedEvent.V1Data],\n};\n\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\nexport class TsEmbed {\n    /**\n     * The DOM node where the ThoughtSpot app is to be embedded.\n     */\n    private el: Element;\n\n    /**\n     * A reference to the iframe within which the ThoughtSpot app\n     * will be rendered.\n     */\n    protected iFrame: HTMLIFrameElement;\n\n    protected viewConfig: ViewConfig;\n\n    protected embedConfig: EmbedConfig;\n\n    /**\n     * The ThoughtSpot hostname or IP address\n     */\n    protected thoughtSpotHost: string;\n\n    /*\n     * This is the base to access ThoughtSpot V2.\n     */\n    protected thoughtSpotV2Base: string;\n\n    /**\n     * A map of event handlers for particular message types triggered\n     * by the embedded app; multiple event handlers can be registered\n     * against a particular message type.\n     */\n    private eventHandlerMap: Map<string, MessageCallbackObj[]>;\n\n    /**\n     * A flag that is set to true post render.\n     */\n    private isRendered: boolean;\n\n    /**\n     * A flag to mark if an error has occurred.\n     */\n    private isError: boolean;\n\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    private shouldEncodeUrlQueryParams = false;\n\n    private defaultHiddenActions = [Action.ReportError];\n\n    constructor(domSelector: DOMSelector, viewConfig?: ViewConfig) {\n        this.el = getDOMNode(domSelector);\n        // TODO: handle error\n        this.embedConfig = getEmbedConfig();\n        this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n        this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n        this.eventHandlerMap = new Map();\n        this.isError = false;\n        this.viewConfig = viewConfig;\n        this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n        this.registerAppInit();\n    }\n\n    /**\n     * Throws error encountered during initialization.\n     */\n    private throwInitError() {\n        this.handleError('You need to init the ThoughtSpot SDK module first');\n    }\n\n    /**\n     * Handles errors within the SDK\n     * @param error The error message or object\n     */\n    protected handleError(error: string | Record<string, unknown>) {\n        this.isError = true;\n        this.executeCallbacks(EmbedEvent.Error, {\n            error,\n        });\n        // Log error\n        console.error(error);\n    }\n\n    /**\n     * Extracts the type field from the event payload\n     * @param event The window message event\n     */\n    private getEventType(event: MessageEvent) {\n        // eslint-disable-next-line no-underscore-dangle\n        return event.data?.type || event.data?.__type;\n    }\n\n    /**\n     * Extracts the port field from the event payload\n     * @param event  The window message event\n     * @returns\n     */\n    private getEventPort(event: MessageEvent) {\n        if (event.ports.length && event.ports[0]) {\n            return event.ports[0];\n        }\n        return null;\n    }\n\n    /**\n     * fix for ts7.sep.cl\n     * will be removed for ts7.oct.cl\n     * @hidden\n     */\n    private formatEventData(event: MessageEvent, eventType: string) {\n        const eventData = {\n            ...event.data,\n            type: eventType,\n        };\n        if (!eventData.data) {\n            eventData.data = event.data.payload;\n        }\n        return eventData;\n    }\n\n    /**\n     * Adds a global event listener to window for \"message\" events.\n     * ThoughtSpot detects if a particular event is targeted to this\n     * embed instance through an identifier contained in the payload,\n     * and executes the registered callbacks accordingly.\n     */\n    private subscribeToEvents() {\n        window.addEventListener('message', (event) => {\n            const eventType = this.getEventType(event);\n            const eventPort = this.getEventPort(event);\n            const eventData = this.formatEventData(event, eventType);\n            if (event.source === this.iFrame.contentWindow) {\n                this.executeCallbacks(\n                    eventType,\n                    processEventData(\n                        eventType,\n                        eventData,\n                        this.thoughtSpotHost,\n                        this.el,\n                    ),\n                    eventPort,\n                );\n            }\n        });\n    }\n\n    /**\n     * Send Custom style as part of payload of APP_INIT\n     */\n    private appInitCb = (_: any, responder: any) => {\n        responder({\n            type: EmbedEvent.APP_INIT,\n            data: {\n                customisations: getCustomisations(\n                    this.embedConfig,\n                    this.viewConfig,\n                ),\n            },\n        });\n    };\n\n    /**\n     * Register APP_INIT event and sendback init payload\n     */\n    private registerAppInit = () => {\n        this.on(EmbedEvent.APP_INIT, this.appInitCb);\n    };\n\n    /**\n     * Constructs the base URL string to load the ThoughtSpot app.\n     */\n    protected getEmbedBasePath(query: string): string {\n        let queryString = query;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(\n                queryString.substr(1),\n            )}`;\n        }\n        const basePath = [\n            this.thoughtSpotHost,\n            this.thoughtSpotV2Base,\n            queryString,\n        ]\n            .filter((x) => x.length > 0)\n            .join('/');\n\n        return `${basePath}#/embed`;\n    }\n\n    /**\n     * Common query params set for all the embed modes.\n     * @returns queryParams\n     */\n    protected getBaseQueryParams() {\n        const queryParams = {};\n        let hostAppUrl = window?.location?.host || '';\n\n        // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n        // in any url param.\n        if (\n            hostAppUrl.includes('localhost') ||\n            hostAppUrl.includes('127.0.0.1')\n        ) {\n            hostAppUrl = 'local-host';\n        }\n        queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n        queryParams[Param.ViewPortHeight] = window.innerHeight;\n        queryParams[Param.ViewPortWidth] = window.innerWidth;\n        queryParams[Param.Version] = version;\n        queryParams[Param.AuthType] = this.embedConfig.authType;\n        if (\n            this.embedConfig.disableLoginRedirect === true ||\n            this.embedConfig.autoLogin === true\n        ) {\n            queryParams[Param.DisableLoginRedirect] = true;\n        }\n        if (this.embedConfig.authType === AuthType.EmbeddedSSO) {\n            queryParams[Param.ForceSAMLAutoRedirect] = true;\n        }\n\n        const {\n            disabledActions,\n            disabledActionReason,\n            hiddenActions,\n            visibleActions,\n            showAlerts,\n            additionalFlags,\n            locale,\n            customizations,\n        } = this.viewConfig;\n\n        if (Array.isArray(visibleActions) && Array.isArray(hiddenActions)) {\n            this.handleError(\n                'You cannot have both hidden actions and visible actions',\n            );\n            return queryParams;\n        }\n\n        // TODO remove embedConfig.customCssUrl\n        const cssUrlParam =\n            customizations?.style?.customCSSUrl ||\n            this.embedConfig.customCssUrl;\n\n        if (cssUrlParam) {\n            queryParams[Param.CustomCSSUrl] = cssUrlParam;\n        }\n\n        if (disabledActions?.length) {\n            queryParams[Param.DisableActions] = disabledActions;\n        }\n        if (disabledActionReason) {\n            queryParams[Param.DisableActionReason] = disabledActionReason;\n        }\n        queryParams[Param.HideActions] = [\n            ...this.defaultHiddenActions,\n            ...(hiddenActions ?? []),\n        ];\n        if (Array.isArray(visibleActions)) {\n            queryParams[Param.VisibleActions] = visibleActions;\n        }\n        if (showAlerts !== undefined) {\n            queryParams[Param.ShowAlerts] = showAlerts;\n        }\n        if (locale !== undefined) {\n            queryParams[Param.Locale] = locale;\n        }\n        if (additionalFlags && additionalFlags.constructor.name === 'Object') {\n            Object.assign(queryParams, additionalFlags);\n        }\n        return queryParams;\n    }\n\n    /**\n     * Constructs the base URL string to load v1 of the ThoughtSpot app.\n     * This is used for embedding Liveboards, visualizations, and full application.\n     * @param queryString The query string to append to the URL.\n     * @param isAppEmbed A Boolean parameter to specify if you are embedding\n     * the full application.\n     */\n    protected getV1EmbedBasePath(\n        queryString: string,\n        showPrimaryNavbar = false,\n        disableProfileAndHelp = false,\n        isAppEmbed = false,\n        enableSearchAssist = false,\n    ): string {\n        const queryStringFrag = queryString ? `&${queryString}` : '';\n        const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n        const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n        const enableSearchAssistParam = `&${Param.EnableSearchAssist}=${enableSearchAssist}`;\n        let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${\n            isAppEmbed ? disableProfileAndHelpParam : ''\n        }${\n            enableSearchAssist ? enableSearchAssistParam : ''\n        }${queryStringFrag}`;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(\n                queryParams.substr(1),\n            )}`;\n        }\n        let path = `${this.thoughtSpotHost}/${queryParams}#`;\n        if (!isAppEmbed) {\n            path = `${path}/embed`;\n        }\n        return path;\n    }\n\n    /**\n     * Renders the embedded ThoughtSpot app in an iframe and sets up\n     * event listeners.\n     * @param url\n     * @param frameOptions\n     */\n    protected async renderIFrame(\n        url: string,\n        frameOptions: FrameParams = {},\n    ): Promise<any> {\n        if (this.isError) {\n            return null;\n        }\n        if (!this.thoughtSpotHost) {\n            this.throwInitError();\n        }\n        if (url.length > URL_MAX_LENGTH) {\n            // warn: The URL is too long\n        }\n\n        return renderInQueue((nextInQueue) => {\n            const initTimestamp = Date.now();\n\n            this.executeCallbacks(EmbedEvent.Init, {\n                data: {\n                    timestamp: initTimestamp,\n                },\n                type: EmbedEvent.Init,\n            });\n\n            uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n            return getAuthPromise()\n                ?.then((isLoggedIn: boolean) => {\n                    if (!isLoggedIn) {\n                        this.el.innerHTML = this.embedConfig.loginFailedMessage;\n                        return;\n                    }\n\n                    uploadMixpanelEvent(\n                        MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE,\n                    );\n\n                    this.iFrame =\n                        this.iFrame || document.createElement('iframe');\n\n                    this.iFrame.src = url;\n\n                    // according to screenfull.js documentation\n                    // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n                    this.iFrame.allowFullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.webkitallowfullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.mozallowfullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.allow = 'clipboard-read; clipboard-write';\n                    const {\n                        height: frameHeight,\n                        width: frameWidth,\n                        ...restParams\n                    } = frameOptions;\n                    const width = getCssDimension(\n                        frameWidth || DEFAULT_EMBED_WIDTH,\n                    );\n                    const height = getCssDimension(\n                        frameHeight || DEFAULT_EMBED_HEIGHT,\n                    );\n                    setAttributes(this.iFrame, restParams);\n\n                    this.iFrame.style.width = `${width}`;\n                    this.iFrame.style.height = `${height}`;\n                    this.iFrame.style.border = '0';\n                    this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n                    this.iFrame.addEventListener('load', () => {\n                        nextInQueue();\n                        const loadTimestamp = Date.now();\n                        this.executeCallbacks(EmbedEvent.Load, {\n                            data: {\n                                timestamp: loadTimestamp,\n                            },\n                            type: EmbedEvent.Load,\n                        });\n                        uploadMixpanelEvent(\n                            MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE,\n                            {\n                                timeTookToLoad: loadTimestamp - initTimestamp,\n                            },\n                        );\n                    });\n                    this.iFrame.addEventListener('error', () => {\n                        nextInQueue();\n                    });\n                    this.el.innerHTML = '';\n                    this.el.appendChild(this.iFrame);\n                    const prefetchIframe = document.querySelectorAll(\n                        '.prefetchIframe',\n                    );\n                    if (prefetchIframe.length) {\n                        prefetchIframe.forEach((el) => {\n                            el.remove();\n                        });\n                    }\n                    this.subscribeToEvents();\n                })\n                .catch((error) => {\n                    nextInQueue();\n                    uploadMixpanelEvent(\n                        MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED,\n                    );\n                    this.el.innerHTML = this.embedConfig.loginFailedMessage;\n                    this.handleError(error);\n                });\n        });\n    }\n\n    /**\n     * Sets the height of the iframe\n     * @param height The height in pixels\n     */\n    protected setIFrameHeight(height: number): void {\n        this.iFrame.style.height = `${height}px`;\n    }\n\n    /**\n     * Executes all registered event handlers for a particular event type\n     * @param eventType The event type\n     * @param data The payload invoked with the event handler\n     * @param eventPort The event Port for a specific MessageChannel\n     */\n    protected executeCallbacks(\n        eventType: EmbedEvent,\n        data: any,\n        eventPort?: MessagePort | void,\n    ): void {\n        const callbacks = this.eventHandlerMap.get(eventType) || [];\n        const allHandlers = this.eventHandlerMap.get(EmbedEvent.ALL) || [];\n        callbacks.push(...allHandlers);\n        const dataStatus = data?.status || embedEventStatus.END;\n        callbacks.forEach((callbackObj) => {\n            if (\n                (callbackObj.options.start &&\n                    dataStatus === embedEventStatus.START) || // When start status is true it trigger only start releated payload\n                (!callbackObj.options.start &&\n                    dataStatus === embedEventStatus.END) // When start status is false it trigger only end releated payload\n            ) {\n                callbackObj.callback(data, (payload) => {\n                    this.triggerEventOnPort(eventPort, payload);\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the ThoughtSpot hostname or IP address.\n     */\n    protected getThoughtSpotHost(): string {\n        return this.thoughtSpotHost;\n    }\n\n    /**\n     * Gets the v1 event type (if applicable) for the EmbedEvent type\n     * @param eventType The v2 event type\n     * @returns The corresponding v1 event type if one exists\n     * or else the v2 event type itself\n     */\n    protected getCompatibleEventType(eventType: EmbedEvent): EmbedEvent {\n        return V1EventMap[eventType] || eventType;\n    }\n\n    /**\n     * Calculates the iframe center for the current visible viewPort\n     * of iframe using Scroll position of Host App, offsetTop for iframe\n     * in Host app. ViewPort height of the tab.\n     * @returns iframe Center in visible viewport,\n     *  Iframe height,\n     *  View port height.\n     */\n    protected getIframeCenter() {\n        const offsetTopClient = getOffsetTop(this.iFrame);\n        const scrollTopClient = window.scrollY;\n        const viewPortHeight = window.innerHeight;\n        const iframeHeight = this.iFrame.offsetHeight;\n        const iframeScrolled = scrollTopClient - offsetTopClient;\n        let iframeVisibleViewPort;\n        let iframeOffset;\n\n        if (iframeScrolled < 0) {\n            iframeVisibleViewPort =\n                viewPortHeight - (offsetTopClient - scrollTopClient);\n            iframeVisibleViewPort = Math.min(\n                iframeHeight,\n                iframeVisibleViewPort,\n            );\n            iframeOffset = 0;\n        } else {\n            iframeVisibleViewPort = Math.min(\n                iframeHeight - iframeScrolled,\n                viewPortHeight,\n            );\n            iframeOffset = iframeScrolled;\n        }\n        const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n        return {\n            iframeCenter,\n            iframeScrolled,\n            iframeHeight,\n            viewPortHeight,\n            iframeVisibleViewPort,\n        };\n    }\n\n    /**\n     * Registers an event listener to trigger an alert when the ThoughtSpot app\n     * sends an event of a particular message type to the host application.\n     *\n     * @param messageType The message type\n     * @param callback A callback as a function\n     * @param options The message options\n     */\n    public on(\n        messageType: EmbedEvent,\n        callback: MessageCallback,\n        options: MessageOptions = { start: false },\n    ): typeof TsEmbed.prototype {\n        if (this.isRendered) {\n            this.handleError(\n                'Please register event handlers before calling render',\n            );\n        }\n        const callbacks = this.eventHandlerMap.get(messageType) || [];\n        callbacks.push({ options, callback });\n        this.eventHandlerMap.set(messageType, callbacks);\n        return this;\n    }\n\n    /**\n     * Triggers an event on specific Port registered against\n     * for the EmbedEvent\n     * @param eventType The message type\n     * @param data The payload to send\n     */\n    private triggerEventOnPort(eventPort: MessagePort | void, payload: any) {\n        if (eventPort) {\n            try {\n                eventPort.postMessage({\n                    type: payload.type,\n                    data: payload.data,\n                });\n            } catch (e) {\n                eventPort.postMessage({ error: e });\n                console.log(e);\n            }\n        } else {\n            console.log('Event Port is not defined');\n        }\n    }\n\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n    public trigger(messageType: HostEvent, data: any): Promise<any> {\n        uploadMixpanelEvent(\n            `${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`,\n        );\n        return processTrigger(\n            this.iFrame,\n            messageType,\n            this.thoughtSpotHost,\n            data,\n        );\n    }\n\n    /**\n     * Marks the ThoughtSpot object to have been rendered\n     * Needs to be overridden by subclasses to do the actual\n     * rendering of the iframe.\n     * @param args\n     */\n    public render(): TsEmbed {\n        this.isRendered = true;\n\n        return this;\n    }\n\n    /**\n     * Get the Post Url Params for THOUGHTSPOT from the current\n     * host app URL.\n     * THOUGHTSPOT URL params starts with a prefix \"ts-\"\n     * @version SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n    public getThoughtSpotPostUrlParams(): string {\n        const urlHash = window.location.hash;\n        const queryParams = window.location.search;\n        const postHashParams = urlHash.split('?');\n        const postURLParams = postHashParams[postHashParams.length - 1];\n        const queryParamsObj = new URLSearchParams(queryParams);\n        const postURLParamsObj = new URLSearchParams(postURLParams);\n        const params = new URLSearchParams();\n\n        const addKeyValuePairCb = (value: string, key: string): void => {\n            if (key.startsWith(THOUGHTSPOT_PARAM_PREFIX)) {\n                params.append(key, value);\n            }\n        };\n        queryParamsObj.forEach(addKeyValuePairCb);\n        postURLParamsObj.forEach(addKeyValuePairCb);\n\n        let tsParams = params.toString();\n        tsParams = tsParams ? `?${tsParams}` : '';\n\n        return tsParams;\n    }\n}\n\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\nexport class V1Embed extends TsEmbed {\n    protected viewConfig: ViewConfig;\n\n    constructor(domSelector: DOMSelector, viewConfig: ViewConfig) {\n        super(domSelector, viewConfig);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Render the app in an iframe and set up event handlers\n     * @param iframeSrc\n     */\n    protected renderV1Embed(iframeSrc: string): any {\n        return this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n    }\n\n    // @override\n    public on(\n        messageType: EmbedEvent,\n        callback: MessageCallback,\n        options: MessageOptions = { start: false },\n    ): typeof TsEmbed.prototype {\n        const eventType = this.getCompatibleEventType(messageType);\n\n        return super.on(eventType, callback, options);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}