{"ast":null,"code":"/* eslint-disable import/no-mutable-exports */\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport EventEmitter from 'eventemitter3';\nimport uniq from 'lodash/uniq';\nimport { getThoughtSpotHost } from '../config';\nimport { AuthType, PrefetchFeatures } from '../types';\nimport { authenticate, logout as _logout, AuthFailureType, AuthStatus } from '../auth';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nlet config = {};\nconst CONFIG_DEFAULTS = {\n  loginFailedMessage: 'Not logged in',\n  authTriggerText: 'Authorize',\n  authType: AuthType.None\n};\nexport let authPromise;\nexport const getEmbedConfig = () => config;\nexport const getAuthPromise = () => authPromise;\nlet authEE;\nexport function notifyAuthSDKSuccess() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n  authEE.emit(AuthStatus.SDK_SUCCESS);\n}\nexport function notifyAuthSuccess() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n  authEE.emit(AuthStatus.SUCCESS);\n}\nexport function notifyAuthFailure(failureType) {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n  authEE.emit(AuthStatus.FAILURE, failureType);\n}\nexport function notifyLogout() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n  authEE.emit(AuthStatus.LOGOUT);\n}\n/**\n * Perform authentication on the ThoughtSpot app as applicable.\n */\nexport const handleAuth = () => {\n  authPromise = authenticate(config);\n  authPromise.then(isLoggedIn => {\n    if (!isLoggedIn) {\n      notifyAuthFailure(AuthFailureType.SDK);\n    } else {\n      notifyAuthSDKSuccess();\n    }\n  }, () => {\n    notifyAuthFailure(AuthFailureType.SDK);\n  });\n  return authPromise;\n};\nconst hostUrlToFeatureUrl = {\n  [PrefetchFeatures.SearchEmbed]: url => `${url}v2/#/embed/answer`,\n  [PrefetchFeatures.LiveboardEmbed]: url => url,\n  [PrefetchFeatures.FullApp]: url => url,\n  [PrefetchFeatures.VizEmbed]: url => url\n};\n/**\n * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.\n * @param url The URL provided for prefetch\n * @param prefetchFeatures Specify features which needs to be prefetched.\n * @version SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 7.2.1\n */\nexport const prefetch = (url, prefetchFeatures) => {\n  if (url === '') {\n    // eslint-disable-next-line no-console\n    console.warn('The prefetch method does not have a valid URL');\n  } else {\n    const features = prefetchFeatures || [PrefetchFeatures.FullApp];\n    let hostUrl = url || config.thoughtSpotHost;\n    hostUrl = hostUrl[hostUrl.length - 1] === '/' ? hostUrl : `${hostUrl}/`;\n    uniq(features.map(feature => hostUrlToFeatureUrl[feature](hostUrl))).forEach((prefetchUrl, index) => {\n      const iFrame = document.createElement('iframe');\n      iFrame.src = prefetchUrl;\n      iFrame.style.width = '0';\n      iFrame.style.height = '0';\n      iFrame.style.border = '0';\n      iFrame.classList.add('prefetchIframe');\n      iFrame.classList.add(`prefetchIframeNum-${index}`);\n      document.body.appendChild(iFrame);\n    });\n  }\n};\nfunction sanity(embedConfig) {\n  if (embedConfig.thoughtSpotHost === undefined) {\n    throw new Error('ThoughtSpot host not provided');\n  }\n  if (embedConfig.authType === AuthType.TrustedAuthToken) {\n    if (!embedConfig.username) {\n      throw new Error('Username not provided with Trusted auth');\n    }\n    if (!embedConfig.authEndpoint && typeof embedConfig.getAuthToken !== 'function') {\n      throw new Error('Trusted auth should provide either authEndpoint or getAuthToken');\n    }\n  }\n  if (embedConfig.noRedirect && !embedConfig.authTriggerContainer) {\n    throw new Error('authTriggerContainer not provided with noRedirect');\n  }\n}\n/**\n * Initializes the Visual Embed SDK globally and perform\n * authentication if applicable.\n * @param embedConfig The configuration object containing ThoughtSpot host,\n * authentication mechanism and so on.\n * example: authStatus = init(config);\n * authStatus.on(AuthStatus.FAILURE, (reason) => { // do something here });\n * @returns event emitter which emits events on authentication success, failure and logout. See {@link AuthStatus}\n * @version SDK: 1.0.0 | ThoughtSpot ts7.april.cl, 7.2.1\n */\nexport const init = embedConfig => {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  sanity(embedConfig);\n  config = {\n    ...CONFIG_DEFAULTS,\n    ...embedConfig,\n    thoughtSpotHost: getThoughtSpotHost(embedConfig)\n  };\n  authEE = new EventEmitter();\n  handleAuth();\n  uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_CALLED_INIT, {\n    authType: config.authType,\n    host: config.thoughtSpotHost,\n    usedCustomizationSheet: ((_b = (_a = embedConfig.customizations) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.customCSSUrl) != null,\n    usedCustomizationVariables: ((_e = (_d = (_c = embedConfig.customizations) === null || _c === void 0 ? void 0 : _c.style) === null || _d === void 0 ? void 0 : _d.customCSS) === null || _e === void 0 ? void 0 : _e.variables) != null,\n    usedCustomizationRules: ((_h = (_g = (_f = embedConfig.customizations) === null || _f === void 0 ? void 0 : _f.style) === null || _g === void 0 ? void 0 : _g.customCSS) === null || _h === void 0 ? void 0 : _h.rules_UNSTABLE) != null\n  });\n  if (config.callPrefetch) {\n    prefetch(config.thoughtSpotHost);\n  }\n  return authEE;\n};\nexport function disableAutoLogin() {\n  config.autoLogin = false;\n}\n/**\n * Logs out from ThoughtSpot. This also sets the autoLogin flag to false, to prevent\n * the SDK from automatically logging in again.\n *\n * You can call the `init` method again to re login, if autoLogin is set to true in this\n * second call it will be honored.\n *\n * @param doNotDisableAutoLogin This flag when passed will not disable autoLogin\n * @returns Promise which resolves when logout completes.\n * @version SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw\n */\nexport const logout = function () {\n  let doNotDisableAutoLogin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (!doNotDisableAutoLogin) {\n    disableAutoLogin();\n  }\n  return _logout(config).then(isLoggedIn => {\n    notifyLogout();\n    return isLoggedIn;\n  });\n};\nlet renderQueue = Promise.resolve();\n/**\n * Renders functions in a queue, resolves to next function only after the callback next is called\n * @param fn The function being registered\n */\nexport const renderInQueue = fn => {\n  const {\n    queueMultiRenders = false\n  } = config;\n  if (queueMultiRenders) {\n    renderQueue = renderQueue.then(() => new Promise(res => fn(res)));\n    return renderQueue;\n  }\n  // Sending an empty function to keep it consistent with the above usage.\n  return fn(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n};\n// For testing purposes only\nexport function reset() {\n  config = {};\n  authEE = null;\n  authPromise = null;\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","uniq","getThoughtSpotHost","AuthType","PrefetchFeatures","authenticate","logout","_logout","AuthFailureType","AuthStatus","uploadMixpanelEvent","MIXPANEL_EVENT","config","CONFIG_DEFAULTS","loginFailedMessage","authTriggerText","authType","None","authPromise","getEmbedConfig","getAuthPromise","authEE","notifyAuthSDKSuccess","console","error","emit","SDK_SUCCESS","notifyAuthSuccess","SUCCESS","notifyAuthFailure","failureType","FAILURE","notifyLogout","LOGOUT","handleAuth","then","isLoggedIn","SDK","hostUrlToFeatureUrl","SearchEmbed","url","LiveboardEmbed","FullApp","VizEmbed","prefetch","prefetchFeatures","warn","features","hostUrl","thoughtSpotHost","length","map","feature","forEach","prefetchUrl","index","iFrame","document","createElement","src","style","width","height","border","classList","add","body","appendChild","sanity","embedConfig","undefined","Error","TrustedAuthToken","username","authEndpoint","getAuthToken","noRedirect","authTriggerContainer","init","VISUAL_SDK_CALLED_INIT","host","usedCustomizationSheet","customizations","customCSSUrl","usedCustomizationVariables","customCSS","variables","usedCustomizationRules","rules_UNSTABLE","callPrefetch","disableAutoLogin","autoLogin","doNotDisableAutoLogin","renderQueue","Promise","resolve","renderInQueue","fn","queueMultiRenders","res","reset"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\base.ts"],"sourcesContent":["/* eslint-disable import/no-mutable-exports */\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport EventEmitter from 'eventemitter3';\nimport uniq from 'lodash/uniq';\nimport { getThoughtSpotHost } from '../config';\nimport { AuthType, EmbedConfig, PrefetchFeatures } from '../types';\nimport {\n    authenticate,\n    logout as _logout,\n    AuthFailureType,\n    AuthStatus,\n} from '../auth';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\n\nlet config = {} as EmbedConfig;\nconst CONFIG_DEFAULTS: Partial<EmbedConfig> = {\n    loginFailedMessage: 'Not logged in',\n    authTriggerText: 'Authorize',\n    authType: AuthType.None,\n};\n\nexport let authPromise: Promise<boolean>;\n\nexport const getEmbedConfig = (): EmbedConfig => config;\n\nexport const getAuthPromise = (): Promise<boolean> => authPromise;\n\nlet authEE: EventEmitter;\n\nexport function notifyAuthSDKSuccess(): void {\n    if (!authEE) {\n        console.error('SDK not initialized');\n        return;\n    }\n    authEE.emit(AuthStatus.SDK_SUCCESS);\n}\n\nexport function notifyAuthSuccess(): void {\n    if (!authEE) {\n        console.error('SDK not initialized');\n        return;\n    }\n    authEE.emit(AuthStatus.SUCCESS);\n}\n\nexport function notifyAuthFailure(failureType: AuthFailureType): void {\n    if (!authEE) {\n        console.error('SDK not initialized');\n        return;\n    }\n    authEE.emit(AuthStatus.FAILURE, failureType);\n}\n\nexport function notifyLogout(): void {\n    if (!authEE) {\n        console.error('SDK not initialized');\n        return;\n    }\n    authEE.emit(AuthStatus.LOGOUT);\n}\n/**\n * Perform authentication on the ThoughtSpot app as applicable.\n */\nexport const handleAuth = (): Promise<boolean> => {\n    authPromise = authenticate(config);\n    authPromise.then(\n        (isLoggedIn) => {\n            if (!isLoggedIn) {\n                notifyAuthFailure(AuthFailureType.SDK);\n            } else {\n                notifyAuthSDKSuccess();\n            }\n        },\n        () => {\n            notifyAuthFailure(AuthFailureType.SDK);\n        },\n    );\n    return authPromise;\n};\n\nconst hostUrlToFeatureUrl = {\n    [PrefetchFeatures.SearchEmbed]: (url: string) => `${url}v2/#/embed/answer`,\n    [PrefetchFeatures.LiveboardEmbed]: (url: string) => url,\n    [PrefetchFeatures.FullApp]: (url: string) => url,\n    [PrefetchFeatures.VizEmbed]: (url: string) => url,\n};\n\n/**\n * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.\n * @param url The URL provided for prefetch\n * @param prefetchFeatures Specify features which needs to be prefetched.\n * @version SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 7.2.1\n */\nexport const prefetch = (\n    url?: string,\n    prefetchFeatures?: PrefetchFeatures[],\n): void => {\n    if (url === '') {\n        // eslint-disable-next-line no-console\n        console.warn('The prefetch method does not have a valid URL');\n    } else {\n        const features = prefetchFeatures || [PrefetchFeatures.FullApp];\n        let hostUrl = url || config.thoughtSpotHost;\n        hostUrl = hostUrl[hostUrl.length - 1] === '/' ? hostUrl : `${hostUrl}/`;\n        uniq(\n            features.map((feature) => hostUrlToFeatureUrl[feature](hostUrl)),\n        ).forEach((prefetchUrl, index) => {\n            const iFrame = document.createElement('iframe');\n            iFrame.src = prefetchUrl;\n            iFrame.style.width = '0';\n            iFrame.style.height = '0';\n            iFrame.style.border = '0';\n            iFrame.classList.add('prefetchIframe');\n            iFrame.classList.add(`prefetchIframeNum-${index}`);\n            document.body.appendChild(iFrame);\n        });\n    }\n};\n\nfunction sanity(embedConfig: EmbedConfig) {\n    if (embedConfig.thoughtSpotHost === undefined) {\n        throw new Error('ThoughtSpot host not provided');\n    }\n    if (embedConfig.authType === AuthType.TrustedAuthToken) {\n        if (!embedConfig.username) {\n            throw new Error('Username not provided with Trusted auth');\n        }\n\n        if (\n            !embedConfig.authEndpoint &&\n            typeof embedConfig.getAuthToken !== 'function'\n        ) {\n            throw new Error(\n                'Trusted auth should provide either authEndpoint or getAuthToken',\n            );\n        }\n    }\n    if (embedConfig.noRedirect && !embedConfig.authTriggerContainer) {\n        throw new Error('authTriggerContainer not provided with noRedirect');\n    }\n}\n\n/**\n * Initializes the Visual Embed SDK globally and perform\n * authentication if applicable.\n * @param embedConfig The configuration object containing ThoughtSpot host,\n * authentication mechanism and so on.\n * example: authStatus = init(config);\n * authStatus.on(AuthStatus.FAILURE, (reason) => { // do something here });\n * @returns event emitter which emits events on authentication success, failure and logout. See {@link AuthStatus}\n * @version SDK: 1.0.0 | ThoughtSpot ts7.april.cl, 7.2.1\n */\nexport const init = (embedConfig: EmbedConfig): EventEmitter => {\n    sanity(embedConfig);\n    config = {\n        ...CONFIG_DEFAULTS,\n        ...embedConfig,\n        thoughtSpotHost: getThoughtSpotHost(embedConfig),\n    };\n    authEE = new EventEmitter();\n    handleAuth();\n\n    uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_CALLED_INIT, {\n        authType: config.authType,\n        host: config.thoughtSpotHost,\n        usedCustomizationSheet:\n            embedConfig.customizations?.style?.customCSSUrl != null,\n        usedCustomizationVariables:\n            embedConfig.customizations?.style?.customCSS?.variables != null,\n        usedCustomizationRules:\n            embedConfig.customizations?.style?.customCSS?.rules_UNSTABLE !=\n            null,\n    });\n\n    if (config.callPrefetch) {\n        prefetch(config.thoughtSpotHost);\n    }\n    return authEE;\n};\n\nexport function disableAutoLogin(): void {\n    config.autoLogin = false;\n}\n\n/**\n * Logs out from ThoughtSpot. This also sets the autoLogin flag to false, to prevent\n * the SDK from automatically logging in again.\n *\n * You can call the `init` method again to re login, if autoLogin is set to true in this\n * second call it will be honored.\n *\n * @param doNotDisableAutoLogin This flag when passed will not disable autoLogin\n * @returns Promise which resolves when logout completes.\n * @version SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw\n */\nexport const logout = (doNotDisableAutoLogin = false): Promise<boolean> => {\n    if (!doNotDisableAutoLogin) {\n        disableAutoLogin();\n    }\n    return _logout(config).then((isLoggedIn) => {\n        notifyLogout();\n        return isLoggedIn;\n    });\n};\n\nlet renderQueue: Promise<any> = Promise.resolve();\n\n/**\n * Renders functions in a queue, resolves to next function only after the callback next is called\n * @param fn The function being registered\n */\nexport const renderInQueue = (\n    fn: (next?: (val?: any) => void) => Promise<any>,\n): Promise<any> => {\n    const { queueMultiRenders = false } = config;\n    if (queueMultiRenders) {\n        renderQueue = renderQueue.then(() => new Promise((res) => fn(res)));\n        return renderQueue;\n    }\n    // Sending an empty function to keep it consistent with the above usage.\n    return fn(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n};\n\n// For testing purposes only\nexport function reset(): void {\n    config = {} as any;\n    authEE = null;\n    authPromise = null;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}