{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { DataSourceVisualMode, Param, Action } from '../types';\nimport { getQueryParamString, checkReleaseVersionInBeta } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { ERROR_MESSAGE } from '../errors';\nimport { getAuthPromise, getEmbedConfig } from './base';\nimport { getReleaseVersion } from '../auth';\nexport const HiddenActionItemByDefaultForSearchEmbed = [Action.EditACopy, Action.SaveAsView, Action.UpdateTML, Action.EditTML, Action.AnswerDelete];\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\nexport class SearchEmbed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Get the state of the data sources panel that the embedded\n   * ThoughtSpot search will be initialized with.\n   */\n  getDataSourceMode() {\n    let dataSourceMode = DataSourceVisualMode.Expanded;\n    if (this.viewConfig.collapseDataSources === true) {\n      dataSourceMode = DataSourceVisualMode.Collapsed;\n    }\n    if (this.viewConfig.hideDataSources === true) {\n      dataSourceMode = DataSourceVisualMode.Hidden;\n    }\n    return dataSourceMode;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot search to be\n   * loaded in the iframe\n   * @param answerId The GUID of a saved answer\n   * @param dataSources A list of data source GUIDs\n   */\n  getIFrameSrc(answerId, dataSources) {\n    var _a;\n    const {\n      hideResults,\n      expandAllDataSource,\n      enableSearchAssist,\n      forceTable,\n      searchOptions\n    } = this.viewConfig;\n    const answerPath = answerId ? `saved-answer/${answerId}` : 'answer';\n    const queryParams = this.getBaseQueryParams();\n    queryParams[Param.HideActions] = [...((_a = queryParams[Param.HideActions]) !== null && _a !== void 0 ? _a : []), ...HiddenActionItemByDefaultForSearchEmbed];\n    if (dataSources && dataSources.length) {\n      queryParams[Param.DataSources] = JSON.stringify(dataSources);\n    }\n    if (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchTokenString) {\n      queryParams[Param.searchTokenString] = encodeURIComponent(searchOptions.searchTokenString);\n      if (searchOptions.executeSearch) {\n        queryParams[Param.executeSearch] = true;\n      }\n    }\n    if (enableSearchAssist) {\n      queryParams[Param.EnableSearchAssist] = true;\n    }\n    if (hideResults) {\n      queryParams[Param.HideResult] = true;\n    }\n    if (forceTable) {\n      queryParams[Param.ForceTable] = true;\n    }\n    queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n    queryParams[Param.UseLastSelectedDataSource] = false;\n    queryParams[Param.searchEmbed] = true;\n    let query = '';\n    const queryParamsString = getQueryParamString(queryParams, true);\n    if (queryParamsString) {\n      query = `?${queryParamsString}`;\n    }\n    const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n    return `${this.getEmbedBasePath(query)}/${answerPath}${tsPostHashParams}`;\n  }\n  /**\n   * Render the embedded ThoughtSpot search\n   */\n  render() {\n    super.render();\n    const {\n      answerId,\n      dataSources\n    } = this.viewConfig;\n    const src = this.getIFrameSrc(answerId, dataSources);\n    this.renderIFrame(src, this.viewConfig.frameParams);\n    getAuthPromise().then(() => {\n      if (checkReleaseVersionInBeta(getReleaseVersion(), getEmbedConfig().suppressSearchEmbedBetaWarning)) {\n        alert(ERROR_MESSAGE.SEARCHEMBED_BETA_WRANING_MESSAGE);\n      }\n    });\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["DataSourceVisualMode","Param","Action","getQueryParamString","checkReleaseVersionInBeta","TsEmbed","ERROR_MESSAGE","getAuthPromise","getEmbedConfig","getReleaseVersion","HiddenActionItemByDefaultForSearchEmbed","EditACopy","SaveAsView","UpdateTML","EditTML","AnswerDelete","SearchEmbed","constructor","domSelector","viewConfig","getDataSourceMode","dataSourceMode","Expanded","collapseDataSources","Collapsed","hideDataSources","Hidden","getIFrameSrc","answerId","dataSources","hideResults","expandAllDataSource","enableSearchAssist","forceTable","searchOptions","answerPath","queryParams","getBaseQueryParams","HideActions","length","DataSources","JSON","stringify","searchTokenString","encodeURIComponent","executeSearch","EnableSearchAssist","HideResult","ForceTable","DataSourceMode","UseLastSelectedDataSource","searchEmbed","query","queryParamsString","tsPostHashParams","getThoughtSpotPostUrlParams","getEmbedBasePath","render","src","renderIFrame","frameParams","then","suppressSearchEmbedBetaWarning","alert","SEARCHEMBED_BETA_WRANING_MESSAGE"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\search.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed ThoughtSpot search or a saved answer\n *\n * @summary Search embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport {\n    DataSourceVisualMode,\n    DOMSelector,\n    Param,\n    Action,\n    ViewConfig,\n} from '../types';\nimport { getQueryParamString, checkReleaseVersionInBeta } from '../utils';\nimport { TsEmbed } from './ts-embed';\nimport { version } from '../../package.json';\nimport { ERROR_MESSAGE } from '../errors';\nimport { getAuthPromise, getEmbedConfig } from './base';\nimport { getReleaseVersion } from '../auth';\n\n/**\n * Configuration for search options\n */\nexport interface SearchOptions {\n    /**\n     * The tml string to load the answer\n     */\n    searchTokenString: string;\n    /**\n     * Boolean to determine if the search should be executed or not.\n     * if it is executed, put the focus on the results.\n     * if itâ€™s not executed, put the focus in the search bar - at the end of the tokens\n     */\n    executeSearch?: boolean;\n}\n\n/**\n * The configuration attributes for the embedded search view.\n *\n * @Category Search Embed\n */\nexport interface SearchViewConfig extends ViewConfig {\n    /**\n     * If set to true, the data sources panel is collapsed on load,\n     * but can be expanded manually.\n     */\n    collapseDataSources?: boolean;\n    /**\n     * If set to true, hides the data sources panel.\n     */\n    hideDataSources?: boolean;\n    /**\n     * If set to true, hides the charts and tables in search answers.\n     * This attribute can be used to create a custom visualization\n     * using raw answer data.\n     */\n    hideResults?: boolean;\n    /**\n     * If set to true, expands all the data sources panel.\n     */\n    expandAllDataSource?: boolean;\n    /**\n     * If set to true, the Search Assist feature is enabled.\n     * @version SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw\n     */\n    enableSearchAssist?: boolean;\n    /**\n     * If set to true, the tabular view is set as the default\n     * format for presenting search data.\n     */\n    forceTable?: boolean;\n    /**\n     * The array of data source GUIDs to set on load.\n     */\n    dataSources?: string[];\n    /**\n     * The initial search query to load the answer with.\n     * @deprecated Use {@link searchOptions} instead\n     */\n    searchQuery?: string;\n    /**\n     * Configuration for search options\n     */\n    searchOptions?: SearchOptions;\n    /**\n     * The GUID of a saved answer to load initially.\n     */\n    answerId?: string;\n}\n\nexport const HiddenActionItemByDefaultForSearchEmbed = [\n    Action.EditACopy,\n    Action.SaveAsView,\n    Action.UpdateTML,\n    Action.EditTML,\n    Action.AnswerDelete,\n];\n\n/**\n * Embed ThoughtSpot search\n *\n * @Category Search Embed\n */\nexport class SearchEmbed extends TsEmbed {\n    /**\n     * The view configuration for the embedded ThoughtSpot search.\n     */\n    protected viewConfig: SearchViewConfig;\n\n    constructor(domSelector: DOMSelector, viewConfig: SearchViewConfig) {\n        super(domSelector);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Get the state of the data sources panel that the embedded\n     * ThoughtSpot search will be initialized with.\n     */\n    private getDataSourceMode() {\n        let dataSourceMode = DataSourceVisualMode.Expanded;\n        if (this.viewConfig.collapseDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Collapsed;\n        }\n        if (this.viewConfig.hideDataSources === true) {\n            dataSourceMode = DataSourceVisualMode.Hidden;\n        }\n\n        return dataSourceMode;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot search to be\n     * loaded in the iframe\n     * @param answerId The GUID of a saved answer\n     * @param dataSources A list of data source GUIDs\n     */\n    private getIFrameSrc(answerId: string, dataSources?: string[]) {\n        const {\n            hideResults,\n            expandAllDataSource,\n            enableSearchAssist,\n            forceTable,\n            searchOptions,\n        } = this.viewConfig;\n        const answerPath = answerId ? `saved-answer/${answerId}` : 'answer';\n        const queryParams = this.getBaseQueryParams();\n\n        queryParams[Param.HideActions] = [\n            ...(queryParams[Param.HideActions] ?? []),\n            ...HiddenActionItemByDefaultForSearchEmbed,\n        ];\n\n        if (dataSources && dataSources.length) {\n            queryParams[Param.DataSources] = JSON.stringify(dataSources);\n        }\n        if (searchOptions?.searchTokenString) {\n            queryParams[Param.searchTokenString] = encodeURIComponent(\n                searchOptions.searchTokenString,\n            );\n\n            if (searchOptions.executeSearch) {\n                queryParams[Param.executeSearch] = true;\n            }\n        }\n        if (enableSearchAssist) {\n            queryParams[Param.EnableSearchAssist] = true;\n        }\n        if (hideResults) {\n            queryParams[Param.HideResult] = true;\n        }\n        if (forceTable) {\n            queryParams[Param.ForceTable] = true;\n        }\n\n        queryParams[Param.DataSourceMode] = this.getDataSourceMode();\n        queryParams[Param.UseLastSelectedDataSource] = false;\n        queryParams[Param.searchEmbed] = true;\n        let query = '';\n        const queryParamsString = getQueryParamString(queryParams, true);\n        if (queryParamsString) {\n            query = `?${queryParamsString}`;\n        }\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n\n        return `${this.getEmbedBasePath(\n            query,\n        )}/${answerPath}${tsPostHashParams}`;\n    }\n\n    /**\n     * Render the embedded ThoughtSpot search\n     */\n    public render(): SearchEmbed {\n        super.render();\n        const { answerId, dataSources } = this.viewConfig;\n\n        const src = this.getIFrameSrc(answerId, dataSources);\n        this.renderIFrame(src, this.viewConfig.frameParams);\n        getAuthPromise().then(() => {\n            if (\n                checkReleaseVersionInBeta(\n                    getReleaseVersion(),\n                    getEmbedConfig().suppressSearchEmbedBetaWarning,\n                )\n            ) {\n                alert(ERROR_MESSAGE.SEARCHEMBED_BETA_WRANING_MESSAGE);\n            }\n        });\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}