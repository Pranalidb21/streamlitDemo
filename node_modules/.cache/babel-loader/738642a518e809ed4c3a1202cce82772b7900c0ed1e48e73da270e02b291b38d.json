{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Common utility functions for ThoughtSpot Visual Embed SDK\n *\n * @summary Utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n/**\n * Construct a runtime filters query string from the given filters.\n * Refer to the following docs for more details on runtime filter syntax:\n * https://cloud-docs.thoughtspot.com/admin/ts-cloud/apply-runtime-filter.html\n * https://cloud-docs.thoughtspot.com/admin/ts-cloud/runtime-filter-operators.html\n * @param runtimeFilters\n */\nexport const getFilterQuery = runtimeFilters => {\n  if (runtimeFilters && runtimeFilters.length) {\n    const filters = runtimeFilters.map((filter, valueIndex) => {\n      const index = valueIndex + 1;\n      const filterExpr = [];\n      filterExpr.push(`col${index}=${filter.columnName}`);\n      filterExpr.push(`op${index}=${filter.operator}`);\n      filterExpr.push(filter.values.map(value => `val${index}=${value}`).join('&'));\n      return filterExpr.join('&');\n    });\n    return `${filters.join('&')}`;\n  }\n  return null;\n};\n/**\n * Convert a value to a string representation to be sent as a query\n * parameter to the ThoughtSpot app.\n * @param value Any parameter value\n */\nconst serializeParam = value => {\n  // do not serialize primitive types\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    return value;\n  }\n  return JSON.stringify(value);\n};\n/**\n * Convert a value to a string:\n * in case of an array, we convert it to CSV.\n * in case of any other type, we directly return the value.\n * @param value\n */\nconst paramToString = value => Array.isArray(value) ? value.join(',') : value;\n/**\n * Return a query param string composed from the given params object\n * @param queryParams\n */\nexport const getQueryParamString = function (queryParams) {\n  let shouldSerializeParamValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const qp = [];\n  const params = Object.keys(queryParams);\n  params.forEach(key => {\n    const val = queryParams[key];\n    if (val !== undefined) {\n      const serializedValue = shouldSerializeParamValues ? serializeParam(val) : paramToString(val);\n      qp.push(`${key}=${serializedValue}`);\n    }\n  });\n  if (qp.length) {\n    return qp.join('&');\n  }\n  return null;\n};\n/**\n * Get a string representation of a dimension value in CSS\n * If numeric, it is considered in pixels.\n * @param value\n */\nexport const getCssDimension = value => {\n  if (typeof value === 'number') {\n    return `${value}px`;\n  }\n  return value;\n};\n/**\n * Append a string to a URL's hash fragment\n * @param url A URL\n * @param stringToAppend The string to append to the URL hash\n */\nexport const appendToUrlHash = (url, stringToAppend) => {\n  let outputUrl = url;\n  const encStringToAppend = encodeURIComponent(stringToAppend);\n  if (url.indexOf('#') >= 0) {\n    outputUrl = `${outputUrl}${encStringToAppend}`;\n  } else {\n    outputUrl = `${outputUrl}#${encStringToAppend}`;\n  }\n  return outputUrl;\n};\nexport function getRedirectUrl(url, stringToAppend) {\n  let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const targetUrl = path ? new URL(path, window.location.origin).href : url;\n  return appendToUrlHash(targetUrl, stringToAppend);\n}\nexport const getEncodedQueryParamsString = queryString => {\n  if (!queryString) {\n    return queryString;\n  }\n  return btoa(queryString).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n};\nexport const getOffsetTop = element => {\n  const rect = element.getBoundingClientRect();\n  return rect.top + window.scrollY;\n};\nexport const embedEventStatus = {\n  START: 'start',\n  END: 'end'\n};\nexport const setAttributes = (element, attributes) => {\n  Object.keys(attributes).forEach(key => {\n    element.setAttribute(key, attributes[key].toString());\n  });\n};\nconst isCloudRelease = version => version.endsWith('.cl');\n/* For Search Embed: ReleaseVersionInBeta */\nexport const checkReleaseVersionInBeta = (releaseVersion, suppressBetaWarning) => {\n  if (releaseVersion !== '' && !isCloudRelease(releaseVersion)) {\n    const splittedReleaseVersion = releaseVersion.split('.');\n    const majorVersion = Number(splittedReleaseVersion[0]);\n    const isBetaVersion = majorVersion < 8;\n    return !suppressBetaWarning && isBetaVersion;\n  }\n  return false;\n};\nexport const getCustomisations = (embedConfig, viewConfig) => {\n  var _a, _b, _c, _d;\n  const customCssUrlFromEmbedConfig = embedConfig.customCssUrl;\n  const customizationsFromViewConfig = viewConfig.customizations;\n  const customizationsFromEmbedConfig = embedConfig.customizations || embedConfig.customisations;\n  const customizations = {\n    style: {\n      ...(customizationsFromEmbedConfig === null || customizationsFromEmbedConfig === void 0 ? void 0 : customizationsFromEmbedConfig.style),\n      ...(customizationsFromViewConfig === null || customizationsFromViewConfig === void 0 ? void 0 : customizationsFromViewConfig.style),\n      customCSS: {\n        ...((_a = customizationsFromEmbedConfig === null || customizationsFromEmbedConfig === void 0 ? void 0 : customizationsFromEmbedConfig.style) === null || _a === void 0 ? void 0 : _a.customCSS),\n        ...((_b = customizationsFromViewConfig === null || customizationsFromViewConfig === void 0 ? void 0 : customizationsFromViewConfig.style) === null || _b === void 0 ? void 0 : _b.customCSS)\n      },\n      customCSSUrl: ((_c = customizationsFromViewConfig === null || customizationsFromViewConfig === void 0 ? void 0 : customizationsFromViewConfig.style) === null || _c === void 0 ? void 0 : _c.customCSSUrl) || ((_d = customizationsFromEmbedConfig === null || customizationsFromEmbedConfig === void 0 ? void 0 : customizationsFromEmbedConfig.style) === null || _d === void 0 ? void 0 : _d.customCSSUrl) || customCssUrlFromEmbedConfig\n    },\n    content: {\n      ...(customizationsFromEmbedConfig === null || customizationsFromEmbedConfig === void 0 ? void 0 : customizationsFromEmbedConfig.content),\n      ...(customizationsFromViewConfig === null || customizationsFromViewConfig === void 0 ? void 0 : customizationsFromViewConfig.content)\n    }\n  };\n  return customizations;\n};\n/**\n * Gets a reference to the DOM node given\n * a selector.\n * @param domSelector\n */\nexport function getDOMNode(domSelector) {\n  return typeof domSelector === 'string' ? document.querySelector(domSelector) : domSelector;\n}","map":{"version":3,"mappings":"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","names":["getFilterQuery","runtimeFilters","length","filters","map","filter","valueIndex","index","filterExpr","push","columnName","operator","values","value","join","serializeParam","JSON","stringify","paramToString","Array","isArray","getQueryParamString","queryParams","shouldSerializeParamValues","qp","params","Object","keys","forEach","key","val","undefined","serializedValue","getCssDimension","appendToUrlHash","url","stringToAppend","outputUrl","encStringToAppend","encodeURIComponent","indexOf","getRedirectUrl","path","targetUrl","URL","window","location","origin","href","getEncodedQueryParamsString","queryString","btoa","replace","getOffsetTop","element","rect","getBoundingClientRect","top","scrollY","embedEventStatus","START","END","setAttributes","attributes","setAttribute","toString","isCloudRelease","version","endsWith","checkReleaseVersionInBeta","releaseVersion","suppressBetaWarning","splittedReleaseVersion","split","majorVersion","Number","isBetaVersion","getCustomisations","embedConfig","viewConfig","customCssUrlFromEmbedConfig","customCssUrl","customizationsFromViewConfig","customizations","customizationsFromEmbedConfig","customisations","style","customCSS","customCSSUrl","content","getDOMNode","domSelector","document","querySelector"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Common utility functions for ThoughtSpot Visual Embed SDK\n *\n * @summary Utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport {\n    EmbedConfig,\n    QueryParams,\n    RuntimeFilter,\n    CustomisationsInterface,\n    DOMSelector,\n    ViewConfig,\n} from './types';\n\n/**\n * Construct a runtime filters query string from the given filters.\n * Refer to the following docs for more details on runtime filter syntax:\n * https://cloud-docs.thoughtspot.com/admin/ts-cloud/apply-runtime-filter.html\n * https://cloud-docs.thoughtspot.com/admin/ts-cloud/runtime-filter-operators.html\n * @param runtimeFilters\n */\nexport const getFilterQuery = (runtimeFilters: RuntimeFilter[]): string => {\n    if (runtimeFilters && runtimeFilters.length) {\n        const filters = runtimeFilters.map((filter, valueIndex) => {\n            const index = valueIndex + 1;\n            const filterExpr = [];\n            filterExpr.push(`col${index}=${filter.columnName}`);\n            filterExpr.push(`op${index}=${filter.operator}`);\n            filterExpr.push(\n                filter.values.map((value) => `val${index}=${value}`).join('&'),\n            );\n\n            return filterExpr.join('&');\n        });\n\n        return `${filters.join('&')}`;\n    }\n\n    return null;\n};\n\n/**\n * Convert a value to a string representation to be sent as a query\n * parameter to the ThoughtSpot app.\n * @param value Any parameter value\n */\nconst serializeParam = (value: any) => {\n    // do not serialize primitive types\n    if (\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean'\n    ) {\n        return value;\n    }\n\n    return JSON.stringify(value);\n};\n\n/**\n * Convert a value to a string:\n * in case of an array, we convert it to CSV.\n * in case of any other type, we directly return the value.\n * @param value\n */\nconst paramToString = (value: any) =>\n    Array.isArray(value) ? value.join(',') : value;\n\n/**\n * Return a query param string composed from the given params object\n * @param queryParams\n */\nexport const getQueryParamString = (\n    queryParams: QueryParams,\n    shouldSerializeParamValues = false,\n): string => {\n    const qp: string[] = [];\n    const params = Object.keys(queryParams);\n    params.forEach((key) => {\n        const val = queryParams[key];\n        if (val !== undefined) {\n            const serializedValue = shouldSerializeParamValues\n                ? serializeParam(val)\n                : paramToString(val);\n            qp.push(`${key}=${serializedValue}`);\n        }\n    });\n\n    if (qp.length) {\n        return qp.join('&');\n    }\n\n    return null;\n};\n\n/**\n * Get a string representation of a dimension value in CSS\n * If numeric, it is considered in pixels.\n * @param value\n */\nexport const getCssDimension = (value: number | string): string => {\n    if (typeof value === 'number') {\n        return `${value}px`;\n    }\n\n    return value;\n};\n\n/**\n * Append a string to a URL's hash fragment\n * @param url A URL\n * @param stringToAppend The string to append to the URL hash\n */\nexport const appendToUrlHash = (url: string, stringToAppend: string) => {\n    let outputUrl = url;\n    const encStringToAppend = encodeURIComponent(stringToAppend);\n\n    if (url.indexOf('#') >= 0) {\n        outputUrl = `${outputUrl}${encStringToAppend}`;\n    } else {\n        outputUrl = `${outputUrl}#${encStringToAppend}`;\n    }\n\n    return outputUrl;\n};\n\nexport function getRedirectUrl(url: string, stringToAppend: string, path = '') {\n    const targetUrl = path ? new URL(path, window.location.origin).href : url;\n    return appendToUrlHash(targetUrl, stringToAppend);\n}\n\nexport const getEncodedQueryParamsString = (queryString: string) => {\n    if (!queryString) {\n        return queryString;\n    }\n    return btoa(queryString)\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n};\n\nexport const getOffsetTop = (element: any) => {\n    const rect = element.getBoundingClientRect();\n    return rect.top + window.scrollY;\n};\n\nexport const embedEventStatus = {\n    START: 'start',\n    END: 'end',\n};\n\nexport const setAttributes = (\n    element: HTMLElement,\n    attributes: { [key: string]: string | number | boolean },\n): void => {\n    Object.keys(attributes).forEach((key) => {\n        element.setAttribute(key, attributes[key].toString());\n    });\n};\n\nconst isCloudRelease = (version: string) => version.endsWith('.cl');\n\n/* For Search Embed: ReleaseVersionInBeta */\nexport const checkReleaseVersionInBeta = (\n    releaseVersion: string,\n    suppressBetaWarning: boolean,\n): boolean => {\n    if (releaseVersion !== '' && !isCloudRelease(releaseVersion)) {\n        const splittedReleaseVersion = releaseVersion.split('.');\n        const majorVersion = Number(splittedReleaseVersion[0]);\n        const isBetaVersion = majorVersion < 8;\n        return !suppressBetaWarning && isBetaVersion;\n    }\n    return false;\n};\n\nexport const getCustomisations = (\n    embedConfig: EmbedConfig,\n    viewConfig: ViewConfig,\n): CustomisationsInterface => {\n    const customCssUrlFromEmbedConfig = embedConfig.customCssUrl;\n    const customizationsFromViewConfig = viewConfig.customizations;\n    const customizationsFromEmbedConfig =\n        embedConfig.customizations ||\n        ((embedConfig as any).customisations as CustomisationsInterface);\n\n    const customizations: CustomisationsInterface = {\n        style: {\n            ...customizationsFromEmbedConfig?.style,\n            ...customizationsFromViewConfig?.style,\n            customCSS: {\n                ...customizationsFromEmbedConfig?.style?.customCSS,\n                ...customizationsFromViewConfig?.style?.customCSS,\n            },\n            customCSSUrl:\n                customizationsFromViewConfig?.style?.customCSSUrl ||\n                customizationsFromEmbedConfig?.style?.customCSSUrl ||\n                customCssUrlFromEmbedConfig,\n        },\n        content: {\n            ...customizationsFromEmbedConfig?.content,\n            ...customizationsFromViewConfig?.content,\n        },\n    };\n    return customizations;\n};\n\n/**\n * Gets a reference to the DOM node given\n * a selector.\n * @param domSelector\n */\nexport function getDOMNode(domSelector: DOMSelector): HTMLElement {\n    return typeof domSelector === 'string'\n        ? document.querySelector(domSelector)\n        : domSelector;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}