{"ast":null,"code":"import { ERROR_MESSAGE } from '../errors';\nimport { HostEvent } from '../types';\n/**\n * Reloads the ThoughtSpot iframe.\n */\nfunction reload(iFrame) {\n  const oldFrame = iFrame.cloneNode();\n  const parent = iFrame.parentNode;\n  parent.removeChild(iFrame);\n  parent.appendChild(oldFrame);\n}\n/**\n * Post Iframe message.\n */\nfunction postIframeMessage(iFrame, message, thoughtSpotHost, channel) {\n  return iFrame.contentWindow.postMessage(message, thoughtSpotHost, [channel === null || channel === void 0 ? void 0 : channel.port2]);\n}\nconst TRIGGER_TIMEOUT = 30000;\nexport function processTrigger(iFrame, messageType, thoughtSpotHost, data) {\n  return new Promise((res, rej) => {\n    if (messageType === HostEvent.Reload) {\n      reload(iFrame);\n      return res(null);\n    }\n    const channel = new MessageChannel();\n    channel.port1.onmessage = _ref => {\n      let {\n        data: responseData\n      } = _ref;\n      channel.port1.close();\n      if (responseData.error) {\n        rej(responseData.error);\n      } else {\n        res(responseData);\n      }\n    };\n    // Close the messageChannel and resolve the promise if timeout.\n    setTimeout(() => {\n      channel.port1.close();\n      res(new Error(ERROR_MESSAGE.TRIGGER_TIMED_OUT));\n    }, TRIGGER_TIMEOUT);\n    return postIframeMessage(iFrame, {\n      type: messageType,\n      data\n    }, thoughtSpotHost, channel);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,WAAW;AACzC,SAASC,SAAS,QAAQ,UAAU;AAEpC;;;AAGA,SAASC,MAAM,CAACC,MAAyB;EACrC,MAAMC,QAAQ,GAAGD,MAAM,CAACE,SAAS,EAAE;EACnC,MAAMC,MAAM,GAAGH,MAAM,CAACI,UAAU;EAChCD,MAAM,CAACE,WAAW,CAACL,MAAM,CAAC;EAC1BG,MAAM,CAACG,WAAW,CAACL,QAAQ,CAAC;AAChC;AAEA;;;AAGA,SAASM,iBAAiB,CACtBP,MAAyB,EACzBQ,OAAuC,EACvCC,eAAuB,EACvBC,OAAwB;EAExB,OAAOV,MAAM,CAACW,aAAa,CAACC,WAAW,CAACJ,OAAO,EAAEC,eAAe,EAAE,CAC9DC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,KAAK,CACjB,CAAC;AACN;AAEA,MAAMC,eAAe,GAAG,KAAK;AAE7B,OAAM,SAAUC,cAAc,CAC1Bf,MAAyB,EACzBgB,WAAsB,EACtBP,eAAuB,EACvBQ,IAAS;EAET,OAAO,IAAIC,OAAO,CAAM,CAACC,GAAG,EAAEC,GAAG,KAAI;IACjC,IAAIJ,WAAW,KAAKlB,SAAS,CAACuB,MAAM,EAAE;MAClCtB,MAAM,CAACC,MAAM,CAAC;MACd,OAAOmB,GAAG,CAAC,IAAI,CAAC;;IAEpB,MAAMT,OAAO,GAAG,IAAIY,cAAc,EAAE;IACpCZ,OAAO,CAACa,KAAK,CAACC,SAAS,GAAG,QAA2B;MAAA,IAA1B;QAAEP,IAAI,EAAEQ;MAAY,CAAE;MAC7Cf,OAAO,CAACa,KAAK,CAACG,KAAK,EAAE;MACrB,IAAID,YAAY,CAACE,KAAK,EAAE;QACpBP,GAAG,CAACK,YAAY,CAACE,KAAK,CAAC;OAC1B,MAAM;QACHR,GAAG,CAACM,YAAY,CAAC;;IAEzB,CAAC;IAED;IACAG,UAAU,CAAC,MAAK;MACZlB,OAAO,CAACa,KAAK,CAACG,KAAK,EAAE;MACrBP,GAAG,CAAC,IAAIU,KAAK,CAAChC,aAAa,CAACiC,iBAAiB,CAAC,CAAC;IACnD,CAAC,EAAEhB,eAAe,CAAC;IAEnB,OAAOP,iBAAiB,CACpBP,MAAM,EACN;MAAE+B,IAAI,EAAEf,WAAW;MAAEC;IAAI,CAAE,EAC3BR,eAAe,EACfC,OAAO,CACV;EACL,CAAC,CAAC;AACN","names":["ERROR_MESSAGE","HostEvent","reload","iFrame","oldFrame","cloneNode","parent","parentNode","removeChild","appendChild","postIframeMessage","message","thoughtSpotHost","channel","contentWindow","postMessage","port2","TRIGGER_TIMEOUT","processTrigger","messageType","data","Promise","res","rej","Reload","MessageChannel","port1","onmessage","responseData","close","error","setTimeout","Error","TRIGGER_TIMED_OUT","type"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\processTrigger.ts"],"sourcesContent":["import { ERROR_MESSAGE } from '../errors';\nimport { HostEvent } from '../types';\n\n/**\n * Reloads the ThoughtSpot iframe.\n */\nfunction reload(iFrame: HTMLIFrameElement) {\n    const oldFrame = iFrame.cloneNode();\n    const parent = iFrame.parentNode;\n    parent.removeChild(iFrame);\n    parent.appendChild(oldFrame);\n}\n\n/**\n * Post Iframe message.\n */\nfunction postIframeMessage(\n    iFrame: HTMLIFrameElement,\n    message: { type: HostEvent; data: any },\n    thoughtSpotHost: string,\n    channel?: MessageChannel,\n) {\n    return iFrame.contentWindow.postMessage(message, thoughtSpotHost, [\n        channel?.port2,\n    ]);\n}\n\nconst TRIGGER_TIMEOUT = 30000;\n\nexport function processTrigger(\n    iFrame: HTMLIFrameElement,\n    messageType: HostEvent,\n    thoughtSpotHost: string,\n    data: any,\n): Promise<any> {\n    return new Promise<any>((res, rej) => {\n        if (messageType === HostEvent.Reload) {\n            reload(iFrame);\n            return res(null);\n        }\n        const channel = new MessageChannel();\n        channel.port1.onmessage = ({ data: responseData }) => {\n            channel.port1.close();\n            if (responseData.error) {\n                rej(responseData.error);\n            } else {\n                res(responseData);\n            }\n        };\n\n        // Close the messageChannel and resolve the promise if timeout.\n        setTimeout(() => {\n            channel.port1.close();\n            res(new Error(ERROR_MESSAGE.TRIGGER_TIMED_OUT));\n        }, TRIGGER_TIMEOUT);\n\n        return postIframeMessage(\n            iFrame,\n            { type: messageType, data },\n            thoughtSpotHost,\n            channel,\n        );\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}