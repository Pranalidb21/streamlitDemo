{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport class LiveboardEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.defaultHeight = 500;\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    this.updateIFrameHeight = data => {\n      this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n    this.embedIframeCenter = (data, responder) => {\n      const obj = this.getIframeCenter();\n      responder({\n        type: EmbedEvent.EmbedIframeCenter,\n        data: obj\n      });\n    };\n    this.setIframeHeightForNonEmbedLiveboard = data => {\n      if (!data.data.currentPath.startsWith('/embed/viz/')) {\n        this.setIFrameHeight(this.defaultHeight);\n      }\n    };\n  }\n  /**\n   * Construct a map of params to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      enableVizTransformations,\n      fullHeight,\n      defaultHeight,\n      visibleVizs,\n      liveboardV2,\n      vizId,\n      activeTabId\n    } = this.viewConfig;\n    const preventLiveboardFilterRemoval = this.viewConfig.preventLiveboardFilterRemoval || this.viewConfig.preventPinboardFilterRemoval;\n    if (fullHeight === true) {\n      params[Param.fullHeight] = true;\n    }\n    if (defaultHeight) {\n      this.defaultHeight = defaultHeight;\n    }\n    if (enableVizTransformations !== undefined) {\n      params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n    }\n    if (preventLiveboardFilterRemoval) {\n      params[Param.preventLiveboardFilterRemoval] = true;\n    }\n    if (visibleVizs) {\n      params[Param.visibleVizs] = visibleVizs;\n    }\n    params[Param.livedBoardEmbed] = true;\n    if (vizId) {\n      params[Param.vizEmbed] = true;\n    }\n    if (liveboardV2 !== undefined) {\n      params[Param.LiveboardV2Enabled] = liveboardV2;\n    }\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n   * to be loaded within the iframe.\n   * @param liveboardId The GUID of the Liveboard.\n   * @param vizId The optional GUID of a visualization within the Liveboard.\n   * @param runtimeFilters A list of runtime filters to be applied to\n   * the Liveboard or visualization on load.\n   */\n  getIFrameSrc(liveboardId, vizId, runtimeFilters, activeTabId) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, true, false, false)}/viz/${liveboardId}`;\n    if (activeTabId) {\n      url = `${url}/tab/${activeTabId}`;\n    }\n    if (vizId) {\n      url = `${url}/${vizId}`;\n    }\n    const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n    url = `${url}${tsPostHashParams}`;\n    return url;\n  }\n  /**\n   * Triggers an event to the embedded app\n   * @param messageType The event type\n   * @param data The payload to send with the message\n   */\n  trigger(messageType) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const dataWithVizId = data;\n    if (this.viewConfig.vizId) {\n      dataWithVizId.vizId = this.viewConfig.vizId;\n    }\n    return super.trigger(messageType, dataWithVizId);\n  }\n  /**\n   * Render an embedded ThoughtSpot Liveboard or visualization\n   * @param renderOptions An object specifying the Liveboard ID,\n   * visualization ID and the runtime filters.\n   */\n  render() {\n    var _a;\n    const {\n      vizId,\n      activeTabId,\n      runtimeFilters\n    } = this.viewConfig;\n    const liveboardId = (_a = this.viewConfig.liveboardId) !== null && _a !== void 0 ? _a : this.viewConfig.pinboardId;\n    if (!liveboardId) {\n      this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n    }\n    if (this.viewConfig.fullHeight === true) {\n      this.on(EmbedEvent.RouteChange, this.setIframeHeightForNonEmbedLiveboard);\n      this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n      this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n    }\n    super.render();\n    const src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters, activeTabId);\n    this.renderV1Embed(src);\n    return this;\n  }\n}\n/**\n * @hidden\n */\nexport class PinboardEmbed extends LiveboardEmbed {}","map":{"version":3,"mappings":"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","names":["ERROR_MESSAGE","EmbedEvent","Param","getFilterQuery","getQueryParamString","V1Embed","LiveboardEmbed","constructor","domSelector","viewConfig","data","setIFrameHeight","Math","max","defaultHeight","responder","obj","getIframeCenter","type","EmbedIframeCenter","currentPath","startsWith","getEmbedParams","params","getBaseQueryParams","enableVizTransformations","fullHeight","visibleVizs","liveboardV2","vizId","activeTabId","preventLiveboardFilterRemoval","preventPinboardFilterRemoval","undefined","EnableVizTransformations","toString","livedBoardEmbed","vizEmbed","LiveboardV2Enabled","queryParams","getIFrameSrc","liveboardId","runtimeFilters","filterQuery","queryString","filter","Boolean","join","url","getV1EmbedBasePath","tsPostHashParams","getThoughtSpotPostUrlParams","trigger","messageType","dataWithVizId","render","pinboardId","handleError","LIVEBOARD_VIZ_ID_VALIDATION","on","RouteChange","setIframeHeightForNonEmbedLiveboard","EmbedHeight","updateIFrameHeight","embedIframeCenter","src","renderV1Embed","PinboardEmbed"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\liveboard.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { ERROR_MESSAGE } from '../errors';\nimport {\n    EmbedEvent,\n    MessagePayload,\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n    ViewConfig,\n} from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n\n/**\n * The configuration for the embedded Liveboard or visualization page view.\n * @Category Liveboards and Charts\n */\nexport interface LiveboardViewConfig extends ViewConfig {\n    /**\n     * If set to true, the embedded object container dynamically resizes\n     * according to the height of the Liveboard.\n     * @version SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1\n     */\n    fullHeight?: boolean;\n    /**\n     * This is the minimum height(in pixels) for a full height Liveboard.\n     * Setting this height helps resolves issues with empty Liveboards and\n     * other screens navigable from a Liveboard.\n     * @version SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1\n     * @default 500\n     */\n    defaultHeight?: number;\n    /**\n     * @Deprecated If set to true, the context menu in visualizations will be enabled.\n     */\n    enableVizTransformations?: boolean;\n    /**\n     * The Liveboard to display in the embedded view.\n     * Use either of liveboardId or pinboardId to reference the Liveboard to embed.\n     * @version SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1\n     */\n    liveboardId?: string;\n    /**\n     * To support backward compatibility\n     * @hidden\n     */\n    pinboardId?: string;\n    /**\n     * The visualization within the Liveboard to display.\n     */\n    vizId?: string;\n    /**\n     * If set to true, all filter chips from a\n     * Liveboard page will be read-only (no X buttons)\n     * @version SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1\n     */\n    preventLiveboardFilterRemoval?: boolean;\n    /**\n     * Array of viz ids which should be visible when the liveboard\n     * first renders. This can be changed by triggering the \"SetVisibleVizs\"\n     * event.\n     * @version SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw\n     */\n    visibleVizs?: string[];\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    preventPinboardFilterRemoval?: boolean;\n    /**\n     * Render embedded Liveboards and visualizations in the new Liveboard experience mode\n     * @version SDK: 1.14.0 | ThoughtSpot: 8.6.0.cl, 8.8.1-sw\n     */\n    liveboardV2?: boolean;\n    /**\n     * Tab Id of the Liveboard that is supposed to be active\n     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw\n     */\n    activeTabId?: string;\n}\n\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport class LiveboardEmbed extends V1Embed {\n    protected viewConfig: LiveboardViewConfig;\n\n    private defaultHeight = 500;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: LiveboardViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Construct a map of params to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const {\n            enableVizTransformations,\n            fullHeight,\n            defaultHeight,\n            visibleVizs,\n            liveboardV2,\n            vizId,\n            activeTabId,\n        } = this.viewConfig;\n\n        const preventLiveboardFilterRemoval =\n            this.viewConfig.preventLiveboardFilterRemoval ||\n            this.viewConfig.preventPinboardFilterRemoval;\n\n        if (fullHeight === true) {\n            params[Param.fullHeight] = true;\n        }\n        if (defaultHeight) {\n            this.defaultHeight = defaultHeight;\n        }\n        if (enableVizTransformations !== undefined) {\n            params[\n                Param.EnableVizTransformations\n            ] = enableVizTransformations.toString();\n        }\n        if (preventLiveboardFilterRemoval) {\n            params[Param.preventLiveboardFilterRemoval] = true;\n        }\n        if (visibleVizs) {\n            params[Param.visibleVizs] = visibleVizs;\n        }\n        params[Param.livedBoardEmbed] = true;\n        if (vizId) {\n            params[Param.vizEmbed] = true;\n        }\n        if (liveboardV2 !== undefined) {\n            params[Param.LiveboardV2Enabled] = liveboardV2;\n        }\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n     * to be loaded within the iframe.\n     * @param liveboardId The GUID of the Liveboard.\n     * @param vizId The optional GUID of a visualization within the Liveboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the Liveboard or visualization on load.\n     */\n    private getIFrameSrc(\n        liveboardId: string,\n        vizId?: string,\n        runtimeFilters?: RuntimeFilter[],\n        activeTabId?: string,\n    ) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            true,\n            false,\n            false,\n        )}/viz/${liveboardId}`;\n        if (activeTabId) {\n            url = `${url}/tab/${activeTabId}`;\n        }\n        if (vizId) {\n            url = `${url}/${vizId}`;\n        }\n\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n        url = `${url}${tsPostHashParams}`;\n\n        return url;\n    }\n\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    private updateIFrameHeight = (data: MessagePayload) => {\n        this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    private embedIframeCenter = (data: MessagePayload, responder: any) => {\n        const obj = this.getIframeCenter();\n        responder({ type: EmbedEvent.EmbedIframeCenter, data: obj });\n    };\n\n    private setIframeHeightForNonEmbedLiveboard = (data: MessagePayload) => {\n        if (!data.data.currentPath.startsWith('/embed/viz/')) {\n            this.setIFrameHeight(this.defaultHeight);\n        }\n    };\n\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n    public trigger(messageType: HostEvent, data: any = {}): Promise<any> {\n        const dataWithVizId = data;\n        if (this.viewConfig.vizId) {\n            dataWithVizId.vizId = this.viewConfig.vizId;\n        }\n        return super.trigger(messageType, dataWithVizId);\n    }\n\n    /**\n     * Render an embedded ThoughtSpot Liveboard or visualization\n     * @param renderOptions An object specifying the Liveboard ID,\n     * visualization ID and the runtime filters.\n     */\n    public render(): LiveboardEmbed {\n        const { vizId, activeTabId, runtimeFilters } = this.viewConfig;\n        const liveboardId =\n            this.viewConfig.liveboardId ?? this.viewConfig.pinboardId;\n\n        if (!liveboardId) {\n            this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n        }\n\n        if (this.viewConfig.fullHeight === true) {\n            this.on(\n                EmbedEvent.RouteChange,\n                this.setIframeHeightForNonEmbedLiveboard,\n            );\n            this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n            this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n        }\n\n        super.render();\n\n        const src = this.getIFrameSrc(\n            liveboardId,\n            vizId,\n            runtimeFilters,\n            activeTabId,\n        );\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PinboardEmbed extends LiveboardEmbed {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}