{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/kipithonteam2/myapp/snowspot-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param, HostEvent } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport var Page;\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Liveboards listing page\n   */\n  Page[\"Liveboards\"] = \"liveboards\";\n  /**\n   * @hidden\n   */\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n  Page[\"Data\"] = \"data\";\n  /**\n   * SpotIQ listing page\n   */\n  Page[\"SpotIQ\"] = \"spotiq\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport var AppEmbed = /*#__PURE__*/function (_V1Embed) {\n  _inherits(AppEmbed, _V1Embed);\n  var _super = _createSuper(AppEmbed);\n  // eslint-disable-next-line no-useless-constructor\n  function AppEmbed(domSelector, viewConfig) {\n    _classCallCheck(this, AppEmbed);\n    return _super.call(this, domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n  _createClass(AppEmbed, [{\n    key: \"getEmbedParams\",\n    value: function getEmbedParams() {\n      var params = this.getBaseQueryParams();\n      var _this$viewConfig = this.viewConfig,\n        tag = _this$viewConfig.tag,\n        hideObjects = _this$viewConfig.hideObjects,\n        liveboardV2 = _this$viewConfig.liveboardV2;\n      if (tag) {\n        params[Param.Tag] = tag;\n      }\n      if (hideObjects && hideObjects.length) {\n        params[Param.HideObjects] = JSON.stringify(hideObjects);\n      }\n      if (liveboardV2 !== undefined) {\n        params[Param.LiveboardV2Enabled] = liveboardV2;\n      }\n      var queryParams = getQueryParamString(params, true);\n      return queryParams;\n    }\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n  }, {\n    key: \"getIFrameSrc\",\n    value: function getIFrameSrc(pageId, runtimeFilters) {\n      var filterQuery = getFilterQuery(runtimeFilters || []);\n      var queryParams = this.getEmbedParams();\n      var queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n      var url = \"\".concat(this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true, this.viewConfig.enableSearchAssist), \"/\").concat(pageId);\n      var tsPostHashParams = this.getThoughtSpotPostUrlParams();\n      url = \"\".concat(url).concat(tsPostHashParams);\n      return url;\n    }\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n  }, {\n    key: \"getPageRoute\",\n    value: function getPageRoute(pageId) {\n      switch (pageId) {\n        case Page.Search:\n          return 'answer';\n        case Page.Answers:\n          return 'answers';\n        case Page.Liveboards:\n          return 'pinboards';\n        case Page.Pinboards:\n          return 'pinboards';\n        case Page.Data:\n          return 'data/tables';\n        case Page.SpotIQ:\n          return 'insights/results';\n        case Page.Home:\n        default:\n          return 'home';\n      }\n    }\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n  }, {\n    key: \"formatPath\",\n    value: function formatPath(path) {\n      if (!path) {\n        return null;\n      }\n      // remove leading slash\n      if (path.indexOf('/') === 0) {\n        return path.substring(1);\n      }\n      return path;\n    }\n    /**\n     * Navigate to particular page for app embed. eg:answers/pinboards/home\n     * This is used for embedding answers, pinboards, visualizations and full application only.\n     * @param path string | number The string, set to iframe src and navigate to new page\n     * eg: appEmbed.navigateToPage('pinboards')\n     * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n     * @param noReload boolean Trigger the navigation without reloading the page\n     * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n  }, {\n    key: \"navigateToPage\",\n    value: function navigateToPage(path) {\n      var noReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!this.iFrame) {\n        console.log('Please call render before invoking this method');\n        return;\n      }\n      if (noReload) {\n        this.trigger(HostEvent.Navigate, path);\n      } else {\n        if (typeof path !== 'string') {\n          console.warn('Path can only by a string when triggered without noReload');\n          return;\n        }\n        var iframeSrc = this.iFrame.src;\n        var embedPath = '#/embed';\n        var currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n        this.iFrame.src = \"\".concat(iframeSrc.split(currentPath)[0]).concat(currentPath, \"/\").concat(path.replace(/^\\/?#?\\//, ''));\n      }\n    }\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(AppEmbed.prototype), \"render\", this).call(this);\n      var _this$viewConfig2 = this.viewConfig,\n        pageId = _this$viewConfig2.pageId,\n        runtimeFilters = _this$viewConfig2.runtimeFilters,\n        path = _this$viewConfig2.path;\n      var pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n      var src = this.getIFrameSrc(pageRoute, runtimeFilters);\n      this.renderV1Embed(src);\n      return this;\n    }\n  }]);\n  return AppEmbed;\n}(V1Embed);","map":{"version":3,"mappings":"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","names":["getFilterQuery","getQueryParamString","Param","HostEvent","V1Embed","Page","AppEmbed","domSelector","viewConfig","params","getBaseQueryParams","tag","hideObjects","liveboardV2","Tag","length","HideObjects","JSON","stringify","undefined","LiveboardV2Enabled","queryParams","pageId","runtimeFilters","filterQuery","getEmbedParams","queryString","filter","Boolean","join","url","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","enableSearchAssist","tsPostHashParams","getThoughtSpotPostUrlParams","Search","Answers","Liveboards","Pinboards","Data","SpotIQ","Home","path","indexOf","substring","noReload","iFrame","console","log","trigger","Navigate","warn","iframeSrc","src","embedPath","currentPath","includes","split","replace","pageRoute","formatPath","getPageRoute","getIFrameSrc","renderV1Embed"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\app.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport {\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n    ViewConfig,\n} from '../types';\nimport { V1Embed } from './ts-embed';\n\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\nexport enum Page {\n    /**\n     * Home page\n     */\n    Home = 'home',\n    /**\n     * Search page\n     */\n    Search = 'search',\n    /**\n     * Saved answers listing page\n     */\n    Answers = 'answers',\n    /**\n     * Liveboards listing page\n     */\n    Liveboards = 'liveboards',\n    /**\n     * @hidden\n     */\n    Pinboards = 'pinboards',\n    /**\n     * Data management page\n     */\n    Data = 'data',\n    /**\n     * SpotIQ listing page\n     */\n    SpotIQ = 'spotiq',\n}\n\n/**\n * The view configuration for full app embedding.\n * @Category App Embed\n */\nexport interface AppViewConfig extends ViewConfig {\n    /**\n     * If true, the main navigation bar within the ThoughtSpot app\n     * is displayed. By default, the navigation bar is hidden.\n     */\n    showPrimaryNavbar?: boolean;\n    /**\n     * If true, help and profile buttons will hide on NavBar. By default,\n     * they are shown.\n     */\n    disableProfileAndHelp?: boolean;\n    /**\n     * A URL path within the app that is to be embedded.\n     * If both path and pageId attributes are defined, the path definition\n     * takes precedence.\n     */\n    path?: string;\n    /**\n     * The application page to set as the start page\n     * in the embedded view.\n     */\n    pageId?: Page;\n    /**\n     * This puts a filter tag on the application. All metadata lists in the application, such as\n     * Liveboards and answers, would be filtered by this tag.\n     */\n    tag?: string;\n    /**\n     * The array of GUIDs to be hidden\n     */\n    hideObjects?: string[];\n    /**\n     * Render liveboards using the new v2 rendering mode\n     * This is a transient flag which is primarily meant for internal use\n     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw\n     * @hidden\n     */\n    liveboardV2?: boolean;\n    /**\n     * If set to true, the Search Assist feature is enabled.\n     * @version SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw\n     */\n    enableSearchAssist?: boolean;\n}\n\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\nexport class AppEmbed extends V1Embed {\n    protected viewConfig: AppViewConfig;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: AppViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Constructs a map of parameters to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const { tag, hideObjects, liveboardV2 } = this.viewConfig;\n\n        if (tag) {\n            params[Param.Tag] = tag;\n        }\n        if (hideObjects && hideObjects.length) {\n            params[Param.HideObjects] = JSON.stringify(hideObjects);\n        }\n        if (liveboardV2 !== undefined) {\n            params[Param.LiveboardV2Enabled] = liveboardV2;\n        }\n\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n    private getIFrameSrc(pageId: string, runtimeFilters: RuntimeFilter[]) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            this.viewConfig.showPrimaryNavbar,\n            this.viewConfig.disableProfileAndHelp,\n            true,\n            this.viewConfig.enableSearchAssist,\n        )}/${pageId}`;\n\n        const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n        url = `${url}${tsPostHashParams}`;\n\n        return url;\n    }\n\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n    private getPageRoute(pageId: Page) {\n        switch (pageId) {\n            case Page.Search:\n                return 'answer';\n            case Page.Answers:\n                return 'answers';\n            case Page.Liveboards:\n                return 'pinboards';\n            case Page.Pinboards:\n                return 'pinboards';\n            case Page.Data:\n                return 'data/tables';\n            case Page.SpotIQ:\n                return 'insights/results';\n            case Page.Home:\n            default:\n                return 'home';\n        }\n    }\n\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n    private formatPath(path: string) {\n        if (!path) {\n            return null;\n        }\n\n        // remove leading slash\n        if (path.indexOf('/') === 0) {\n            return path.substring(1);\n        }\n\n        return path;\n    }\n\n    /**\n     * Navigate to particular page for app embed. eg:answers/pinboards/home\n     * This is used for embedding answers, pinboards, visualizations and full application only.\n     * @param path string | number The string, set to iframe src and navigate to new page\n     * eg: appEmbed.navigateToPage('pinboards')\n     * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n     * @param noReload boolean Trigger the navigation without reloading the page\n     * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n    public navigateToPage(path: string | number, noReload = false): void {\n        if (!this.iFrame) {\n            console.log('Please call render before invoking this method');\n            return;\n        }\n        if (noReload) {\n            this.trigger(HostEvent.Navigate, path);\n        } else {\n            if (typeof path !== 'string') {\n                console.warn(\n                    'Path can only by a string when triggered without noReload',\n                );\n                return;\n            }\n            const iframeSrc = this.iFrame.src;\n            const embedPath = '#/embed';\n            const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n            this.iFrame.src = `${\n                iframeSrc.split(currentPath)[0]\n            }${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n        }\n    }\n\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n    public render(): AppEmbed {\n        super.render();\n\n        const { pageId, runtimeFilters, path } = this.viewConfig;\n        const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n        const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}