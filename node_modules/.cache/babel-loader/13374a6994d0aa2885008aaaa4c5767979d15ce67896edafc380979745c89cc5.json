{"ast":null,"code":"import { EmbedEvent } from '../types';\nexport function getViewPropsAndListeners(props) {\n  return Object.keys(props).reduce(function (accu, key) {\n    if (key.startsWith('on')) {\n      var eventName = key.substr(2);\n      accu.listeners[EmbedEvent[eventName]] = props[key];\n    } else {\n      accu.viewConfig[key] = props[key];\n    }\n    return accu;\n  }, {\n    viewConfig: {},\n    listeners: {}\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAqC,UAAU;AAelE,OAAM,SAAUC,wBAAwB,CAA6CC,KAAQ;EACzF,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,CAC5B,UAACC,IAAI,EAAEC,GAAG,EAAI;IACV,IAAIA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;MACtB,IAAMC,SAAS,GAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;MAC/BJ,IAAI,CAACK,SAAS,CAACX,UAAU,CAACS,SAAS,CAAC,CAAC,GAAGP,KAAK,CAACK,GAAG,CAAC;KACrD,MAAM;MACHD,IAAI,CAACM,UAAU,CAACL,GAAG,CAAC,GAAGL,KAAK,CAACK,GAAG,CAAC;;IAErC,OAAOD,IAAI;EACf,CAAC,EACD;IACIM,UAAU,EAAE,EAAO;IACnBD,SAAS,EAAE;GACd,CACJ;AACL","names":["EmbedEvent","getViewPropsAndListeners","props","Object","keys","reduce","accu","key","startsWith","eventName","substr","listeners","viewConfig"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\react\\util.ts"],"sourcesContent":["import { EmbedEvent, MessageCallback, ViewConfig } from '../types';\n\n// eslint-disable-next-line prettier/prettier\nexport type EmbedEventHandlers = { [key in keyof typeof EmbedEvent as `on${Capitalize<key>}`]?: MessageCallback };\n\n\nexport interface EmbedProps extends ViewConfig, EmbedEventHandlers {\n    className?: string;\n}\n\nexport interface ViewConfigAndListeners<T extends ViewConfig> {\n    viewConfig: T;\n    listeners: { [key in EmbedEvent]?: MessageCallback };\n}\n\nexport function getViewPropsAndListeners<T extends EmbedProps, U extends ViewConfig>(props: T): ViewConfigAndListeners<U> {\n    return Object.keys(props).reduce(\n        (accu, key) => {\n            if (key.startsWith('on')) {\n                const eventName = key.substr(2);\n                accu.listeners[EmbedEvent[eventName]] = props[key];\n            } else {\n                accu.viewConfig[key] = props[key];\n            }\n            return accu;\n        },\n        {\n            viewConfig: {} as U,\n            listeners: {},\n        },\n    );\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}