{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getEncodedQueryParamsString, getCssDimension, getOffsetTop, embedEventStatus, setAttributes, getCustomisations, getDOMNode } from '../utils';\nimport { getThoughtSpotHost, URL_MAX_LENGTH, DEFAULT_EMBED_WIDTH, DEFAULT_EMBED_HEIGHT, getV2BasePath } from '../config';\nimport { AuthType, EmbedEvent, Action, Param } from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { processEventData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport pkgInfo from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\nconst {\n  version\n} = pkgInfo;\n/**\n * Global prefix for all Thoughtspot postHash Params.\n */\nexport const THOUGHTSPOT_PARAM_PREFIX = 'ts-';\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\nconst V1EventMap = {\n  [EmbedEvent.Data]: [EmbedEvent.V1Data]\n};\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\nexport class TsEmbed {\n  constructor(domSelector, viewConfig) {\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    this.shouldEncodeUrlQueryParams = false;\n    this.defaultHiddenActions = [Action.ReportError];\n    /**\n     * Send Custom style as part of payload of APP_INIT\n     */\n    this.appInitCb = (_, responder) => {\n      responder({\n        type: EmbedEvent.APP_INIT,\n        data: {\n          customisations: getCustomisations(this.embedConfig, this.viewConfig)\n        }\n      });\n    };\n    /**\n     * Register APP_INIT event and sendback init payload\n     */\n    this.registerAppInit = () => {\n      this.on(EmbedEvent.APP_INIT, this.appInitCb);\n    };\n    this.el = getDOMNode(domSelector);\n    // TODO: handle error\n    this.embedConfig = getEmbedConfig();\n    this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n    this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n    this.eventHandlerMap = new Map();\n    this.isError = false;\n    this.viewConfig = viewConfig;\n    this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n    this.registerAppInit();\n  }\n  /**\n   * Throws error encountered during initialization.\n   */\n  throwInitError() {\n    this.handleError('You need to init the ThoughtSpot SDK module first');\n  }\n  /**\n   * Handles errors within the SDK\n   * @param error The error message or object\n   */\n  handleError(error) {\n    this.isError = true;\n    this.executeCallbacks(EmbedEvent.Error, {\n      error\n    });\n    // Log error\n    console.error(error);\n  }\n  /**\n   * Extracts the type field from the event payload\n   * @param event The window message event\n   */\n  getEventType(event) {\n    var _a, _b;\n    // eslint-disable-next-line no-underscore-dangle\n    return ((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) || ((_b = event.data) === null || _b === void 0 ? void 0 : _b.__type);\n  }\n  /**\n   * Extracts the port field from the event payload\n   * @param event  The window message event\n   * @returns\n   */\n  getEventPort(event) {\n    if (event.ports.length && event.ports[0]) {\n      return event.ports[0];\n    }\n    return null;\n  }\n  /**\n   * fix for ts7.sep.cl\n   * will be removed for ts7.oct.cl\n   * @hidden\n   */\n  formatEventData(event, eventType) {\n    const eventData = {\n      ...event.data,\n      type: eventType\n    };\n    if (!eventData.data) {\n      eventData.data = event.data.payload;\n    }\n    return eventData;\n  }\n  /**\n   * Adds a global event listener to window for \"message\" events.\n   * ThoughtSpot detects if a particular event is targeted to this\n   * embed instance through an identifier contained in the payload,\n   * and executes the registered callbacks accordingly.\n   */\n  subscribeToEvents() {\n    window.addEventListener('message', event => {\n      const eventType = this.getEventType(event);\n      const eventPort = this.getEventPort(event);\n      const eventData = this.formatEventData(event, eventType);\n      if (event.source === this.iFrame.contentWindow) {\n        this.executeCallbacks(eventType, processEventData(eventType, eventData, this.thoughtSpotHost, this.el), eventPort);\n      }\n    });\n  }\n  /**\n   * Constructs the base URL string to load the ThoughtSpot app.\n   */\n  getEmbedBasePath(query) {\n    let queryString = query;\n    if (this.shouldEncodeUrlQueryParams) {\n      queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryString.substr(1))}`;\n    }\n    const basePath = [this.thoughtSpotHost, this.thoughtSpotV2Base, queryString].filter(x => x.length > 0).join('/');\n    return `${basePath}#/embed`;\n  }\n  /**\n   * Common query params set for all the embed modes.\n   * @returns queryParams\n   */\n  getBaseQueryParams() {\n    var _a, _b;\n    const queryParams = {};\n    let hostAppUrl = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host) || '';\n    // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n    // in any url param.\n    if (hostAppUrl.includes('localhost') || hostAppUrl.includes('127.0.0.1')) {\n      hostAppUrl = 'local-host';\n    }\n    queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n    queryParams[Param.ViewPortHeight] = window.innerHeight;\n    queryParams[Param.ViewPortWidth] = window.innerWidth;\n    queryParams[Param.Version] = version;\n    queryParams[Param.AuthType] = this.embedConfig.authType;\n    if (this.embedConfig.disableLoginRedirect === true || this.embedConfig.autoLogin === true) {\n      queryParams[Param.DisableLoginRedirect] = true;\n    }\n    if (this.embedConfig.authType === AuthType.EmbeddedSSO) {\n      queryParams[Param.ForceSAMLAutoRedirect] = true;\n    }\n    const {\n      disabledActions,\n      disabledActionReason,\n      hiddenActions,\n      visibleActions,\n      showAlerts,\n      additionalFlags,\n      locale,\n      customizations\n    } = this.viewConfig;\n    if (Array.isArray(visibleActions) && Array.isArray(hiddenActions)) {\n      this.handleError('You cannot have both hidden actions and visible actions');\n      return queryParams;\n    }\n    // TODO remove embedConfig.customCssUrl\n    const cssUrlParam = ((_b = customizations === null || customizations === void 0 ? void 0 : customizations.style) === null || _b === void 0 ? void 0 : _b.customCSSUrl) || this.embedConfig.customCssUrl;\n    if (cssUrlParam) {\n      queryParams[Param.CustomCSSUrl] = cssUrlParam;\n    }\n    if (disabledActions === null || disabledActions === void 0 ? void 0 : disabledActions.length) {\n      queryParams[Param.DisableActions] = disabledActions;\n    }\n    if (disabledActionReason) {\n      queryParams[Param.DisableActionReason] = disabledActionReason;\n    }\n    queryParams[Param.HideActions] = [...this.defaultHiddenActions, ...(hiddenActions !== null && hiddenActions !== void 0 ? hiddenActions : [])];\n    if (Array.isArray(visibleActions)) {\n      queryParams[Param.VisibleActions] = visibleActions;\n    }\n    if (showAlerts !== undefined) {\n      queryParams[Param.ShowAlerts] = showAlerts;\n    }\n    if (locale !== undefined) {\n      queryParams[Param.Locale] = locale;\n    }\n    if (additionalFlags && additionalFlags.constructor.name === 'Object') {\n      Object.assign(queryParams, additionalFlags);\n    }\n    return queryParams;\n  }\n  /**\n   * Constructs the base URL string to load v1 of the ThoughtSpot app.\n   * This is used for embedding Liveboards, visualizations, and full application.\n   * @param queryString The query string to append to the URL.\n   * @param isAppEmbed A Boolean parameter to specify if you are embedding\n   * the full application.\n   */\n  getV1EmbedBasePath(queryString) {\n    let showPrimaryNavbar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let disableProfileAndHelp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let isAppEmbed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let enableSearchAssist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const queryStringFrag = queryString ? `&${queryString}` : '';\n    const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n    const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n    const enableSearchAssistParam = `&${Param.EnableSearchAssist}=${enableSearchAssist}`;\n    let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${isAppEmbed ? disableProfileAndHelpParam : ''}${enableSearchAssist ? enableSearchAssistParam : ''}${queryStringFrag}`;\n    if (this.shouldEncodeUrlQueryParams) {\n      queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryParams.substr(1))}`;\n    }\n    let path = `${this.thoughtSpotHost}/${queryParams}#`;\n    if (!isAppEmbed) {\n      path = `${path}/embed`;\n    }\n    return path;\n  }\n  /**\n   * Renders the embedded ThoughtSpot app in an iframe and sets up\n   * event listeners.\n   * @param url\n   * @param frameOptions\n   */\n  async renderIFrame(url) {\n    let frameOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.isError) {\n      return null;\n    }\n    if (!this.thoughtSpotHost) {\n      this.throwInitError();\n    }\n    if (url.length > URL_MAX_LENGTH) {\n      // warn: The URL is too long\n    }\n    return renderInQueue(nextInQueue => {\n      var _a;\n      const initTimestamp = Date.now();\n      this.executeCallbacks(EmbedEvent.Init, {\n        data: {\n          timestamp: initTimestamp\n        },\n        type: EmbedEvent.Init\n      });\n      uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n      return (_a = getAuthPromise()) === null || _a === void 0 ? void 0 : _a.then(isLoggedIn => {\n        if (!isLoggedIn) {\n          this.el.innerHTML = this.embedConfig.loginFailedMessage;\n          return;\n        }\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE);\n        this.iFrame = this.iFrame || document.createElement('iframe');\n        this.iFrame.src = url;\n        // according to screenfull.js documentation\n        // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n        this.iFrame.allowFullscreen = true;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.iFrame.webkitallowfullscreen = true;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.iFrame.mozallowfullscreen = true;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.iFrame.allow = 'clipboard-read; clipboard-write';\n        const {\n          height: frameHeight,\n          width: frameWidth,\n          ...restParams\n        } = frameOptions;\n        const width = getCssDimension(frameWidth || DEFAULT_EMBED_WIDTH);\n        const height = getCssDimension(frameHeight || DEFAULT_EMBED_HEIGHT);\n        setAttributes(this.iFrame, restParams);\n        this.iFrame.style.width = `${width}`;\n        this.iFrame.style.height = `${height}`;\n        this.iFrame.style.border = '0';\n        this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n        this.iFrame.addEventListener('load', () => {\n          nextInQueue();\n          const loadTimestamp = Date.now();\n          this.executeCallbacks(EmbedEvent.Load, {\n            data: {\n              timestamp: loadTimestamp\n            },\n            type: EmbedEvent.Load\n          });\n          uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE, {\n            timeTookToLoad: loadTimestamp - initTimestamp\n          });\n        });\n        this.iFrame.addEventListener('error', () => {\n          nextInQueue();\n        });\n        this.el.innerHTML = '';\n        this.el.appendChild(this.iFrame);\n        const prefetchIframe = document.querySelectorAll('.prefetchIframe');\n        if (prefetchIframe.length) {\n          prefetchIframe.forEach(el => {\n            el.remove();\n          });\n        }\n        this.subscribeToEvents();\n      }).catch(error => {\n        nextInQueue();\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED);\n        this.el.innerHTML = this.embedConfig.loginFailedMessage;\n        this.handleError(error);\n      });\n    });\n  }\n  /**\n   * Sets the height of the iframe\n   * @param height The height in pixels\n   */\n  setIFrameHeight(height) {\n    this.iFrame.style.height = `${height}px`;\n  }\n  /**\n   * Executes all registered event handlers for a particular event type\n   * @param eventType The event type\n   * @param data The payload invoked with the event handler\n   * @param eventPort The event Port for a specific MessageChannel\n   */\n  executeCallbacks(eventType, data, eventPort) {\n    const callbacks = this.eventHandlerMap.get(eventType) || [];\n    const allHandlers = this.eventHandlerMap.get(EmbedEvent.ALL) || [];\n    callbacks.push(...allHandlers);\n    const dataStatus = (data === null || data === void 0 ? void 0 : data.status) || embedEventStatus.END;\n    callbacks.forEach(callbackObj => {\n      if (callbackObj.options.start && dataStatus === embedEventStatus.START ||\n      // When start status is true it trigger only start releated payload\n      !callbackObj.options.start && dataStatus === embedEventStatus.END // When start status is false it trigger only end releated payload\n      ) {\n        callbackObj.callback(data, payload => {\n          this.triggerEventOnPort(eventPort, payload);\n        });\n      }\n    });\n  }\n  /**\n   * Returns the ThoughtSpot hostname or IP address.\n   */\n  getThoughtSpotHost() {\n    return this.thoughtSpotHost;\n  }\n  /**\n   * Gets the v1 event type (if applicable) for the EmbedEvent type\n   * @param eventType The v2 event type\n   * @returns The corresponding v1 event type if one exists\n   * or else the v2 event type itself\n   */\n  getCompatibleEventType(eventType) {\n    return V1EventMap[eventType] || eventType;\n  }\n  /**\n   * Calculates the iframe center for the current visible viewPort\n   * of iframe using Scroll position of Host App, offsetTop for iframe\n   * in Host app. ViewPort height of the tab.\n   * @returns iframe Center in visible viewport,\n   *  Iframe height,\n   *  View port height.\n   */\n  getIframeCenter() {\n    const offsetTopClient = getOffsetTop(this.iFrame);\n    const scrollTopClient = window.scrollY;\n    const viewPortHeight = window.innerHeight;\n    const iframeHeight = this.iFrame.offsetHeight;\n    const iframeScrolled = scrollTopClient - offsetTopClient;\n    let iframeVisibleViewPort;\n    let iframeOffset;\n    if (iframeScrolled < 0) {\n      iframeVisibleViewPort = viewPortHeight - (offsetTopClient - scrollTopClient);\n      iframeVisibleViewPort = Math.min(iframeHeight, iframeVisibleViewPort);\n      iframeOffset = 0;\n    } else {\n      iframeVisibleViewPort = Math.min(iframeHeight - iframeScrolled, viewPortHeight);\n      iframeOffset = iframeScrolled;\n    }\n    const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n    return {\n      iframeCenter,\n      iframeScrolled,\n      iframeHeight,\n      viewPortHeight,\n      iframeVisibleViewPort\n    };\n  }\n  /**\n   * Registers an event listener to trigger an alert when the ThoughtSpot app\n   * sends an event of a particular message type to the host application.\n   *\n   * @param messageType The message type\n   * @param callback A callback as a function\n   * @param options The message options\n   */\n  on(messageType, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      start: false\n    };\n    if (this.isRendered) {\n      this.handleError('Please register event handlers before calling render');\n    }\n    const callbacks = this.eventHandlerMap.get(messageType) || [];\n    callbacks.push({\n      options,\n      callback\n    });\n    this.eventHandlerMap.set(messageType, callbacks);\n    return this;\n  }\n  /**\n   * Triggers an event on specific Port registered against\n   * for the EmbedEvent\n   * @param eventType The message type\n   * @param data The payload to send\n   */\n  triggerEventOnPort(eventPort, payload) {\n    if (eventPort) {\n      try {\n        eventPort.postMessage({\n          type: payload.type,\n          data: payload.data\n        });\n      } catch (e) {\n        eventPort.postMessage({\n          error: e\n        });\n        console.log(e);\n      }\n    } else {\n      console.log('Event Port is not defined');\n    }\n  }\n  /**\n   * Triggers an event to the embedded app\n   * @param messageType The event type\n   * @param data The payload to send with the message\n   */\n  trigger(messageType, data) {\n    uploadMixpanelEvent(`${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`);\n    return processTrigger(this.iFrame, messageType, this.thoughtSpotHost, data);\n  }\n  /**\n   * Marks the ThoughtSpot object to have been rendered\n   * Needs to be overridden by subclasses to do the actual\n   * rendering of the iframe.\n   * @param args\n   */\n  render() {\n    this.isRendered = true;\n    return this;\n  }\n  /**\n   * Get the Post Url Params for THOUGHTSPOT from the current\n   * host app URL.\n   * THOUGHTSPOT URL params starts with a prefix \"ts-\"\n   * @version SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n   */\n  getThoughtSpotPostUrlParams() {\n    const urlHash = window.location.hash;\n    const queryParams = window.location.search;\n    const postHashParams = urlHash.split('?');\n    const postURLParams = postHashParams[postHashParams.length - 1];\n    const queryParamsObj = new URLSearchParams(queryParams);\n    const postURLParamsObj = new URLSearchParams(postURLParams);\n    const params = new URLSearchParams();\n    const addKeyValuePairCb = (value, key) => {\n      if (key.startsWith(THOUGHTSPOT_PARAM_PREFIX)) {\n        params.append(key, value);\n      }\n    };\n    queryParamsObj.forEach(addKeyValuePairCb);\n    postURLParamsObj.forEach(addKeyValuePairCb);\n    let tsParams = params.toString();\n    tsParams = tsParams ? `?${tsParams}` : '';\n    return tsParams;\n  }\n}\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\nexport class V1Embed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Render the app in an iframe and set up event handlers\n   * @param iframeSrc\n   */\n  renderV1Embed(iframeSrc) {\n    return this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n  }\n  // @override\n  on(messageType, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      start: false\n    };\n    const eventType = this.getCompatibleEventType(messageType);\n    return super.on(eventType, callback, options);\n  }\n}","map":{"version":3,"mappings":"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","names":["getEncodedQueryParamsString","getCssDimension","getOffsetTop","embedEventStatus","setAttributes","getCustomisations","getDOMNode","getThoughtSpotHost","URL_MAX_LENGTH","DEFAULT_EMBED_WIDTH","DEFAULT_EMBED_HEIGHT","getV2BasePath","AuthType","EmbedEvent","Action","Param","uploadMixpanelEvent","MIXPANEL_EVENT","processEventData","processTrigger","pkgInfo","getAuthPromise","getEmbedConfig","renderInQueue","version","THOUGHTSPOT_PARAM_PREFIX","V1EventMap","Data","V1Data","TsEmbed","constructor","domSelector","viewConfig","ReportError","_","responder","type","APP_INIT","data","customisations","embedConfig","on","appInitCb","el","thoughtSpotHost","thoughtSpotV2Base","eventHandlerMap","Map","isError","shouldEncodeUrlQueryParams","registerAppInit","throwInitError","handleError","error","executeCallbacks","Error","console","getEventType","event","__type","getEventPort","ports","length","formatEventData","eventType","eventData","payload","subscribeToEvents","window","addEventListener","eventPort","source","iFrame","contentWindow","getEmbedBasePath","query","queryString","substr","basePath","filter","x","join","getBaseQueryParams","queryParams","hostAppUrl","location","host","includes","HostAppUrl","encodeURIComponent","ViewPortHeight","innerHeight","ViewPortWidth","innerWidth","Version","authType","disableLoginRedirect","autoLogin","DisableLoginRedirect","EmbeddedSSO","ForceSAMLAutoRedirect","disabledActions","disabledActionReason","hiddenActions","visibleActions","showAlerts","additionalFlags","locale","customizations","Array","isArray","cssUrlParam","style","customCSSUrl","customCssUrl","CustomCSSUrl","DisableActions","DisableActionReason","HideActions","defaultHiddenActions","VisibleActions","undefined","ShowAlerts","Locale","name","Object","assign","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","isAppEmbed","enableSearchAssist","queryStringFrag","primaryNavParam","disableProfileAndHelpParam","enableSearchAssistParam","EnableSearchAssist","path","renderIFrame","url","frameOptions","nextInQueue","initTimestamp","Date","now","Init","timestamp","VISUAL_SDK_RENDER_START","then","isLoggedIn","innerHTML","loginFailedMessage","VISUAL_SDK_RENDER_COMPLETE","document","createElement","src","allowFullscreen","webkitallowfullscreen","mozallowfullscreen","allow","height","frameHeight","width","frameWidth","restParams","border","loadTimestamp","Load","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","timeTookToLoad","appendChild","prefetchIframe","querySelectorAll","forEach","remove","catch","VISUAL_SDK_RENDER_FAILED","setIFrameHeight","callbacks","get","allHandlers","ALL","push","dataStatus","status","END","callbackObj","options","start","START","callback","triggerEventOnPort","getCompatibleEventType","getIframeCenter","offsetTopClient","scrollTopClient","scrollY","viewPortHeight","iframeHeight","offsetHeight","iframeScrolled","iframeVisibleViewPort","iframeOffset","Math","min","iframeCenter","messageType","isRendered","set","postMessage","e","log","trigger","VISUAL_SDK_TRIGGER","render","getThoughtSpotPostUrlParams","urlHash","hash","search","postHashParams","split","postURLParams","queryParamsObj","URLSearchParams","postURLParamsObj","params","addKeyValuePairCb","value","key","startsWith","append","tsParams","toString","V1Embed","renderV1Embed","iframeSrc","frameParams"],"sources":["C:\\Users\\user\\Desktop\\kipithonteam2\\myapp\\snowspot-app\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\ts-embed.ts"],"sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport {\n    getEncodedQueryParamsString,\n    getCssDimension,\n    getOffsetTop,\n    embedEventStatus,\n    setAttributes,\n    getCustomisations,\n    getDOMNode,\n} from '../utils';\nimport {\n    getThoughtSpotHost,\n    URL_MAX_LENGTH,\n    DEFAULT_EMBED_WIDTH,\n    DEFAULT_EMBED_HEIGHT,\n    getV2BasePath,\n} from '../config';\nimport {\n    AuthType,\n    DOMSelector,\n    HostEvent,\n    EmbedEvent,\n    MessageCallback,\n    Action,\n    Param,\n    EmbedConfig,\n    MessageOptions,\n    MessagePayload,\n    MessageCallbackObj,\n    ViewConfig,\n    FrameParams,\n} from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { processEventData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport pkgInfo from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\n\nconst { version } = pkgInfo;\n\n/**\n * Global prefix for all Thoughtspot postHash Params.\n */\nexport const THOUGHTSPOT_PARAM_PREFIX = 'ts-';\n\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\nconst V1EventMap = {\n    [EmbedEvent.Data]: [EmbedEvent.V1Data],\n};\n\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\nexport class TsEmbed {\n    /**\n     * The DOM node where the ThoughtSpot app is to be embedded.\n     */\n    private el: Element;\n\n    /**\n     * A reference to the iframe within which the ThoughtSpot app\n     * will be rendered.\n     */\n    protected iFrame: HTMLIFrameElement;\n\n    protected viewConfig: ViewConfig;\n\n    protected embedConfig: EmbedConfig;\n\n    /**\n     * The ThoughtSpot hostname or IP address\n     */\n    protected thoughtSpotHost: string;\n\n    /*\n     * This is the base to access ThoughtSpot V2.\n     */\n    protected thoughtSpotV2Base: string;\n\n    /**\n     * A map of event handlers for particular message types triggered\n     * by the embedded app; multiple event handlers can be registered\n     * against a particular message type.\n     */\n    private eventHandlerMap: Map<string, MessageCallbackObj[]>;\n\n    /**\n     * A flag that is set to true post render.\n     */\n    private isRendered: boolean;\n\n    /**\n     * A flag to mark if an error has occurred.\n     */\n    private isError: boolean;\n\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    private shouldEncodeUrlQueryParams = false;\n\n    private defaultHiddenActions = [Action.ReportError];\n\n    constructor(domSelector: DOMSelector, viewConfig?: ViewConfig) {\n        this.el = getDOMNode(domSelector);\n        // TODO: handle error\n        this.embedConfig = getEmbedConfig();\n        this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n        this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n        this.eventHandlerMap = new Map();\n        this.isError = false;\n        this.viewConfig = viewConfig;\n        this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n        this.registerAppInit();\n    }\n\n    /**\n     * Throws error encountered during initialization.\n     */\n    private throwInitError() {\n        this.handleError('You need to init the ThoughtSpot SDK module first');\n    }\n\n    /**\n     * Handles errors within the SDK\n     * @param error The error message or object\n     */\n    protected handleError(error: string | Record<string, unknown>) {\n        this.isError = true;\n        this.executeCallbacks(EmbedEvent.Error, {\n            error,\n        });\n        // Log error\n        console.error(error);\n    }\n\n    /**\n     * Extracts the type field from the event payload\n     * @param event The window message event\n     */\n    private getEventType(event: MessageEvent) {\n        // eslint-disable-next-line no-underscore-dangle\n        return event.data?.type || event.data?.__type;\n    }\n\n    /**\n     * Extracts the port field from the event payload\n     * @param event  The window message event\n     * @returns\n     */\n    private getEventPort(event: MessageEvent) {\n        if (event.ports.length && event.ports[0]) {\n            return event.ports[0];\n        }\n        return null;\n    }\n\n    /**\n     * fix for ts7.sep.cl\n     * will be removed for ts7.oct.cl\n     * @hidden\n     */\n    private formatEventData(event: MessageEvent, eventType: string) {\n        const eventData = {\n            ...event.data,\n            type: eventType,\n        };\n        if (!eventData.data) {\n            eventData.data = event.data.payload;\n        }\n        return eventData;\n    }\n\n    /**\n     * Adds a global event listener to window for \"message\" events.\n     * ThoughtSpot detects if a particular event is targeted to this\n     * embed instance through an identifier contained in the payload,\n     * and executes the registered callbacks accordingly.\n     */\n    private subscribeToEvents() {\n        window.addEventListener('message', (event) => {\n            const eventType = this.getEventType(event);\n            const eventPort = this.getEventPort(event);\n            const eventData = this.formatEventData(event, eventType);\n            if (event.source === this.iFrame.contentWindow) {\n                this.executeCallbacks(\n                    eventType,\n                    processEventData(\n                        eventType,\n                        eventData,\n                        this.thoughtSpotHost,\n                        this.el,\n                    ),\n                    eventPort,\n                );\n            }\n        });\n    }\n\n    /**\n     * Send Custom style as part of payload of APP_INIT\n     */\n    private appInitCb = (_: any, responder: any) => {\n        responder({\n            type: EmbedEvent.APP_INIT,\n            data: {\n                customisations: getCustomisations(\n                    this.embedConfig,\n                    this.viewConfig,\n                ),\n            },\n        });\n    };\n\n    /**\n     * Register APP_INIT event and sendback init payload\n     */\n    private registerAppInit = () => {\n        this.on(EmbedEvent.APP_INIT, this.appInitCb);\n    };\n\n    /**\n     * Constructs the base URL string to load the ThoughtSpot app.\n     */\n    protected getEmbedBasePath(query: string): string {\n        let queryString = query;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(\n                queryString.substr(1),\n            )}`;\n        }\n        const basePath = [\n            this.thoughtSpotHost,\n            this.thoughtSpotV2Base,\n            queryString,\n        ]\n            .filter((x) => x.length > 0)\n            .join('/');\n\n        return `${basePath}#/embed`;\n    }\n\n    /**\n     * Common query params set for all the embed modes.\n     * @returns queryParams\n     */\n    protected getBaseQueryParams() {\n        const queryParams = {};\n        let hostAppUrl = window?.location?.host || '';\n\n        // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n        // in any url param.\n        if (\n            hostAppUrl.includes('localhost') ||\n            hostAppUrl.includes('127.0.0.1')\n        ) {\n            hostAppUrl = 'local-host';\n        }\n        queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n        queryParams[Param.ViewPortHeight] = window.innerHeight;\n        queryParams[Param.ViewPortWidth] = window.innerWidth;\n        queryParams[Param.Version] = version;\n        queryParams[Param.AuthType] = this.embedConfig.authType;\n        if (\n            this.embedConfig.disableLoginRedirect === true ||\n            this.embedConfig.autoLogin === true\n        ) {\n            queryParams[Param.DisableLoginRedirect] = true;\n        }\n        if (this.embedConfig.authType === AuthType.EmbeddedSSO) {\n            queryParams[Param.ForceSAMLAutoRedirect] = true;\n        }\n\n        const {\n            disabledActions,\n            disabledActionReason,\n            hiddenActions,\n            visibleActions,\n            showAlerts,\n            additionalFlags,\n            locale,\n            customizations,\n        } = this.viewConfig;\n\n        if (Array.isArray(visibleActions) && Array.isArray(hiddenActions)) {\n            this.handleError(\n                'You cannot have both hidden actions and visible actions',\n            );\n            return queryParams;\n        }\n\n        // TODO remove embedConfig.customCssUrl\n        const cssUrlParam =\n            customizations?.style?.customCSSUrl ||\n            this.embedConfig.customCssUrl;\n\n        if (cssUrlParam) {\n            queryParams[Param.CustomCSSUrl] = cssUrlParam;\n        }\n\n        if (disabledActions?.length) {\n            queryParams[Param.DisableActions] = disabledActions;\n        }\n        if (disabledActionReason) {\n            queryParams[Param.DisableActionReason] = disabledActionReason;\n        }\n        queryParams[Param.HideActions] = [\n            ...this.defaultHiddenActions,\n            ...(hiddenActions ?? []),\n        ];\n        if (Array.isArray(visibleActions)) {\n            queryParams[Param.VisibleActions] = visibleActions;\n        }\n        if (showAlerts !== undefined) {\n            queryParams[Param.ShowAlerts] = showAlerts;\n        }\n        if (locale !== undefined) {\n            queryParams[Param.Locale] = locale;\n        }\n        if (additionalFlags && additionalFlags.constructor.name === 'Object') {\n            Object.assign(queryParams, additionalFlags);\n        }\n        return queryParams;\n    }\n\n    /**\n     * Constructs the base URL string to load v1 of the ThoughtSpot app.\n     * This is used for embedding Liveboards, visualizations, and full application.\n     * @param queryString The query string to append to the URL.\n     * @param isAppEmbed A Boolean parameter to specify if you are embedding\n     * the full application.\n     */\n    protected getV1EmbedBasePath(\n        queryString: string,\n        showPrimaryNavbar = false,\n        disableProfileAndHelp = false,\n        isAppEmbed = false,\n        enableSearchAssist = false,\n    ): string {\n        const queryStringFrag = queryString ? `&${queryString}` : '';\n        const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n        const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n        const enableSearchAssistParam = `&${Param.EnableSearchAssist}=${enableSearchAssist}`;\n        let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${\n            isAppEmbed ? disableProfileAndHelpParam : ''\n        }${\n            enableSearchAssist ? enableSearchAssistParam : ''\n        }${queryStringFrag}`;\n        if (this.shouldEncodeUrlQueryParams) {\n            queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(\n                queryParams.substr(1),\n            )}`;\n        }\n        let path = `${this.thoughtSpotHost}/${queryParams}#`;\n        if (!isAppEmbed) {\n            path = `${path}/embed`;\n        }\n        return path;\n    }\n\n    /**\n     * Renders the embedded ThoughtSpot app in an iframe and sets up\n     * event listeners.\n     * @param url\n     * @param frameOptions\n     */\n    protected async renderIFrame(\n        url: string,\n        frameOptions: FrameParams = {},\n    ): Promise<any> {\n        if (this.isError) {\n            return null;\n        }\n        if (!this.thoughtSpotHost) {\n            this.throwInitError();\n        }\n        if (url.length > URL_MAX_LENGTH) {\n            // warn: The URL is too long\n        }\n\n        return renderInQueue((nextInQueue) => {\n            const initTimestamp = Date.now();\n\n            this.executeCallbacks(EmbedEvent.Init, {\n                data: {\n                    timestamp: initTimestamp,\n                },\n                type: EmbedEvent.Init,\n            });\n\n            uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n            return getAuthPromise()\n                ?.then((isLoggedIn: boolean) => {\n                    if (!isLoggedIn) {\n                        this.el.innerHTML = this.embedConfig.loginFailedMessage;\n                        return;\n                    }\n\n                    uploadMixpanelEvent(\n                        MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE,\n                    );\n\n                    this.iFrame =\n                        this.iFrame || document.createElement('iframe');\n\n                    this.iFrame.src = url;\n\n                    // according to screenfull.js documentation\n                    // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n                    this.iFrame.allowFullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.webkitallowfullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.mozallowfullscreen = true;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.iFrame.allow = 'clipboard-read; clipboard-write';\n                    const {\n                        height: frameHeight,\n                        width: frameWidth,\n                        ...restParams\n                    } = frameOptions;\n                    const width = getCssDimension(\n                        frameWidth || DEFAULT_EMBED_WIDTH,\n                    );\n                    const height = getCssDimension(\n                        frameHeight || DEFAULT_EMBED_HEIGHT,\n                    );\n                    setAttributes(this.iFrame, restParams);\n\n                    this.iFrame.style.width = `${width}`;\n                    this.iFrame.style.height = `${height}`;\n                    this.iFrame.style.border = '0';\n                    this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n                    this.iFrame.addEventListener('load', () => {\n                        nextInQueue();\n                        const loadTimestamp = Date.now();\n                        this.executeCallbacks(EmbedEvent.Load, {\n                            data: {\n                                timestamp: loadTimestamp,\n                            },\n                            type: EmbedEvent.Load,\n                        });\n                        uploadMixpanelEvent(\n                            MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE,\n                            {\n                                timeTookToLoad: loadTimestamp - initTimestamp,\n                            },\n                        );\n                    });\n                    this.iFrame.addEventListener('error', () => {\n                        nextInQueue();\n                    });\n                    this.el.innerHTML = '';\n                    this.el.appendChild(this.iFrame);\n                    const prefetchIframe = document.querySelectorAll(\n                        '.prefetchIframe',\n                    );\n                    if (prefetchIframe.length) {\n                        prefetchIframe.forEach((el) => {\n                            el.remove();\n                        });\n                    }\n                    this.subscribeToEvents();\n                })\n                .catch((error) => {\n                    nextInQueue();\n                    uploadMixpanelEvent(\n                        MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED,\n                    );\n                    this.el.innerHTML = this.embedConfig.loginFailedMessage;\n                    this.handleError(error);\n                });\n        });\n    }\n\n    /**\n     * Sets the height of the iframe\n     * @param height The height in pixels\n     */\n    protected setIFrameHeight(height: number): void {\n        this.iFrame.style.height = `${height}px`;\n    }\n\n    /**\n     * Executes all registered event handlers for a particular event type\n     * @param eventType The event type\n     * @param data The payload invoked with the event handler\n     * @param eventPort The event Port for a specific MessageChannel\n     */\n    protected executeCallbacks(\n        eventType: EmbedEvent,\n        data: any,\n        eventPort?: MessagePort | void,\n    ): void {\n        const callbacks = this.eventHandlerMap.get(eventType) || [];\n        const allHandlers = this.eventHandlerMap.get(EmbedEvent.ALL) || [];\n        callbacks.push(...allHandlers);\n        const dataStatus = data?.status || embedEventStatus.END;\n        callbacks.forEach((callbackObj) => {\n            if (\n                (callbackObj.options.start &&\n                    dataStatus === embedEventStatus.START) || // When start status is true it trigger only start releated payload\n                (!callbackObj.options.start &&\n                    dataStatus === embedEventStatus.END) // When start status is false it trigger only end releated payload\n            ) {\n                callbackObj.callback(data, (payload) => {\n                    this.triggerEventOnPort(eventPort, payload);\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the ThoughtSpot hostname or IP address.\n     */\n    protected getThoughtSpotHost(): string {\n        return this.thoughtSpotHost;\n    }\n\n    /**\n     * Gets the v1 event type (if applicable) for the EmbedEvent type\n     * @param eventType The v2 event type\n     * @returns The corresponding v1 event type if one exists\n     * or else the v2 event type itself\n     */\n    protected getCompatibleEventType(eventType: EmbedEvent): EmbedEvent {\n        return V1EventMap[eventType] || eventType;\n    }\n\n    /**\n     * Calculates the iframe center for the current visible viewPort\n     * of iframe using Scroll position of Host App, offsetTop for iframe\n     * in Host app. ViewPort height of the tab.\n     * @returns iframe Center in visible viewport,\n     *  Iframe height,\n     *  View port height.\n     */\n    protected getIframeCenter() {\n        const offsetTopClient = getOffsetTop(this.iFrame);\n        const scrollTopClient = window.scrollY;\n        const viewPortHeight = window.innerHeight;\n        const iframeHeight = this.iFrame.offsetHeight;\n        const iframeScrolled = scrollTopClient - offsetTopClient;\n        let iframeVisibleViewPort;\n        let iframeOffset;\n\n        if (iframeScrolled < 0) {\n            iframeVisibleViewPort =\n                viewPortHeight - (offsetTopClient - scrollTopClient);\n            iframeVisibleViewPort = Math.min(\n                iframeHeight,\n                iframeVisibleViewPort,\n            );\n            iframeOffset = 0;\n        } else {\n            iframeVisibleViewPort = Math.min(\n                iframeHeight - iframeScrolled,\n                viewPortHeight,\n            );\n            iframeOffset = iframeScrolled;\n        }\n        const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n        return {\n            iframeCenter,\n            iframeScrolled,\n            iframeHeight,\n            viewPortHeight,\n            iframeVisibleViewPort,\n        };\n    }\n\n    /**\n     * Registers an event listener to trigger an alert when the ThoughtSpot app\n     * sends an event of a particular message type to the host application.\n     *\n     * @param messageType The message type\n     * @param callback A callback as a function\n     * @param options The message options\n     */\n    public on(\n        messageType: EmbedEvent,\n        callback: MessageCallback,\n        options: MessageOptions = { start: false },\n    ): typeof TsEmbed.prototype {\n        if (this.isRendered) {\n            this.handleError(\n                'Please register event handlers before calling render',\n            );\n        }\n        const callbacks = this.eventHandlerMap.get(messageType) || [];\n        callbacks.push({ options, callback });\n        this.eventHandlerMap.set(messageType, callbacks);\n        return this;\n    }\n\n    /**\n     * Triggers an event on specific Port registered against\n     * for the EmbedEvent\n     * @param eventType The message type\n     * @param data The payload to send\n     */\n    private triggerEventOnPort(eventPort: MessagePort | void, payload: any) {\n        if (eventPort) {\n            try {\n                eventPort.postMessage({\n                    type: payload.type,\n                    data: payload.data,\n                });\n            } catch (e) {\n                eventPort.postMessage({ error: e });\n                console.log(e);\n            }\n        } else {\n            console.log('Event Port is not defined');\n        }\n    }\n\n    /**\n     * Triggers an event to the embedded app\n     * @param messageType The event type\n     * @param data The payload to send with the message\n     */\n    public trigger(messageType: HostEvent, data: any): Promise<any> {\n        uploadMixpanelEvent(\n            `${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`,\n        );\n        return processTrigger(\n            this.iFrame,\n            messageType,\n            this.thoughtSpotHost,\n            data,\n        );\n    }\n\n    /**\n     * Marks the ThoughtSpot object to have been rendered\n     * Needs to be overridden by subclasses to do the actual\n     * rendering of the iframe.\n     * @param args\n     */\n    public render(): TsEmbed {\n        this.isRendered = true;\n\n        return this;\n    }\n\n    /**\n     * Get the Post Url Params for THOUGHTSPOT from the current\n     * host app URL.\n     * THOUGHTSPOT URL params starts with a prefix \"ts-\"\n     * @version SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n    public getThoughtSpotPostUrlParams(): string {\n        const urlHash = window.location.hash;\n        const queryParams = window.location.search;\n        const postHashParams = urlHash.split('?');\n        const postURLParams = postHashParams[postHashParams.length - 1];\n        const queryParamsObj = new URLSearchParams(queryParams);\n        const postURLParamsObj = new URLSearchParams(postURLParams);\n        const params = new URLSearchParams();\n\n        const addKeyValuePairCb = (value: string, key: string): void => {\n            if (key.startsWith(THOUGHTSPOT_PARAM_PREFIX)) {\n                params.append(key, value);\n            }\n        };\n        queryParamsObj.forEach(addKeyValuePairCb);\n        postURLParamsObj.forEach(addKeyValuePairCb);\n\n        let tsParams = params.toString();\n        tsParams = tsParams ? `?${tsParams}` : '';\n\n        return tsParams;\n    }\n}\n\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\nexport class V1Embed extends TsEmbed {\n    protected viewConfig: ViewConfig;\n\n    constructor(domSelector: DOMSelector, viewConfig: ViewConfig) {\n        super(domSelector, viewConfig);\n        this.viewConfig = viewConfig;\n    }\n\n    /**\n     * Render the app in an iframe and set up event handlers\n     * @param iframeSrc\n     */\n    protected renderV1Embed(iframeSrc: string): any {\n        return this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n    }\n\n    // @override\n    public on(\n        messageType: EmbedEvent,\n        callback: MessageCallback,\n        options: MessageOptions = { start: false },\n    ): typeof TsEmbed.prototype {\n        const eventType = this.getCompatibleEventType(messageType);\n\n        return super.on(eventType, callback, options);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}